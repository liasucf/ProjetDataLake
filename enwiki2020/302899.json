{
    "id": "302899",
    "text": "\"No Silver Bullet \u2013 Essence and Accident in Software Engineering\" is a widely discussed paper on software engineering written by Turing Award winner Fred Brooks in 1986.Brooks, Proc. IFIP Brooks argues that \"there is no single development, in either technology or management technique, which by itself promises even one order of magnitude [tenfold] improvement within a decade in productivity, in reliability, in simplicity.\" He also states that \"we cannot expect ever to see two-fold gains every two years\" in software development, as there is in hardware development (Moore's law). == Summary == Brooks distinguishes between two different types of complexity: accidental complexity and essential complexity. This is related to Aristotle's classification. Accidental complexity relates to problems which engineers create and can fix; for example, the details of writing and optimizing assembly code or the delays caused by batch processing. Essential complexity is caused by the problem to be solved, and nothing can remove it; if users want a program to do 30 different things, then those 30 things are essential and the program must do those 30 different things. Brooks claims that the accidental complexity has decreased substantially, and today's programmers spend most of their time addressing essential complexity. Brooks argues that this means that shrinking all the accidental activities to zero will not give the same order-of- magnitude improvement as attempting to decrease essential complexity. While Brooks insists that there is no one silver bullet, he believes that a series of innovations attacking essential complexity could lead to significant improvements. One technology that had made significant improvement in the area of accidental complexity was the invention of high-level programming languages, such as Ada. Today's languages, such as C, C++, C# and Java, are considered to be improvements, but not of the same order of magnitude. Brooks advocates \"growing\" software organically through incremental development. He suggests devising and implementing the main and subprograms right at the beginning, filling in the working sub-sections later. He believes that programming this way excites the engineers and provides a working system at every stage of development. Brooks goes on to argue that there is a difference between \"good\" designers and \"great\" designers. He postulates that as programming is a creative process, some designers are inherently better than others. He suggests that there is as much as a tenfold difference between an ordinary designer and a great one. He then advocates treating star designers equally well as star managers, providing them not just with equal remuneration, but also all the perks of higher status: large office, staff, travel funds, etc. The article, and Brooks's later reflections on it, 'No Silver Bullet' Refired, can be found in the anniversary edition of The Mythical Man-Month.Mythical Man-Month, Silver Bullet Refired == Related concepts == Brooks' paper has been sometimes cited in connection with Wirth's law, to argue that \"software systems grow faster in size and complexity than methods to handle complexity are invented\". == See also == * History of software engineering * Software prototyping, one of the main strategies against essential complexity in \"No Silver Bullet\" * SOLID (object-oriented design) * Essential complexity (numerical measure of \"structuredness\") == References == == Further reading == * * * * * == External links == *No Silver Bullet: Essence and Accidents of Software Engineering, by Frederick P. Brooks, Jr. *Software Engineering Principles\u2014Steve McConnell's comments on the dichotomy, originally published in IEEE Software, Vol. 16, No. 2, March/April 1999 Category:1986 documents Category:Academic journal articles Category:Software engineering papers Category:Software project management ",
    "title": "No Silver Bullet"
}