{
    "id": "3254510",
    "text": "Scala ( ) is a general-purpose programming language providing support for both object-oriented programming and functional programming. The language has a strong static type system. Designed to be concise, many of Scala's design decisions are aimed to address criticisms of Java. Scala source code is intended to be compiled to Java bytecode, so that the resulting executable code runs on a Java virtual machine. Scala provides language interoperability with Java, so that libraries written in either language may be referenced directly in Scala or Java code. Like Java, Scala is object-oriented, and uses a curly-brace syntax reminiscent of the C programming language. Unlike Java, Scala has many features of functional programming languages like Scheme, Standard ML and Haskell, including currying, immutability, lazy evaluation, and pattern matching. It also has an advanced type system supporting algebraic data types, covariance and contravariance, higher-order types (but not higher- rank types), and anonymous types. Other features of Scala not present in Java include operator overloading, optional parameters, named parameters, and raw strings. Conversely, a feature of Java not in Scala is checked exceptions, which has proved controversial. The name Scala is a portmanteau of scalable and language, signifying that it is designed to grow with the demands of its users. == History == The design of Scala started in 2001 at the \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne (EPFL) (in Lausanne, Switzerland) by Martin Odersky. It followed on from work on Funnel, a programming language combining ideas from functional programming and Petri nets.Martin Odersky, \"A Brief History of Scala\", Artima.com weblogs, 9 June 2006 Odersky formerly worked on Generic Java, and javac, Sun's Java compiler. After an internal release in late 2003, Scala was released publicly in early 2004 on the Java platform,Martin Odersky, \"The Scala Language Specification Version 2.7\" A second version (v2.0) followed in March 2006. On 17 January 2011, the Scala team won a five-year research grant of over \u20ac2.3 million from the European Research Council. On 12 May 2011, Odersky and collaborators launched Typesafe Inc. (later renamed Lightbend Inc.), a company to provide commercial support, training, and services for Scala. Typesafe received a $3 million investment in 2011 from Greylock Partners. == Platforms and license == Scala runs on the Java platform (Java virtual machine) and is compatible with existing Java programs. As Android applications are typically written in Java and translated from Java bytecode into Dalvik bytecode (which may be further translated to native machine code during installation) when packaged, Scala's Java compatibility makes it well-suited to Android development, more so when a functional approach is preferred. The reference Scala software distribution, including compiler and libraries, is released under the Apache license. === Other compilers and targets === Scala.js is a Scala compiler that compiles to JavaScript, making it possible to write Scala programs that can run in web browsers or Node.js. The compiler was in development since 2013, was announced as no longer experimental in 2015 (v0.6). Version v1.0.0-M1 was released in June 2018. In September 2020 it is at version 1.1.1.https://github.com/scala- js/scala-js/releases Scala Native is a Scala compiler that targets the LLVM compiler infrastructure to create executable code that uses a lightweight managed runtime, which uses the Boehm garbage collector. The project is led by Denys Shabalin and had its first release, 0.1, on 14 March 2017. Development of Scala Native began in 2015 with a goal of being faster than just-in-time compilation for the JVM by eliminating the initial runtime compilation of code and also providing the ability to call native routines directly. A reference Scala compiler targeting the .NET Framework and its Common Language Runtime was released in June 2004, but was officially dropped in 2012.Expunged the .net backend. by paulp \u00b7 Pull Request #1718 \u00b7 scala/scala \u00b7 GitHub. Github.com (2012-12-05). Retrieved on 2013-11-02. == Examples == === \"Hello World\" example === The Hello World program written in Scala has this form: object HelloWorld extends App { println(\"Hello, World!\") } Unlike the stand-alone Hello World application for Java, there is no class declaration and nothing is declared to be static; a singleton object created with the object keyword is used instead. When the program is stored in file HelloWorld.scala, the user compiles it with the command: $ scalac HelloWorld.scala and runs it with $ scala HelloWorld This is analogous to the process for compiling and running Java code. Indeed, Scala's compiling and executing model is identical to that of Java, making it compatible with Java build tools such as Apache Ant. A shorter version of the \"Hello World\" Scala program is: println(\"Hello, World!\") Scala includes interactive shell and scripting support. Saved in a file named `HelloWorld2.scala`, this can be run as a script with no prior compiling using: $ scala HelloWorld2.scala Commands can also be entered directly into the Scala interpreter, using the option ': $ scala -e 'println(\"Hello, World!\")' Expressions can be entered interactively in the REPL: $ scala Welcome to Scala 2.12.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_131). Type in expressions for evaluation. Or try :help. scala> List(1, 2, 3).map(x => x * x) res0: List[Int] = List(1, 4, 9) scala> === Basic example === The following example shows the differences between Java and Scala syntax: {| |- | // Java: int mathFunction(int num) { int numSquare = num*num; return (int) (Math.cbrt(numSquare) + Math.log(numSquare)); } |- | // Scala: Direct conversion from Java // no import needed; scala.math // already imported as `math` def mathFunction(num: Int): Int = { var numSquare: Int = num*num return (math.cbrt(numSquare) + math.log(numSquare)). asInstanceOf[Int] } | // Scala: More idiomatic // Uses type inference, omits `return` statement, // uses `toInt` method, declares numSquare immutable import math._ def mathFunction(num: Int) = { val numSquare = num*num (cbrt(numSquare) + log(numSquare)).toInt } |} Some syntactic differences in this code are: * Scala does not require semicolons to end statements. * Value types are capitalized: `Int, Double, Boolean` instead of `int, double, boolean`. * Parameter and return types follow, as in Pascal, rather than precede as in C. * Methods must be preceded by `def`. * Local or class variables must be preceded by `val` (indicates an immutable variable) or `var` (indicates a mutable variable). * The `return` operator is unnecessary in a function (although allowed); the value of the last executed statement or expression is normally the function's value. * Instead of the Java cast operator `(Type) foo`, Scala uses `foo.asInstanceOf[Type]`, or a specialized function such as `toDouble` or `toInt`. * Instead of Java's `import foo.*;`, Scala uses `import foo._`. * Function or method `foo()` can also be called as just `foo`; method `thread.send(signo)` can also be called as just `thread send signo`; and method `foo.toString()` can also be called as just `foo toString`. These syntactic relaxations are designed to allow support for domain-specific languages. Some other basic syntactic differences: * Array references are written like function calls, e.g. `array(i)` rather than `array[i]`. (Internally in Scala, the former expands into array.apply(i) which returns the reference) * Generic types are written as e.g. `List[String]` rather than Java's `List<String>`. * Instead of the pseudo-type `void`, Scala has the actual singleton class `Unit` (see below). === Example with classes === The following example contrasts the definition of classes in Java and Scala. {| |- valign=\"top\" | // Java: public class Point { private final double x, y; public Point(final double x, final double y) { this.x = x; this.y = y; } public Point( final double x, final double y, final boolean addToGrid ) { this(x, y); if (addToGrid) grid.add(this); } public Point() { this(0.0, 0.0); } public double getX() { return x; } public double getY() { return y; } double distanceToPoint(final Point other) { return distanceBetweenPoints(x, y, other.x, other.y); } private static Grid grid = new Grid(); static double distanceBetweenPoints( final double x1, final double y1, final double x2, final double y2 ) { return Math.hypot(x1 - x2, y1 - y2); } } | // Scala class Point( val x: Double, val y: Double, addToGrid: Boolean = false ) { import Point._ if (addToGrid) grid.add(this) def this() = this(0.0, 0.0) def distanceToPoint(other: Point) = distanceBetweenPoints(x, y, other.x, other.y) } object Point { private val grid = new Grid() def distanceBetweenPoints(x1: Double, y1: Double, x2: Double, y2: Double) = { math.hypot(x1 - x2, y1 - y2) } } |} The code above shows some of the conceptual differences between Java and Scala's handling of classes: * Scala has no static variables or methods. Instead, it has singleton objects, which are essentially classes with only one instance. Singleton objects are declared using `object` instead of `class`. It is common to place static variables and methods in a singleton object with the same name as the class name, which is then known as a companion object. (The underlying class for the singleton object has a `$` appended. Hence, for `class Foo` with companion object `object Foo`, under the hood there's a class `Foo$` containing the companion object's code, and one object of this class is created, using the singleton pattern.) * In place of constructor parameters, Scala has class parameters, which are placed on the class, similar to parameters to a function. When declared with a `val` or `var` modifier, fields are also defined with the same name, and automatically initialized from the class parameters. (Under the hood, external access to public fields always goes through accessor (getter) and mutator (setter) methods, which are automatically created. The accessor function has the same name as the field, which is why it's unnecessary in the above example to explicitly declare accessor methods.) Note that alternative constructors can also be declared, as in Java. Code that would go into the default constructor (other than initializing the member variables) goes directly at class level. * Default visibility in Scala is `public`. == Features (with reference to Java) == Scala has the same compiling model as Java and C#, namely separate compiling and dynamic class loading, so that Scala code can call Java libraries. Scala's operational characteristics are the same as Java's. The Scala compiler generates byte code that is nearly identical to that generated by the Java compiler. In fact, Scala code can be decompiled to readable Java code, with the exception of certain constructor operations. To the Java virtual machine (JVM), Scala code and Java code are indistinguishable. The only difference is one extra runtime library, `scala-library.jar`. Scala adds a large number of features compared with Java, and has some fundamental differences in its underlying model of expressions and types, which make the language theoretically cleaner and eliminate several corner cases in Java. From the Scala perspective, this is practically important because several added features in Scala are also available in C#. Examples include: === Syntactic flexibility === As mentioned above, Scala has a good deal of syntactic flexibility, compared with Java. The following are some examples: * Semicolons are unnecessary; lines are automatically joined if they begin or end with a token that cannot normally come in this position, or if there are unclosed parentheses or brackets. * Any method can be used as an infix operator, e.g. `\"%d apples\".format(num)` and `\"%d apples\" format num` are equivalent. In fact, arithmetic operators like `+` and `<<` are treated just like any other methods, since function names are allowed to consist of sequences of arbitrary symbols (with a few exceptions made for things like parens, brackets and braces that must be handled specially); the only special treatment that such symbol-named methods undergo concerns the handling of precedence. * Methods `apply` and `update` have syntactic short forms. `foo()`\u2014where `foo` is a value (singleton object or class instance)\u2014is short for `foo.apply()`, and `foo() = 42` is short for `foo.update(42)`. Similarly, `foo(42)` is short for `foo.apply(42)`, and `foo(4) = 2` is short for `foo.update(4, 2)`. This is used for collection classes and extends to many other cases, such as STM cells. * Scala distinguishes between no-parens (`def foo = 42`) and empty- parens (`def foo() = 42`) methods. When calling an empty-parens method, the parentheses may be omitted, which is useful when calling into Java libraries that do not know this distinction, e.g., using `foo.toString` instead of `foo.toString()`. By convention, a method should be defined with empty-parens when it performs side effects. * Method names ending in colon (`:`) expect the argument on the left-hand-side and the receiver on the right-hand-side. For example, the `4 :: 2 :: Nil` is the same as `Nil.::(2).::(4)`, the first form corresponding visually to the result (a list with first element 4 and second element 2). * Class body variables can be transparently implemented as separate getter and setter methods. For `trait FooLike { var bar: Int }`, an implementation may be . The call site will still be able to use a concise `foo.bar = 42`. * The use of curly braces instead of parentheses is allowed in method calls. This allows pure library implementations of new control structures.Scala's built-in control structures such as `if` or `while` cannot be re-implemented. There is a research project, Scala-Virtualized, that aimed at removing these restrictions: Adriaan Moors, Tiark Rompf, Philipp Haller and Martin Odersky. Scala-Virtualized. Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation, 117\u2013120. July 2012. For example, `breakable { ... if (...) break() ... }` looks as if `breakable` was a language defined keyword, but really is just a method taking a thunk argument. Methods that take thunks or functions often place these in a second parameter list, allowing to mix parentheses and curly braces syntax: `Vector.fill(4) { math.random }` is the same as `Vector.fill(4)(math.random)`. The curly braces variant allows the expression to span multiple lines. *For- expressions (explained further down) can accommodate any type that defines monadic methods such as `map`, `flatMap` and `filter`. By themselves, these may seem like questionable choices, but collectively they serve the purpose of allowing domain-specific languages to be defined in Scala without needing to extend the compiler. For example, Erlang's special syntax for sending a message to an actor, i.e. `actor ! message` can be (and is) implemented in a Scala library without needing language extensions. === Unified type system === Java makes a sharp distinction between primitive types (e.g. `int` and `boolean`) and reference types (any class). Only reference types are part of the inheritance scheme, deriving from `java.lang.Object`. In Scala, all types inherit from a top-level class `Any`, whose immediate children are `AnyVal` (value types, such as `Int` and `Boolean`) and `AnyRef` (reference types, as in Java). This means that the Java distinction between primitive types and boxed types (e.g. `int` vs. `Integer`) is not present in Scala; boxing and unboxing is completely transparent to the user. Scala 2.10 allows for new value types to be defined by the user. === For-expressions === Instead of the Java \"foreach\" loops for looping through an iterator, Scala has `for`-expressions, which are similar to list comprehensions in languages such as Haskell, or a combination of list comprehensions and generator expressions in Python. For-expressions using the `yield` keyword allow a new collection to be generated by iterating over an existing one, returning a new collection of the same type. They are translated by the compiler into a series of `map`, `flatMap` and `filter` calls. Where `yield` is not used, the code approximates to an imperative-style loop, by translating to `foreach`. A simple example is: val s = for (x <\\- 1 to 25 if x*x > 50) yield 2*x The result of running it is the following vector: :`Vector(16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50)` (Note that the expression `1 to 25` is not special syntax. The method `to` is rather defined in the standard Scala library as an extension method on integers, using a technique known as implicit conversions that allows new methods to be added to existing types.) A more complex example of iterating over a map is: // Given a map specifying Twitter users mentioned in a set of tweets, // and number of times each user was mentioned, look up the users // in a map of known politicians, and return a new map giving only the // Democratic politicians (as objects, rather than strings). val dem_mentions = for { (mention, times) <\\- mentions account <\\- accounts.get(mention) if account.party == \"Democratic\" } yield (account, times) Expression `(mention, times) <- mentions` is an example of pattern matching (see below). Iterating over a map returns a set of key-value tuples, and pattern-matching allows the tuples to easily be destructured into separate variables for the key and value. Similarly, the result of the comprehension also returns key-value tuples, which are automatically built back up into a map because the source object (from the variable `mentions`) is a map. Note that if `mentions` instead held a list, set, array or other collection of tuples, exactly the same code above would yield a new collection of the same type. === Functional tendencies === While supporting all of the object- oriented features available in Java (and in fact, augmenting them in various ways), Scala also provides a large number of capabilities that are normally found only in functional programming languages. Together, these features allow Scala programs to be written in an almost completely functional style and also allow functional and object-oriented styles to be mixed. Examples are: * No distinction between statements and expressions * Type inference * Anonymous functions with capturing semantics (i.e., closures) *Immutable variables and objects * Lazy evaluation * Delimited continuations (since 2.8) * Higher-order functions * Nested functions * Currying * Pattern matching * Algebraic data types (through case classes) * Tuples ==== Everything is an expression ==== Unlike C or Java, but similar to languages such as Lisp, Scala makes no distinction between statements and expressions. All statements are in fact expressions that evaluate to some value. Functions that would be declared as returning `void` in C or Java, and statements like `while` that logically do not return a value, are in Scala considered to return the type `Unit`, which is a singleton type, with only one object of that type. Functions and operators that never return at all (e.g. the `throw` operator or a function that always exits non-locally using an exception) logically have return type `Nothing`, a special type containing no objects; that is, a bottom type, i.e. a subclass of every possible type. (This in turn makes type `Nothing` compatible with every type, allowing type inference to function correctly.) Similarly, an `if-then-else` \"statement\" is actually an expression, which produces a value, i.e. the result of evaluating one of the two branches. This means that such a block of code can be inserted wherever an expression is desired, obviating the need for a ternary operator in Scala: {| |- | // Java: int hexDigit = x >= 10 ? x + 'A' - 10 : x + '0'; | // Scala: val hexDigit = if (x >= 10) x + 'A' - 10 else x + '0' |} For similar reasons, `return` statements are unnecessary in Scala, and in fact are discouraged. As in Lisp, the last expression in a block of code is the value of that block of code, and if the block of code is the body of a function, it will be returned by the function. To make it clear that all functions are expressions, even methods that return `Unit` are written with an equals sign def printValue(x: String): Unit = { println(\"I ate a %s\".format(x)) } or equivalently (with type inference, and omitting the unnecessary braces): def printValue(x: String) = println(\"I ate a %s\" format x) ==== Type inference ==== Due to type inference, the type of variables, function return values, and many other expressions can typically be omitted, as the compiler can deduce it. Examples are `val x = \"foo\"` (for an immutable constant or immutable object) or `var x = 1.5` (for a variable whose value can later be changed). Type inference in Scala is essentially local, in contrast to the more global Hindley-Milner algorithm used in Haskell, ML and other more purely functional languages. This is done to facilitate object-oriented programming. The result is that certain types still need to be declared (most notably, function parameters, and the return types of recursive functions), e.g. def formatApples(x: Int) = \"I ate %d apples\".format(x) or (with a return type declared for a recursive function) def factorial(x: Int): Int = if (x == 0) 1 else x*factorial(x - 1) ==== Anonymous functions ==== In Scala, functions are objects, and a convenient syntax exists for specifying anonymous functions. An example is the expression `x => x < 2`, which specifies a function with one parameter, that compares its argument to see if it is less than 2. It is equivalent to the Lisp form `(lambda (x) (< x 2))`. Note that neither the type of `x` nor the return type need be explicitly specified, and can generally be inferred by type inference; but they can be explicitly specified, e.g. as `(x: Int) => x < 2` or even `(x: Int) => (x < 2): Boolean`. Anonymous functions behave as true closures in that they automatically capture any variables that are lexically available in the environment of the enclosing function. Those variables will be available even after the enclosing function returns, and unlike in the case of Java's anonymous inner classes do not need to be declared as final. (It is even possible to modify such variables if they are mutable, and the modified value will be available the next time the anonymous function is called.) An even shorter form of anonymous function uses placeholder variables: For example, the following: :`list map { x => sqrt(x) }` can be written more concisely as :`list map { sqrt(_) }` or even :`list map sqrt` ==== Immutability ==== Scala enforces a distinction between immutable and mutable variables. Mutable variables are declared using the `var` keyword and immutable values are declared using the `val` keyword. A variable declared using the `val` keyword can not be reassigned in the same way that a variable declared using the `final` keyword can't be reassigned in Java. It should be noted however that `val`'s are only shallowly immutable, that is, an object referenced by a val is not guaranteed to itself be immutable. Immutable classes are encouraged by convention however, and the Scala standard library provides a rich set of immutable collection classes. Scala provides mutable and immutable variants of most collection classes, and the immutable version is always used unless the mutable version is explicitly imported. The immutable variants are persistent data structures that always return an updated copy of an old object instead of updating the old object destructively in place. An example of this is immutable linked lists where prepending an element to a list is done by returning a new list node consisting of the element and a reference to the list tail. Appending an element to a list can only be done by prepending all elements in the old list to a new list with only the new element. In the same way, inserting an element in the middle of a list will copy the first half of the list, but keep a reference to the second half of the list. This is called structural sharing. This allows for very easy concurrency \u2014 no locks are needed as no shared objects are ever modified. ==== Lazy (non-strict) evaluation ==== Evaluation is strict (\"eager\") by default. In other words, Scala evaluates expressions as soon as they are available, rather than as needed. However, it is possible to declare a variable non- strict (\"lazy\") with the `lazy` keyword, meaning that the code to produce the variable's value will not be evaluated until the first time the variable is referenced. Non-strict collections of various types also exist (such as the type `Stream`, a non-strict linked list), and any collection can be made non- strict with the `view` method. Non-strict collections provide a good semantic fit to things like server-produced data, where the evaluation of the code to generate later elements of a list (that in turn triggers a request to a server, possibly located somewhere else on the web) only happens when the elements are actually needed. ==== Tail recursion ==== Functional programming languages commonly provide tail call optimization to allow for extensive use of recursion without stack overflow problems. Limitations in Java bytecode complicate tail call optimization on the JVM. In general, a function that calls itself with a tail call can be optimized, but mutually recursive functions cannot. Trampolines have been suggested as a workaround. Trampoline support has been provided by the Scala library with the object `scala.util.control.TailCalls` since Scala 2.8.0 (released 14 July 2010). A function may optionally be annotated with `@tailrec`, in which case it will not compile unless it is tail recursive. ==== Case classes and pattern matching ==== Scala has built-in support for pattern matching, which can be thought of as a more sophisticated, extensible version of a switch statement, where arbitrary data types can be matched (rather than just simple types like integers, booleans and strings), including arbitrary nesting. A special type of class known as a case class is provided, which includes automatic support for pattern matching and can be used to model the algebraic data types used in many functional programming languages. (From the perspective of Scala, a case class is simply a normal class for which the compiler automatically adds certain behaviors that could also be provided manually, e.g., definitions of methods providing for deep comparisons and hashing, and destructuring a case class on its constructor parameters during pattern matching.) An example of a definition of the quicksort algorithm using pattern matching is this: def qsort(list: List[Int]): List[Int] = list match { case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) } The idea here is that we partition a list into the elements less than a pivot and the elements not less, recursively sort each part, and paste the results together with the pivot in between. This uses the same divide-and-conquer strategy of mergesort and other fast sorting algorithms. The `match` operator is used to do pattern matching on the object stored in `list`. Each `case` expression is tried in turn to see if it will match, and the first match determines the result. In this case, `Nil` only matches the literal object `Nil`, but `pivot :: tail` matches a non-empty list, and simultaneously destructures the list according to the pattern given. In this case, the associated code will have access to a local variable named `pivot` holding the head of the list, and another variable `tail` holding the tail of the list. Note that these variables are read-only, and are semantically very similar to variable bindings established using the `let` operator in Lisp and Scheme. Pattern matching also happens in local variable declarations. In this case, the return value of the call to `tail.partition` is a tuple \u2014 in this case, two lists. (Tuples differ from other types of containers, e.g. lists, in that they are always of fixed size and the elements can be of differing types \u2014 although here they are both the same.) Pattern matching is the easiest way of fetching the two parts of the tuple. The form `_ < pivot` is a declaration of an anonymous function with a placeholder variable; see the section above on anonymous functions. The list operators `::` (which adds an element onto the beginning of a list, similar to `cons` in Lisp and Scheme) and `:::` (which appends two lists together, similar to `append` in Lisp and Scheme) both appear. Despite appearances, there is nothing \"built-in\" about either of these operators. As specified above, any string of symbols can serve as function name, and a method applied to an object can be written \"infix\"-style without the period or parentheses. The line above as written: ::`qsort(smaller) ::: pivot :: qsort(rest)` could also be written thus: ::`qsort(rest).::(pivot).:::(qsort(smaller))` in more standard method-call notation. (Methods that end with a colon are right- associative and bind to the object to the right.) ==== Partial functions ==== In the pattern-matching example above, the body of the `match` operator is a partial function, which consists of a series of `case` expressions, with the first matching expression prevailing, similar to the body of a switch statement. Partial functions are also used in the exception-handling portion of a `try` statement: try { ... } catch { case nfe:NumberFormatException => { println(nfe); List(0) } case _ => Nil } Finally, a partial function can be used alone, and the result of calling it is equivalent to doing a `match` over it. For example, the prior code for quicksort can be written thus: val qsort: List[Int] => List[Int] = { case Nil => Nil case pivot :: tail => val (smaller, rest) = tail.partition(_ < pivot) qsort(smaller) ::: pivot :: qsort(rest) } Here a read-only variable is declared whose type is a function from lists of integers to lists of integers, and bind it to a partial function. (Note that the single parameter of the partial function is never explicitly declared or named.) However, we can still call this variable exactly as if it were a normal function: scala> qsort(List(6,2,5,9)) res32: List[Int] = List(2, 5, 6, 9) === Object-oriented extensions === Scala is a pure object-oriented language in the sense that every value is an object. Data types and behaviors of objects are described by classes and traits. Class abstractions are extended by subclassing and by a flexible mixin-based composition mechanism to avoid the problems of multiple inheritance. Traits are Scala's replacement for Java's interfaces. Interfaces in Java versions under 8 are highly restricted, able only to contain abstract function declarations. This has led to criticism that providing convenience methods in interfaces is awkward (the same methods must be reimplemented in every implementation), and extending a published interface in a backwards-compatible way is impossible. Traits are similar to mixin classes in that they have nearly all the power of a regular abstract class, lacking only class parameters (Scala's equivalent to Java's constructor parameters), since traits are always mixed in with a class. The `super` operator behaves specially in traits, allowing traits to be chained using composition in addition to inheritance. The following example is a simple window system: abstract class Window { // abstract def draw() } class SimpleWindow extends Window { def draw() { println(\"in SimpleWindow\") // draw a basic window } } trait WindowDecoration extends Window { } trait HorizontalScrollbarDecoration extends WindowDecoration { // \"abstract override\" is needed here in order for \"super()\" to work because the parent // function is abstract. If it were concrete, regular \"override\" would be enough. abstract override def draw() { println(\"in HorizontalScrollbarDecoration\") super.draw() // now draw a horizontal scrollbar } } trait VerticalScrollbarDecoration extends WindowDecoration { abstract override def draw() { println(\"in VerticalScrollbarDecoration\") super.draw() // now draw a vertical scrollbar } } trait TitleDecoration extends WindowDecoration { abstract override def draw() { println(\"in TitleDecoration\") super.draw() // now draw the title bar } } A variable may be declared thus: val mywin = new SimpleWindow with VerticalScrollbarDecoration with HorizontalScrollbarDecoration with TitleDecoration The result of calling `mywin.draw()` is: in TitleDecoration in HorizontalScrollbarDecoration in VerticalScrollbarDecoration in SimpleWindow In other words, the call to `draw` first executed the code in `TitleDecoration` (the last trait mixed in), then (through the `super()` calls) threaded back through the other mixed-in traits and eventually to the code in `Window`, even though none of the traits inherited from one another. This is similar to the decorator pattern, but is more concise and less error-prone, as it doesn't require explicitly encapsulating the parent window, explicitly forwarding functions whose implementation isn't changed, or relying on run-time initialization of entity relationships. In other languages, a similar effect could be achieved at compile-time with a long linear chain of implementation inheritance, but with the disadvantage compared to Scala that one linear inheritance chain would have to be declared for each possible combination of the mix-ins. === Expressive type system === Scala is equipped with an expressive static type system that mostly enforces the safe and coherent use of abstractions. The type system is, however, not sound. In particular, the type system supports: * Classes and abstract types as object members * Structural types * Path- dependent types * Compound types * Explicitly typed self references * Generic classes * Polymorphic methods * Upper and lower type bounds * Variance * Annotation * Views Scala is able to infer types by usage. This makes most static type declarations optional. Static types need not be explicitly declared unless a compiler error indicates the need. In practice, some static type declarations are included for the sake of code clarity. === Type enrichment === A common technique in Scala, known as \"enrich my library\" (originally termed \"pimp my library\" by Martin Odersky in 2006; concerns were raised about this phrasing due to its negative connotations and immaturity), allows new methods to be used as if they were added to existing types. This is similar to the C# concept of extension methods but more powerful, because the technique is not limited to adding methods and can, for instance, be used to implement new interfaces. In Scala, this technique involves declaring an implicit conversion from the type \"receiving\" the method to a new type (typically, a class) that wraps the original type and provides the additional method. If a method cannot be found for a given type, the compiler automatically searches for any applicable implicit conversions to types that provide the method in question. This technique allows new methods to be added to an existing class using an add-on library such that only code that imports the add-on library gets the new functionality, and all other code is unaffected. The following example shows the enrichment of type `Int` with methods `isEven` and `isOdd`: object MyExtensions { implicit class IntPredicates(i: Int) { def isEven = i % 2 == 0 def isOdd = !isEven } } import MyExtensions._ // bring implicit enrichment into scope 4.isEven // -> true Importing the members of `MyExtensions` brings the implicit conversion to extension class `IntPredicates` into scope.Implicit classes were introduced in Scala 2.10 to make method extensions more concise. This is equivalent to adding a method `implicit def IntPredicate(i: Int) = new IntPredicate(i)`. The class can also be defined as `implicit class IntPredicates(val i: Int) extends AnyVal { ... }`, producing a so-called value class, also introduced in Scala 2.10. The compiler will then eliminate actual instantiations and generate static methods instead, allowing extension methods to have virtually no performance overhead. == Concurrency == Scala's standard library includes support for the actor model, in addition to the standard Java concurrency APIs. Lightbend Inc. provides a platform that includes Akka,What is Akka?, Akka online documentation a separate open-source framework that provides actor-based concurrency. Akka actors may be distributed or combined with software transactional memory (transactors). Alternative communicating sequential processes (CSP) implementations for channel-based message passing are Communicating Scala Objects,Communicating Scala Objects, Bernard Sufrin, Communicating Process Architectures 2008 or simply via JCSP. An Actor is like a thread instance with a mailbox. It can be created by `system.actorOf`, overriding the `receive` method to receive messages and using the `!` (exclamation point) method to send a message. The following example shows an EchoServer that can receive messages and then print them. val echoServer = actor(new Act { become { case msg => println(\"echo \" + msg) } }) echoServer ! \"hi\" Scala also comes with built-in support for data-parallel programming in the form of Parallel Collections integrated into its Standard Library since version 2.9.0. The following example shows how to use Parallel Collections to improve performance. val urls = List(\"https://scala-lang.org\", \"https://github.com/scala/scala\") def fromURL(url: String) = scala.io.Source.fromURL(url) .getLines().mkString(\" \") val t = System.currentTimeMillis() urls.par.map(fromURL(_)) // par returns parallel implementation of a collection println(\"time: \" + (System.currentTimeMillis - t) + \"ms\") Besides actor support and data-parallelism, Scala also supports asynchronous programming with Futures and Promises, software transactional memory, and event streams.Learning Concurrent Programming in Scala, Aleksandar Prokopec, Packt Publishing == Cluster computing == The most well-known open- source cluster-computing solution written in Scala is Apache Spark. Additionally, Apache Kafka, the publish\u2013subscribe message queue popular with Spark and other stream processing technologies, is written in Scala. == Testing == There are several ways to test code in Scala. ScalaTest supports multiple testing styles and can integrate with Java-based testing frameworks. ScalaCheck is a library similar to Haskell's QuickCheck. specs2 is a library for writing executable software specifications. ScalaMock provides support for testing high-order and curried functions. JUnit and TestNG are popular testing frameworks written in Java. == Versions == {| class=\"wikitable\" |- ! scope=\"col\"| Version ! scope=\"col\"| Released ! scope=\"col\"| Features ! scope=\"col\"| Status |- ! scope=\"row\" | 1.0.0-b2 | 8-Dec-2003 | _ | _ |- ! scope=\"row\" | 1.1.0-b1 | 19-Feb-2004 | * scala.Enumeration * Scala license was changed to the revised BSD license | _ |- ! scope=\"row\" | 1.1.1 | 23-Mar-2004 | * Support for Java static inner classes * Library class improvements to Iterable, Array, xml.Elem, Buffer | _ |- ! scope=\"row\" | 1.2.0 | 9-Jun-2004 | * Views * XML Literals | _ |- ! scope=\"row\" | 1.3.0 | 16-Sep-2004 | * Support for Microsoft .NET * Method closures * Type syntax for parameterless methods changed from `[] T` to `=> T` | _ |- ! scope=\"row\" | 1.4.0 | 20-Jun-2005 | * Attributes * `match` keyword replaces `match` method * Experimental support for runtime types | _ |- ! scope=\"row\" | 2.0 | 12-Mar-2006 | * Compiler completely rewritten in Scala * Experimental support for Java generics * `implicit ` and `requires` keywords * `match` keyword only allowed infix * `with` connective is only allowed following an `extends` clause * Newlines can be used as statement separators in place of semicolons * Regular expression match patterns restricted to sequence patterns only * For-comprehensions admit value and pattern definitions * Class parameters may be prefixed by val or var * Private visibility has qualifiers | _ |- ! scope=\"row\" | 2.1.0 | 17-Mar-2006 | * sbaz tool integrated in the Scala distribution * `match` keyword replaces `match` method * Experimental support for runtime types | _ |- ! scope=\"row\" | 2.1.8 | 23-Aug-2006 | * Protected visibility has qualifiers * Private members of a class can be referenced from the companion module of the class and vice versa * Implicit lookup generalised * Typed pattern match tightened for singleton types | _ |- ! scope=\"row\" | 2.3.0 | 23-Nov-2006 | * Functions returning `Unit` don't have to explicitly state a return type * Type variables and types are distinguished between in pattern matching * `All` and `AllRef` renamed to `Nothing` and `Null` | _ |- ! scope=\"row\" | 2.4.0 | 09-Mar-2007 | * `private` and `protected` modifiers accept a `[this]` qualifier * Tuples can be written with round brackets * Primary constructor of a class can now be marked private or protected * Attributes changed to annotations with new syntax * Self aliases * Operators can be combined with assignment | _ |- ! scope=\"row\" | 2.5.0 | 02-May-2007 | * Type parameters and abstract type members can also abstract over type constructors * Fields of an object can be initialized before parent constructors are called * Syntax change for- comprehensions * Implicit anonymous functions (with underscores for parameters) * Pattern matching of anonymous functions extended to support any arty | _ |- ! scope=\"row\" | 2.6.0 | 27-Jul-2007 | * Existential types * Lazy values * Structural types | _ |- ! scope=\"row\" | 2.7.0 | 07-Feb-2008 | * Java generic types supported by default * Case classes functionality extended | _ |- ! scope=\"row\" | 2.8.0 | 14-Jul-2010 | * Revision the common, uniform, and all-encompassing framework for collection types. * Type specialisation * Named and default arguments * Package objects * Improved annotations | _ |- ! scope=\"row\" | 2.9.0 | 12-May-2011 | * Parallel collections * Thread safe `App` trait replaces `Application` trait * `DelayedInit` trait * Java Interop improvements | _ |- ! scope=\"row\" | 2.10 | 04-Jan-2013 | * Value Classes * Implicit Classes * String Interpolation * Futures and Promises * Dynamic and applyDynamic * Dependent method types: **def identity(x: AnyRef): x.type = x // the return type says we return exactly what we got * New ByteCode emitter based on ASM: ** Can target JDK 1.5, 1.6 and 1.7 ** Emits 1.6 bytecode by default ** Old 1.5 backend is deprecated * A new Pattern Matcher: rewritten from scratch to generate more robust code (no more exponential blow-up!) ** code generation and analyses are now independent (the latter can be turned off with -Xno-patmat-analysis) * Scaladoc Improvements ** Implicits (-implicits flag) ** Diagrams (-diagrams flag, requires graphviz) ** Groups (-groups) * Modularized Language features * Parallel Collections are now configurable with custom thread pools * Akka Actors now part of the distribution ** scala.actors have been deprecated and the akka implementation is now included in the distribution. * Performance Improvements ** Faster inliner ** Range#sum is now O(1) * Update of ForkJoin library * Fixes in immutable TreeSet/TreeMap * Improvements to PartialFunctions * Addition of ??? and NotImplementedError * Addition of IsTraversableOnce + IsTraversableLike type classes for extension methods * Deprecations and cleanup * Floating point and octal literal syntax deprecation * Removed scala.dbc Experimental features * Scala Reflection * Macros | _ |- ! scope=\"row\" | 2.10.2 | 06-Jun-2013 | _ | _ |- ! scope=\"row\" | 2.10.3 | 01-Oct-2013 | _ | _ |- ! scope=\"row\" | 2.10.4 | 18-Mar-2014 | _ | _ |- ! scope=\"row\" | 2.10.5 | 05-Mar-2015 | _ | _ |- ! scope=\"row\" | 2.11.0 | 21-Apr-2014 | * Collection performance improvements * Compiler performance improvements | _ |- ! scope=\"row\" | 2.11.1 | 20-May-2014 | _ | _ |- ! scope=\"row\" | 2.11.2 | 22-Jul-2014 | _ | _ |- ! scope=\"row\" | 2.11.4 | 31-Oct-2014 | _ | _ |- ! scope=\"row\" | 2.11.5 | 08-Jan-2015 | _ | _ |- ! scope=\"row\" | 2.11.6 | 05-Mar-2015 | _ | _ |- ! scope=\"row\" | 2.11.7 | 23-Jun-2015 | _ | _ |- ! scope=\"row\" | 2.11.8 | 08-Mar-2016 | _ | _ |- ! scope=\"row\" | 2.11.11 | 18-Apr-2017 | _ | _ |- ! scope=\"row\" | 2.11.12 | 13-Nov-2017 | _ | _ |- ! scope=\"row\" | 2.12.0 | 03-Nov-2016 | * Java 8 required * Java 8 bytecode generated * Java 8 SAM (Functional interface) language support | _ |- ! scope=\"row\" | 2.12.1 | 05-Dec-2016 | _ | _ |- ! scope=\"row\" | 2.12.2 | 18-Apr-2017 | _ | _ |- ! scope=\"row\" | 2.12.3 | 26-Jul-2017 | _ | _ |- ! scope=\"row\" | 2.12.4 | 17-Oct-2017 | _ | _ |- ! scope=\"row\" | 2.12.5 | 15-Mar-2018 | _ | _ |- ! scope=\"row\" | 2.12.6 | 27-Apr-2018 | _ | _ |- ! scope=\"row\" | 2.12.7 | 27-Sep-2018 | _ | _ |- ! scope=\"row\" | 2.12.8 | 04-Dec-2018 | First Scala 2.12 release with the license changed to Apache v2.0 | _ |- ! scope=\"row\" | 2.13.0 | 11-Jun-2019 | _ | Current |- |} == Comparison with other JVM languages == Scala is often compared with Groovy and Clojure, two other programming languages also using the JVM. Substantial differences between these languages are found in the type system, in the extent to which each language supports object-oriented and functional programming, and in the similarity of their syntax to the syntax of Java. Scala is statically typed, while both Groovy and Clojure are dynamically typed. This makes the type system more complex and difficult to understand but allows almost all type errors to be caught at compile-time and can result in significantly faster execution. By contrast, dynamic typing requires more testing to ensure program correctness and is generally slower in order to allow greater programming flexibility and simplicity. Regarding speed differences, current versions of Groovy and Clojure allow for optional type annotations to help programs avoid the overhead of dynamic typing in cases where types are practically static. This overhead is further reduced when using recent versions of the JVM, which has been enhanced with an invoke dynamic instruction for methods that are defined with dynamically typed arguments. These advances reduce the speed gap between static and dynamic typing, although a statically typed language, like Scala, is still the preferred choice when execution efficiency is very important. Regarding programming paradigms, Scala inherits the object-oriented model of Java and extends it in various ways. Groovy, while also strongly object-oriented, is more focused in reducing verbosity. In Clojure, object-oriented programming is deemphasised with functional programming being the main strength of the language. Scala also has many functional programming facilities, including features found in advanced functional languages like Haskell, and tries to be agnostic between the two paradigms, letting the developer choose between the two paradigms or, more frequently, some combination thereof. Regarding syntax similarity with Java, Scala inherits much of Java's syntax, as is the case with Groovy. Clojure on the other hand follows the Lisp syntax, which is different in both appearance and philosophy. However, learning Scala is also considered difficult because of its many advanced features. This is not the case with Groovy, despite its also being a feature-rich language, mainly because it was designed to be mainly a scripting language. == Adoption == === Language rankings === , all JVM-based languages (Clojure, Groovy, Kotlin, Scala) are significantly less popular than the original Java language, which is usually ranked first or second, and which is also simultaneously evolving over time. The Popularity of Programming Language Index, which tracks searches for language tutorials, ranked Scala 15th in April 2018 with a small downward trend. This makes Scala the most popular JVM-based language after Java, although immediately followed by Kotlin, a JVM-based language with a strong upward trend ranked 16th. The TIOBE index of programming language popularity employs internet search engine rankings and similar publication-counting to determine language popularity. As of April 2018, it shows Scala in 34th place, having dropped four places over the last two years, but\u2013as mentioned under \"Bugs & Change Requests\"\u2013TIOBE is aware of issues with its methodology of using search terms which might not be commonly used in some programming language communities. In this ranking Scala is ahead of some functional languages like Haskell (42nd), Erlang, but below other languages like Swift (15th), Perl (16th), Go (19th) and Clojure (30th). The ThoughtWorks Technology Radar, which is an opinion based biannual report of a group of senior technologists, recommended Scala adoption in its languages and frameworks category in 2013. In July 2014, this assessment was made more specific and now refers to a \"Scala, the good parts\", which is described as \"To successfully use Scala, you need to research the language and have a very strong opinion on which parts are right for you, creating your own definition of Scala, the good parts.\". The RedMonk Programming Language Rankings, which establishes rankings based on the number of GitHub projects and questions asked on Stack Overflow, ranks Scala 14th. Here, Scala is placed inside a second-tier group of languages\u2013ahead of Go, PowerShell and Haskell, and behind Swift, Objective-C, Typescript and R. However, in its 2018 report, the Rankings noted a drop of Scala's rank for the third time in a row, questioning \"how much of the available oxygen for Scala is consumed by Kotlin as the latter continues to rocket up these rankings\". In the 2018 edition of the \"State of Java\" survey, which collected data from 5160 developers on various Java-related topics, Scala places third in terms of usage of alternative languages on the JVM. Compared to the last year's edition of the survey, Scala's usage among alternative JVM languages fell by almost a quarter (from 28.4% to 21.5%), overtaken by Kotlin, which rose from 11.4% in 2017 to 28.8% in 2018. === Companies === * In April 2009, Twitter announced that it had switched large portions of its backend from Ruby to Scala and intended to convert the rest. * Gilt uses Scala and Play Framework. * Foursquare uses Scala and Lift. * Coursera uses Scala and Play Framework. * Apple Inc. uses Scala in certain teams, along with Java and the Play framework. * The Guardian newspaper's high-traffic website guardian.co.uk announced in April 2011 that it was switching from Java to Scala, * The New York Times revealed in 2014 that its internal content management system Blackbeard is built using Scala, Akka and Play. * The Huffington Post newspaper started to employ Scala as part of its contents delivery system Athena in 2013. * Swiss bank UBS approved Scala for general production usage. * LinkedIn uses the Scalatra microframework to power its Signal API. * Meetup uses Unfiltered toolkit for real-time APIs. * Remember the Milk uses Unfiltered toolkit, Scala and Akka for public API and real-time updates. * Verizon seeking to make \"a next-generation framework\" using Scala. * Airbnb develops open-source machine-learning software \"Aerosolve\", written in Java and Scala. * Zalando moved its technology stack from Java to Scala and Play. * SoundCloud uses Scala for its back-end, employing technologies such as Finagle (micro services), Scalding and Spark (data processing). * Databricks uses Scala for the Apache Spark Big Data platform. * Morgan Stanley uses Scala extensively in their finance and asset- related projects. * There are teams within Google/Alphabet Inc. that use Scala, mostly due to acquisitions such as Firebase and Nest. * Walmart Canada Uses Scala for their back-end platform. * Duolingo uses Scala for their back- end module that generates lessons. * HMRC uses Scala for many UK Government Tax applications. == Criticism == In March 2015, former VP of the Platform Engineering group at Twitter Raffi Krikorian, stated that he would not have chosen Scala in 2011 due to its learning curve. The same month, LinkedIn SVP Kevin Scott stated their decision to \"minimize [their] dependence on Scala\". In November 2011, Yammer moved away from Scala for reasons that included the learning curve for new team members and incompatibility from one version of the Scala compiler to the next. == See also == * sbt, a widely used build tool for Scala projects * Play!, an open-source Web application framework that supports Scala * Akka, an open-source toolkit for building concurrent and distributed applications * Chisel, an open-source language built upon Scala that is used for hardware design and generation. == References == == Further reading == * * * * * * Category:Programming languages Category:Articles with example code Category:Concurrent programming languages Category:Free software programmed in Scala Category:Functional languages Category:Java programming language family Category:JVM programming languages Category:Object-oriented programming languages Category:Pattern matching programming languages Category:Programming languages created in 2003 Category:Scripting languages Category:Software using the Apache license Category:Statically typed programming languages Category:2003 software Category:Cross-platform free software Category:Free compilers and interpreters Category:Source-to-source compilers ",
    "title": "Scala (programming language)"
}