{
    "id": "1500599",
    "text": "Datagram Transport Layer Security (DTLS) is a communications protocol that provides security for datagram-based applications by allowing them to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. The DTLS protocol is based on the stream-oriented Transport Layer Security (TLS) protocol and is intended to provide similar security guarantees. The DTLS protocol datagram preserves the semantics of the underlying transport\u2014the application does not suffer from the delays associated with stream protocols, but because it uses UDP, the application has to deal with packet reordering, loss of datagram and data larger than the size of a datagram network packet. Because DTLS uses UDP rather than TCP, it avoids the \"TCP meltdown problem\", when being used to create a VPN tunnel. ==Definition== The following documents define DTLS: * RFC 6347 for use with User Datagram Protocol (UDP), * RFC 5238 for use with Datagram Congestion Control Protocol (DCCP), * RFC 5415 for use with Control And Provisioning of Wireless Access Points (CAPWAP), * RFC 6083 for use with Stream Control Transmission Protocol (SCTP) encapsulation, * RFC 5764 for use with Secure Real-time Transport Protocol (SRTP) subsequently called DTLS-SRTP in a draft with Secure Real-Time Transport Control Protocol (SRTCP). DTLS 1.0 is based on TLS 1.1, and DTLS 1.2 is based on TLS 1.2. There is no DTLS 1.1; that version number was skipped in order to harmonize version numbers with TLS. ==Implementations== ===Libraries=== {| class=\"wikitable sortable\" style=\"text- align: left;\" |+ Library support for DTLS |- ! Implementation ! DTLS 1.0 ! DTLS 1.2 |- | Botan | | |- | cryptlib | | |- | GnuTLS | | |- | Java Secure Socket Extension | | |- | LibreSSL | | |- | libsystools || || |- | MatrixSSL | | |- | mbed TLS (previously PolarSSL) | | |- | Network Security Services | | |- | OpenSSL | | |- | PyDTLS || || |- | Python3-dtls || || |- | RSA BSAFE | | |- | s2n | | |- | SChannel XP/2003, Vista/2008 | | |- | SChannel 7/2008R2, 8/2012, 8.1/2012R2, 10 | | |- |SChannel 10 (1607), 2016 | | |- | Secure Transport OS X 10.2\u201310.7 / iOS 1\u20134 | | |- | Secure Transport OS X 10.8\u201310.10 / iOS 5\u20138 | | |- | SharkSSL | | |- | tinydtls | | |- | Waher.Security.DTLS | | |- | wolfSSL (previously CyaSSL) | | |- | @nodertc/dtls | | |- |java-dtls | | |- | pion/dtls (Go) || || |- | californium/scandium (Java) || || |- | SNF4J (Java) || || |- |-class=\"sortbottom\" ! Implementation ! DTLS 1.0 ! DTLS 1.2 |} ===Applications=== * Cisco AnyConnect VPN Client uses TLS and invented DTLS based VPN. * OpenConnect is an open source AnyConnect-compatible client and ocserv server that supports (D)TLS. * Cisco InterCloud Fabric uses DTLS to form a tunnel between private and public/provider compute environments * ZScaler 2.0 (a popular ZTN solution) uses DTLS for tunneling * F5 Networks Edge VPN Client uses TLS and DTLS * Citrix Systems NetScaler uses DTLS to secure UDP * Web browsers: Google Chrome, Opera and Firefox support DTLS-SRTP for WebRTC ==Vulnerabilities== In February 2013 two researchers from Royal Holloway, University of London discovered an attackPlaintext-Recovery Attacks Against Datagram TLS which allowed them to recover plaintext from a DTLS connection using the OpenSSL implementation of DTLS when Cipher Block Chaining mode encryption was used. ==See also== * ZRTP * Reliable User Datagram Protocol * QUIC ==References== ==External links== * * * * Skip to 1:07:14. * Robin Seggelmann's Sample Code: echo, character generator, and discard client/servers. Category:Cryptographic protocols Category:Session layer protocols Category:Transport Layer Security ",
    "title": "Datagram Transport Layer Security"
}