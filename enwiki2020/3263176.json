{
    "id": "3263176",
    "text": "Diameter Credit-Control Application, is a networking protocol for Diameter application used to implement real-time credit-control for a variety of end user services. It is an IETF standard first defined in RFC 4006, and updated in RFC 8506. == Purpose == The purpose of the diameter credit control application is to provide a framework for real-time charging, primarily meant for the communication between gateways/control-points and the back-end account/balance systems (typically an Online Charging System). The application specifies methods for: * Quota management (Reserve, Reauthorize, Abandon) * Simple Debit/Credit * Balance checks * Price inquiries The diameter credit control application does not specify which type units are bought/used and which items are charged. This is left to the service context that has to be specified separately, as is some of the semantics. Examples of units used/bought: * Time * Upload/Download bytes * SMS (Text Messages) Examples of items charged: * Money * Points * Units (e.g. if the balance is kept in the same units as what is being used) Diameter credit control also specifies how to handle the fairly complex issue of multiple unit types used/charged against a single user balance. For instance, a user may pay for both online time and download bytes but has only a single account balance. ===Session-based charging=== A session-based credit control process uses several interrogations which may include first, intermediate and last interrogation. During interrogation money is reserved from the user account. Session-based charging is typically used for scenarios where the charged units are continuously consumed, e.g. charging for bytes upload/download. ===Event-based charging=== An event-based credit control process uses events as charging mechanism. Event-based charging is typically used when units are not continuously consumed, e.g. a user sending an MMS. == Command Codes == In order to support Credit Control via Diameter, there are two Diameter messages, the CCR (Credit Control Request) and the CCA (Credit Control Answer). Command Code for CCR/CCA is 272, as defined in RFC 4006 For quota management the client sends CCR to the server requesting units and reporting consumption. The server grants units and charges the user. For simple debit/credit the client sends a CCR asking the server to credit/debit the user's account. For price inquiries the client ask the server what the price for a unit is, and the server responds with the price. == Message flows == The message flows are in general driven by the control-point asking for units and the server granting them. The message may also be generated by other diameter applications, such as NASREQ (RFC4005) for sessions that are time/usage-limited. The following diagram shows a simplified message flow for a session using quota grants. right The client starts by requesting 10 units from the server. The server verifies that the user/subscriber has enough balance for it. In this example the server grants the client all the units it requested. if the subscriber had insufficient balance it could have granted less units or rejected it completely. When or before the subscriber session has used the granted units the client sends an update to the server telling it how many units have been used and how many it would like granted this time. The client is allowed to request units before the previous grant is completely used, in order to avoid suspending the subscriber session while talking to the server. In this example the client sends the request when 7 units of the 10 previously granted units have been used; and ask for 10 more units, which the server grants. The server can use the used-units count for debiting the subscriber balance (granting units does not indicate that they will be used. The Used-Units AVP contains the actual usage). It is also possible for the server to tell the client how long the grant is valid, in which case the client is expected to send an update when the grant timer expires. There can be many update messages during a session. Finally, the subscriber has ended the session, and the client sends a termination message to the server containing the last Used-Units. The server can use the termination message to clear any related reservations made in the back-end balance management system. If the subscriber did not terminate the session himself but instead depleted his balance then the server would have responded earlier with reject to an update message, possibly telling the client/control-point to redirect traffic (this normally only makes sense for HTTP/WAP traffic). === AVP matrix === ==== AVPs for new command codes ==== The new Command codes, CCA and CCR, may require some AVPs as indicated below. Bold AVPs are new to DCCA. {|border=\"1\" cellpadding=\"2\" cellspacing=\"0\" style=\"margin-left:0.5em;margin-bottom:0.5em\" !| !colspan=2| Command Code |- !Attribute Name!!CCR!!CCA |- | Acct-Multi-Session-Id || 0-1 || 0-1 |- | Auth- Application-Id || 1 || 1 |- | CC-Correlation-Id || 0-1 || 0 |- | CC-Session- Failover || 0 || 0-1 |- | CC-Request-Number || 1 || 1 |- | CC-Request-Type || 1 || 1 |- | CC-Sub-Session-Id || 0-1 || 0-1 |- | Check-Balance-Result || 0 || 0-1 |- | Cost-Information || 0 || 0-1 |- | Credit-Control-Failure-Handling || 0 || 0-1 |- | Destination-Host || 0-1 || 0 |- | Destination-Realm || 1 || 0 |- | Direct-Debiting-Failure-Handling || 0 || 0-1 |- | Event-Timestamp || 0-1 || 0-1 |- | Failed-AVP || 0 || 0+ |- | Final-Unit-Indication || 0 || 0-1 |- | Granted-Service-Unit || 0 || 0-1 |- | Multiple-Services-Credit-Control || 0+ || 0+ |- | Multiple-Services-Indicator || 0-1 || 0 |- | Origin-Host || 1 || 1 |- | Origin-Realm || 1 || 1 |- | Origin-State-Id || 0-1 || 0-1 |- | Proxy-Info || 0+ || 0+ |- | Redirect-Host || 0 || 0+ |- | Redirect-Host-Usage || 0 || 0-1 |- | Redirect-Max-Cache-Time || 0 || 0-1 |- | Requested-Action || 0-1 || 0 |- | Requested-Service-Unit || 0-1 || 0 |- | Route-Record || 0+ || 0+ |- | Result-Code || 0 || 1 |- | Service-Context-Id || 1 || 0 |- | Service- Identifier || 0-1 || 0 |- | Service-Parameter-Info || 0+ || 0 |- | Session-Id || 1 || 1 |- | Subscription-Id || 0+ || 0 |- | Termination-Cause || 0-1 || 0 |- | User-Equipment-Info || 0-1 || 0 |- | Used-Service-Unit || 0+ || 0 |- | User-Name || 0-1 || 0-1 |- | Validity-Time || 0 || 0-1 |- |} ==== New AVPs for base protocol command codes ==== {|border=\"1\" cellpadding=\"2\" cellspacing=\"0\" style=\"margin-left:0.5em;margin-bottom:0.5em\" !| !colspan=2| Command Code |- !Attribute Name!!RAR!!RAA |- | CC-Sub-Session-Id || 0-1 || 0-1 |- | G-S-U- Pool-Identifier || 0-1 || 0-1 |- | Service-Identifier || 0-1 || 0-1 |- | Rating-Group || 0-1 || 0-1 |- |} The table uses the following symbols: *0 The AVP MUST NOT be present in the message *0+ Zero or more instances of the AVP MAY be present in the message *0-1 Zero or one instance of the AVP MAY be present in the message. It is considered an error if there is more than one instance of the AVP *1 One instance of the AVP MUST be present in the message *1+ At least one instance of the AVP MUST be present in the message == Related standards == * RFC 4005 - Diameter Network Access Server Application. * RFC 4006 - Diameter Credit-Control Application (obsolete) * RFC 8506 - Diameter Credit-Control Application. * 3GPP 32.299 - 3GPP Telecommunication management - Charging management - Diameter charging applications. Category:Internet protocols Category:Internet Standards ",
    "title": "Diameter Credit-Control Application"
}