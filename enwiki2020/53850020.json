{
    "id": "53850020",
    "text": "Realm is an open source object database management system, initially for mobile operating systems (Android/iOS) but also available for platforms such as Xamarin, React Native, and others, including desktop applications (Windows), and is licensed under the Apache License. In September 2016, the Realm Mobile Platform was announced, followed by the first stable release in January 2017. It allows two-way synchronization between the Realm Object Server and the client side databases that belong to the given logged-in user. Both a developer and a commercial edition was released, along with a business license for integrating with other database management systems such as PostgreSQL. On April 24, 2019, Realm announced that they have entered into a definitive agreement to be acquired by MongoDB. == History == Realm's development began in the end of 2010 by Alexander Stigsen, along with Bjarne Christiansen, under the name TightDB. The company started in 2011 at Y Combinator. It was promoted as NoSQL with configurable durability, and the ability to share the same groups of data across multiple processes, but also even multiple devices and clusters. TightDB renamed its product to Realm in September 2014, and released it for public testing. In March 2015, funding of about $20 million was disclosed. Realm was mentioned in some trade press, including by other firms such as IBM. Realm announced version 1.0 in June 2016, and released a platform for real-time two-way synchronization (beta in 2016 September, release in 2017 January), and provided a Node.js SDK for server-side applications. In May 2017, UWP support was announced. == Features == The most notable features of Realm are the following: * As Realm is an object store, its typed language-specific APIs map typed objects directly into the Realm file \u2013 therefore classes are used as the schema definition. * Relationships between objects are allowed via \"links\". Each \"link\" creates a \"backlink\" as an inverse relationship to whichever objects are linking to the current object. * The query results returned by Realm are thread-local views to the current \"database version\" (as Realm handles concurrency with MVCC architecture), and these views \"automatically update\" when a transaction is committed from any thread, as long as Realm is able to update its instance version (which is possible on threads that are able to receive change notifications). When this happens, Realm calls change listeners that are added to its query results (if they've changed). * Each thread-local view returns proxy objects that only read from/write to the database when an accessor method is called, meaning all database access is lazy-loaded. Writes are allowed only while in a write transaction. * As each query result and each proxy object is a view to the underlying data, any change made to the database is reflected in all objects that point to the same data. Realm generally calls this behavior \"zero-copy architecture\" (along with the previously mentioned lazy-loaded data access). == Programming language support == * Objective-C * Swift * Java (Android only) * Kotlin (Android only) * C# (Xamarin, Win32, UWP) * JavaScript (Node.js, React Native) == References == == External links == * Official website * Realm on Android Category:Database management systems ",
    "title": "Realm (database)"
}