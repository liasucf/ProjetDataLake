{
    "id": "1448472",
    "text": "In the mathematical field of graph theory, the Laplacian matrix, also called the graph Laplacian, admittance matrix, Kirchhoff matrix or discrete Laplacian, is a matrix representation of a graph. The Laplacian matrix can be used to find many useful properties of a graph. Together with Kirchhoff's theorem, it can be used to calculate the number of spanning trees for a given graph. The sparsest cut of a graph can be approximated through the second smallest eigenvalue of its Laplacian by Cheeger's inequality. It can also be used to construct low dimensional embeddings, which can be useful for a variety of machine learning applications. == Definition == === Laplacian matrix for simple graphs === Given a simple graph G with n vertices, its Laplacian matrix L_{n \\times n} is defined as: : L = D - A, where D is the degree matrix and A is the adjacency matrix of the graph. Since G is a simple graph, A only contains 1s or 0s and its diagonal elements are all 0s. In the case of directed graphs, either the indegree or outdegree might be used, depending on the application. The elements of L are given by : L_{i,j} := \\begin{cases} \\deg(v_i) & \\mbox{if}\\ i = j \\\\\\ -1 & \\mbox{if}\\ i eq j\\ \\mbox{and}\\ v_i \\mbox{ is adjacent to } v_j \\\\\\ 0 & \\mbox{otherwise} \\end{cases} where \\operatorname{deg}(v_i) is the degree of the vertex i. ==== Symmetric normalized Laplacian ==== The symmetric normalized Laplacian matrix is defined as: : L^\\text{sym} := D^{-\\frac{1}{2}} L D^{-\\frac{1}{2}} = I - D^{-\\frac{1}{2}} A D^{-\\frac{1}{2}}, The elements of L^\\text{sym} are given by :L^\\text{sym}_{i,j} := \\begin{cases} 1 & \\mbox{if } i = j \\mbox{ and } \\deg(v_i) eq 0\\\\\\ -\\frac{1}{\\sqrt{\\deg(v_i)\\deg(v_j)}} & \\mbox{if } i eq j \\mbox{ and } v_i \\mbox{ is adjacent to } v_j \\\\\\ 0 & \\mbox{otherwise}. \\end{cases} ==== Random walk normalized Laplacian ==== The random-walk normalized Laplacian matrix is defined as: : L^\\text{rw} := D^{-1}L = I - D^{-1}A The elements of L^\\text{rw} are given by :L^\\text{rw}_{i,j} := \\begin{cases} 1 & \\mbox{if } i = j \\mbox{ and } \\deg(v_i) eq 0\\\\\\ -\\frac{1}{\\deg(v_i)} & \\mbox{if } i eq j \\mbox{ and } v_i \\mbox{ is adjacent to } v_j \\\\\\ 0 & \\mbox{otherwise}. \\end{cases} ==== Generalized Laplacian ==== The generalized Laplacian Q is defined as: : \\begin{cases} Q_{i,j} < 0 & \\mbox{if } i eq j \\mbox{ and } v_i \\mbox{ is adjacent to } v_j\\\\\\ Q_{i,j} = 0 & \\mbox{if } i eq j \\mbox{ and } v_i \\mbox{ is not adjacent to } v_j \\\\\\ \\mbox{any number} & \\mbox{otherwise}. \\end{cases} Notice the ordinary Laplacian is a generalized Laplacian. == Example == Here is a simple example of a labelled, undirected graph and its Laplacian matrix. {|class=\"wikitable\" ! Labelled graph ! Degree matrix ! Adjacency matrix ! Laplacian matrix |- | 175px | \\left(\\begin{array}{rrrrrr} 2 & 0 & 0 & 0 & 0 & 0\\\\\\ 0 & 3 & 0 & 0 & 0 & 0\\\\\\ 0 & 0 & 2 & 0 & 0 & 0\\\\\\ 0 & 0 & 0 & 3 & 0 & 0\\\\\\ 0 & 0 & 0 & 0 & 3 & 0\\\\\\ 0 & 0 & 0 & 0 & 0 & 1\\\\\\ \\end{array}\\right) | \\left(\\begin{array}{rrrrrr} 0 & 1 & 0 & 0 & 1 & 0\\\\\\ 1 & 0 & 1 & 0 & 1 & 0\\\\\\ 0 & 1 & 0 & 1 & 0 & 0\\\\\\ 0 & 0 & 1 & 0 & 1 & 1\\\\\\ 1 & 1 & 0 & 1 & 0 & 0\\\\\\ 0 & 0 & 0 & 1 & 0 & 0\\\\\\ \\end{array}\\right) | \\left(\\begin{array}{rrrrrr} 2 & -1 & 0 & 0 & -1 & 0\\\\\\ -1 & 3 & -1 & 0 & -1 & 0\\\\\\ 0 & -1 & 2 & -1 & 0 & 0\\\\\\ 0 & 0 & -1 & 3 & -1 & -1\\\\\\ -1 & -1 & 0 & -1 & 3 & 0\\\\\\ 0 & 0 & 0 & -1 & 0 & 1\\\\\\ \\end{array}\\right) |} == Properties == For an (undirected) graph G and its Laplacian matrix L with eigenvalues \\lambda_0 \\le \\lambda_1 \\le \\cdots \\le \\lambda_{n-1}: * L is symmetric. * L is positive-semidefinite (that is \\lambda_i \\ge 0 for all i). This is verified in the incidence matrix section (below). This can also be seen from the fact that the Laplacian is symmetric and diagonally dominant. * L is an M-matrix (its off-diagonal entries are nonpositive, yet the real parts of its eigenvalues are nonnegative). * Every row sum and column sum of L is zero. Indeed, in the sum, the degree of the vertex is summed with a \"\u22121\" for each neighbor. * In consequence, \\lambda_0 = 0, because the vector \\mathbf{v}_0 = (1, 1, \\dots, 1) satisfies L \\mathbf{v}_0 = \\mathbf{0} . This also implies that the Laplacian matrix is singular. * The number of connected components in the graph is the dimension of the nullspace of the Laplacian and the algebraic multiplicity of the 0 eigenvalue. * The smallest non-zero eigenvalue of L is called the spectral gap. * The second smallest eigenvalue of L (could be zero) is the algebraic connectivity (or Fiedler value) of G and approximates the sparsest cut of a graph. * The Laplacian is an operator on the n-dimensional vector space of functions f : V \\to \\mathbb{R}, where V is the vertex set of G, and n = |V|. * When G is k-regular, the normalized Laplacian is: \\mathcal{L} = \\tfrac{1}{k} L = I - \\tfrac{1}{k} A, where A is the adjacency matrix and I is an identity matrix. * For a graph with multiple connected components, L is a block diagonal matrix, where each block is the respective Laplacian matrix for each component, possibly after reordering the vertices (i.e. L is permutation-similar to a block diagonal matrix). * The trace of the Laplacian matrix L is equal to 2m where m is the number of edges of the considered graph. == Incidence matrix == Define an |e| \\times |v| oriented incidence matrix M with element Mev for edge e (connecting vertex i and j, with i > j) and vertex v given by :M_{ev} = \\left\\\\{\\begin{array}{rl} 1, & \\text{if } v = i\\\\\\ -1, & \\text{if } v = j\\\\\\ 0, & \\text{otherwise}. \\end{array}\\right. Then the Laplacian matrix L satisfies :L = M^\\textsf{T} M where M^\\textsf{T} is the matrix transpose of M. Now consider an eigendecomposition of L, with unit-norm eigenvectors \\mathbf{v}_i and corresponding eigenvalues \\lambda_i: :\\begin{align} \\lambda_i & = \\mathbf{v}_i^\\textsf{T} L \\mathbf{v}_i \\\\\\ & = \\mathbf{v}_i^\\textsf{T} M^\\textsf{T} M \\mathbf{v}_i \\\\\\ & = \\left(M \\mathbf{v}_i\\right)^\\textsf{T} \\left(M \\mathbf{v}_i\\right). \\\\\\ \\end{align} Because \\lambda_i can be written as the inner product of the vector M \\mathbf{v}_i with itself, this shows that \\lambda_i \\ge 0 and so the eigenvalues of L are all non-negative. == Deformed Laplacian == The deformed Laplacian is commonly defined as :\\Delta(s) = I - sA + s^2(D - I) where I is the unit matrix, A is the adjacency matrix, and D is the degree matrix, and s is a (complex-valued) number. The standard Laplacian is just \\Delta(1). == Signless Laplacian == The signless Laplacian is defined asQ = D + Awhere D is the degree matrix, and A is the adjacency matrix. Like the signed Laplacian L, the signless Laplacian Q also is positive semi-definite as it can be factored asQ = RR^Twhere R is the incidence matrix. Q has a 0-eigenvector if and only if it has a bipartite connected component other than isolated vertices. This can be shown as\\mathbf{x}^T Q \\mathbf{x} = \\mathbf{x}^T R R^T \\mathbf{x} \\implies R^T \\mathbf{x} = \\mathbf{0}.This has a solution where \\mathbf{x} eq \\mathbf{0} if and only if the graph has a bipartite connected component. == Symmetric normalized Laplacian == The (symmetric) normalized Laplacian is defined as : L^\\text{sym} := D^{-\\frac{1}{2}} L D^{-\\frac{1}{2}} = I - D^{-\\frac{1}{2}}AD^{-\\frac{1}{2}} where L is the (unnormalized) Laplacian, A is the adjacency matrix and D is the degree matrix. Since the degree matrix D is diagonal and positive, its reciprocal square root D^{-\\frac{1}{2}} is just the diagonal matrix whose diagonal entries are the reciprocals of the positive square roots of the diagonal entries of D. The symmetric normalized Laplacian is a symmetric matrix. One has: L^\\text{sym} = S S^*, where S is the matrix whose rows are indexed by the vertices and whose columns are indexed by the edges of G such that each column corresponding to an edge e = {u, v} has an entry \\frac{1}{\\sqrt{d_u}} in the row corresponding to u, an entry -\\frac{1}{\\sqrt{d_v}} in the row corresponding to v, and has 0 entries elsewhere. (S^* denotes the transpose of S). All eigenvalues of the normalized Laplacian are real and non-negative. We can see this as follows. Since L^\\text{sym} is symmetric, its eigenvalues are real. They are also non- negative: consider an eigenvector g of L^\\text{sym} with eigenvalue \u03bb and suppose g = D^\\frac{1}{2} f. (We can consider g and f as real functions on the vertices v.) Then: : \\lambda \\ = \\ \\frac{\\langle g, L^\\text{sym}g\\rangle}{\\langle g, g\\rangle} \\ = \\ \\frac{\\left\\langle g, D^{-\\frac{1}{2}} L D^{-\\frac{1}{2}} g\\right\\rangle}{\\langle g, g\\rangle} \\ = \\ \\frac{\\langle f, Lf\\rangle}{\\left\\langle D^\\frac{1}{2} f, D^\\frac{1}{2} f\\right\\rangle} \\ = \\ \\frac{\\sum_{u \\sim v}(f(u) - f(v))^2}{\\sum_v f(v)^2 d_v} \\ \\geq \\ 0, where we use the inner product \\langle f,g\\rangle = \\sum_{v} f(v)g(v), a sum over all vertices v, and \\sum_{u\\sim v} denotes the sum over all unordered pairs of adjacent vertices {u,v}. The quantity \\sum_{u,v}(f(u) - f(v))^2 is called the Dirichlet sum of f, whereas the expression \\frac{\\left\\langle g, L^\\text{sym}g\\right\\rangle}{\\langle g, g\\rangle} is called the Rayleigh quotient of g. Let 1 be the function which assumes the value 1 on each vertex. Then D^\\frac{1}{2} 1 is an eigenfunction of L^{\\text{sym}} with eigenvalue 0. In fact, the eigenvalues of the normalized symmetric Laplacian satisfy 0 = \u03bc0 \u2264 \u2026 \u2264 \u03bcn\u22121 \u2264 2. These eigenvalues (known as the spectrum of the normalized Laplacian) relate well to other graph invariants for general graphs. == Random walk normalized Laplacian == The random walk normalized Laplacian is defined as : L^\\text{rw} := D^{-1} L where D is the degree matrix. Since the degree matrix D is diagonal, its inverse D^{-1} is simply defined as a diagonal matrix, having diagonal entries which are the reciprocals of the corresponding positive diagonal entries of D. For the isolated vertices (those with degree 0), a common choice is to set the corresponding element L^\\text{rw}_{i,i} to 0. This convention results in a nice property that the multiplicity of the eigenvalue 0 is equal to the number of connected components in the graph. The matrix elements of L^\\text{rw} are given by : L^{\\text{rw}}_{i,j} := \\begin{cases} 1 & \\mbox{if}\\ i = j\\ \\mbox{and}\\ \\deg(v_i) eq 0\\\\\\ -\\frac{1}{\\deg(v_i)} & \\mbox{if}\\ i eq j\\ \\mbox{and}\\ v_i \\mbox{ is adjacent to } v_j \\\\\\ 0 & \\mbox{otherwise}. \\end{cases} The name of the random-walk normalized Laplacian comes from the fact that this matrix is L^\\text{rw} = I - P, where P = D^{-1}A is simply the transition matrix of a random walker on the graph. For example, let e_i denote the i-th standard basis vector. Then x = e_i P is a probability vector representing the distribution of a random walker's locations after taking a single step from vertex i; i.e., x_j = \\mathbb{P}\\left(v_i \\to v_j\\right). More generally, if the vector x is a probability distribution of the location of a random walker on the vertices of the graph, then x' = x P^t is the probability distribution of the walker after t steps. One can check that : L^\\text{rw} = I-D^{-\\frac{1}{2}}\\left(I - L^\\text{sym}\\right) D^\\frac{1}{2}, i.e., L^\\text{rw} is similar to the normalized Laplacian L^\\text{sym}. For this reason, even if L^\\text{rw} is in general not hermitian, it has real eigenvalues. Indeed, its eigenvalues agree with those of L^\\text{sym} (which is hermitian). === Graphs === As an aside about random walks on graphs, consider a simple undirected graph. Consider the probability that the walker is at the vertex i at time t, given the probability distribution that he was at vertex j at time t \u2212 1 (assuming a uniform chance of taking a step along any of the edges attached to a given vertex): : p_i(t) = \\sum_j \\frac{A_{ij}}{\\deg\\left(v_j\\right)} p_j(t - 1), or in matrix-vector notation: :p(t) = A D^{-1} p(t - 1). (Equilibrium, which sets in as t\\rightarrow \\infty, is defined by p = A D^{-1} p .) We can rewrite this relation as :D^{-\\frac{1}{2}} p(t) = \\left[D^{-\\frac{1}{2}} A D^{-\\frac{1}{2}}\\right] D^{-\\frac{1}{2}} p(t - 1). A_\\text{reduced} \\equiv D^{-\\frac{1}{2}} A D^{-\\frac{1}{2}} is a symmetric matrix called the reduced adjacency matrix. So, taking steps on this random walk requires taking powers of A_\\text{reduced}, which is a simple operation because A_\\text{reduced} is symmetric. == Interpretation as the discrete Laplace operator == The Laplacian matrix can be interpreted as a matrix representation of a particular case of the discrete Laplace operator. Such an interpretation allows one, e.g., to generalise the Laplacian matrix to the case of graphs with an infinite number of vertices and edges, leading to a Laplacian matrix of an infinite size. Suppose \\phi describes a heat distribution across a graph, where \\phi_i is the heat at vertex i. According to Newton's law of cooling, the heat transferred between nodes i and j is proportional to \\phi_i - \\phi_j if nodes i and j are connected (if they are not connected, no heat is transferred). Then, for heat capacity k, :\\begin{align} \\frac{d \\phi_i}{d t} &= -k \\sum_j A_{ij} \\left(\\phi_i - \\phi_j \\right) \\\\\\ &= -k \\left(\\phi_i \\sum_j A_{ij} - \\sum_j A_{ij} \\phi_j \\right) \\\\\\ &= -k \\left(\\phi_i \\ \\deg(v_i) - \\sum_j A_{ij} \\phi_j \\right) \\\\\\ &= -k \\sum_j \\left(\\delta_{ij} \\ \\deg(v_i) - A_{ij} \\right) \\phi_j \\\\\\ &= -k \\sum_j \\left(\\ell_{ij} \\right) \\phi_j. \\end{align} In matrix- vector notation, :\\begin{align} \\frac{d\\phi}{dt} &= -k(D - A)\\phi \\\\\\ &= -kL \\phi, \\end{align} which gives :\\frac{d \\phi}{d t} + kL\\phi = 0. Notice that this equation takes the same form as the heat equation, where the matrix \u2212L is replacing the Laplacian operator abla^2; hence, the \"graph Laplacian\". To find a solution to this differential equation, apply standard techniques for solving a first-order matrix differential equation. That is, write \\phi as a linear combination of eigenvectors \\mathbf{v}_i of L (so that L\\mathbf{v}_i = \\lambda_i \\mathbf{v}_i), with time-dependent \\phi = \\sum_i c_i \\mathbf{v}_i. Plugging into the original expression (because L is a symmetric matrix, its unit-norm eigenvectors \\mathbf{v}_i are orthogonal): :\\begin{align} 0 =& \\frac{d\\left(\\sum_i c_i \\mathbf{v}_i\\right)}{dt} + kL\\left(\\sum_i c_i \\mathbf{v}_i\\right) \\\\\\ =&\\sum_i \\left[\\frac{dc_i}{dt} \\mathbf{v}_i + k c_i L \\mathbf{v}_i\\right] \\\\\\ = &\\sum_i \\left[\\frac{dc_i}{dt} \\mathbf{v}_i + k c_i \\lambda_i \\mathbf{v}_i\\right] \\\\\\ \\Rightarrow & \\frac{dc_i}{dt} + k \\lambda_i c_i=0 , \\\\\\ \\end{align} whose solution is :c_i(t) = c_i(0) e^{-k \\lambda_i t}. As shown before, the eigenvalues \\lambda_i of L are non-negative, showing that the solution to the diffusion equation approaches an equilibrium, because it only exponentially decays or remains constant. This also shows that given \\lambda_i and the initial condition c_i(0), the solution at any time t can be found. To find c_i(0) for each i in terms of the overall initial condition \\phi(0), simply project \\phi(0) onto the unit-norm eigenvectors \\mathbf{v}_i; : c_i(0) = \\left\\langle \\phi(0), \\mathbf{v}_i \\right\\rangle . In the case of undirected graphs, this works because L is symmetric, and by the spectral theorem, its eigenvectors are all orthogonal. So the projection onto the eigenvectors of L is simply an orthogonal coordinate transformation of the initial condition to a set of coordinates which decay exponentially and independently of each other. === Equilibrium behavior === To understand \\lim_{t \\to \\infty}\\phi(t), the only terms c_i(t) = c_i(0) e^{-k \\lambda_i t} that remain are those where \\lambda_i = 0, since : \\lim_{t\\to\\infty} e^{-k \\lambda_i t} = \\left\\\\{\\begin{array}{rlr} 0 & \\text{if} & \\lambda_i > 0 \\\\\\ 1 & \\text{if} & \\lambda_i = 0 \\end{array}\\right\\\\} In other words, the equilibrium state of the system is determined completely by the kernel of L. Since by definition, \\sum_{j}L_{ij} = 0, the vector \\mathbf{v}^1 of all ones is in the kernel. If there are k disjoint connected components in the graph, then this vector of all ones can be split into the sum of k independent \\lambda = 0 eigenvectors of ones and zeros, where each connected component corresponds to an eigenvector with ones at the elements in the connected component and zeros elsewhere. The consequence of this is that for a given initial condition c(0) for a graph with N vertices : \\lim_{t\\to\\infty}\\phi(t) = \\left\\langle c(0), \\mathbf{v^1} \\right\\rangle \\mathbf{v^1} where : \\mathbf{v^1} = \\frac{1}{\\sqrt{N}} [1, 1, ..., 1] For each element \\phi_j of \\phi, i.e. for each vertex j in the graph, it can be rewritten as : \\lim_{t\\to\\infty}\\phi_j(t) = \\frac{1}{N} \\sum_{i = 1}^N c_i(0) . In other words, at steady state, the value of \\phi converges to the same value at each of the vertices of the graph, which is the average of the initial values at all of the vertices. Since this is the solution to the heat diffusion equation, this makes perfect sense intuitively. We expect that neighboring elements in the graph will exchange energy until that energy is spread out evenly throughout all of the elements that are connected to each other. === Example of the operator on a grid === This GIF shows the progression of diffusion, as solved by the graph laplacian technique. A graph is constructed over a grid, where each pixel in the graph is connected to its 8 bordering pixels. Values in the image then diffuse smoothly to their neighbors over time via these connections. This particular image starts off with three strong point values which spill over to their neighbors slowly. The whole system eventually settles out to the same value at equilibrium. This section shows an example of a function \\phi diffusing over time through a graph. The graph in this example is constructed on a 2D discrete grid, with points on the grid connected to their eight neighbors. Three initial points are specified to have a positive value, while the rest of the values in the grid are zero. Over time, the exponential decay acts to distribute the values at these points evenly throughout the entire grid. The complete Matlab source code that was used to generate this animation is provided below. It shows the process of specifying initial conditions, projecting these initial conditions onto the eigenvalues of the Laplacian Matrix, and simulating the exponential decay of these projected initial conditions. N = 20; % The number of pixels along a dimension of the image A = zeros(N, N); % The image Adj = zeros(N * N, N * N); % The adjacency matrix % Use 8 neighbors, and fill in the adjacency matrix dx = [- 1, 0, 1, - 1, 1, - 1, 0, 1]; dy = [- 1, - 1, - 1, 0, 0, 1, 1, 1]; for x = 1:N for y = 1:N index = (x - 1) * N + y; for ne = 1:length(dx) newx = x + dx(ne); newy = y + dy(ne); if newx > 0 && newx <= N && newy > 0 && newy <= N index2 = (newx - 1) * N + newy; Adj(index, index2) = 1; end end end end % BELOW IS THE KEY CODE THAT COMPUTES THE SOLUTION TO THE DIFFERENTIAL EQUATION Deg = diag(sum(Adj, 2)); % Compute the degree matrix L = Deg - Adj; % Compute the laplacian matrix in terms of the degree and adjacency matrices [V, D] = eig(L); % Compute the eigenvalues/vectors of the laplacian matrix D = diag(D); % Initial condition (place a few large positive values around and % make everything else zero) C0 = zeros(N, N); C0(2:5, 2:5) = 5; C0(10:15, 10:15) = 10; C0(2:5, 8:13) = 7; C0 = C0(:); C0V = V'*C0; % Transform the initial condition into the coordinate system % of the eigenvectors for t = 0:0.05:5 % Loop through times and decay each initial component Phi = C0V .* exp(- D * t); % Exponential decay for each component Phi = V * Phi; % Transform from eigenvector coordinate system to original coordinate system Phi = reshape(Phi, N, N); % Display the results and write to GIF file imagesc(Phi); caxis([0, 10]); title(sprintf('Diffusion t = %3f', t)); frame = getframe(1); im = frame2im(frame); [imind, cm] = rgb2ind(im, 256); if t == 0 imwrite(imind, cm, 'out.gif', 'gif', 'Loopcount', inf, 'DelayTime', 0.1); else imwrite(imind, cm, 'out.gif', 'gif', 'WriteMode', 'append', 'DelayTime', 0.1); end end == Approximation to the negative continuous Laplacian == The graph Laplacian matrix can be further viewed as a matrix form of an approximation to the (positive semi-definite) Laplacian operator obtained by the finite difference method. (See Discrete Poisson equation). In this interpretation, every graph vertex is treated as a grid point; the local connectivity of the vertex determines the finite difference approximation stencil at this grid point, the grid size is always one for every edge, and there are no constraints on any grid points, which corresponds to the case of the homogeneous Neumann boundary condition, i.e., free boundary. == Directed multigraphs == An analogue of the Laplacian matrix can be defined for directed multigraphs. In this case the Laplacian matrix L is defined as :L = D - A where D is a diagonal matrix with Di,i equal to the outdegree of vertex i and A is a matrix with Ai,j equal to the number of edges from i to j (including loops). == See also == *Stiffness matrix *Resistance distance *Transition rate matrix *Calculus on finite weighted graphs *Graph Fourier transform == References == *T. Sunada, \"Discrete geometric analysis\", Proceedings of Symposia in Pure Mathematics, (ed. by P. Exner, J. P. Keating, P. Kuchment, T. Sunada, A. Teplyaev), 77 (2008), 51\u201386. *B. Bollob\u00e1s, Modern Graph Theory, Springer-Verlag (1998, corrected ed. 2013), , Chapters II.3 (Vector Spaces and Matrices Associated with Graphs), VIII.2 (The Adjacency Matrix and the Laplacian), IX.2 (Electrical Networks and Random Walks). Category:Algebraic graph theory Category:Matrices ",
    "title": "Laplacian matrix"
}