{
    "id": "641907",
    "text": "GLX (initialism for \"OpenGL Extension to the X Window System\") is an extension to the X Window System core protocol providing an interface between OpenGL and the X Window System as well as extensions to OpenGL itself. It enables programs wishing to use OpenGL to do so within a window provided by the X Window System. GLX distinguishes two \"states\": indirect state and direct state. ==History== Silicon Graphics developed GLX as part of their effort to support OpenGL in the X Window System. In 1999 SGI released GLX under an open- source license, letting it be incorporated in XFree86 source code version 4.0 in 2000. From there, the code was inherited by the forked X.Org Foundation version of the X Window System X11R6.7.0. On September 19, 2008, SGI created a new SGI FreeB License Version 2.0, which \"now mirrors the free X11 license used by X.Org\" and \"meets the free and open source software community's widely accepted definition of 'free'\". In 2009 the Free Software Foundation endorsed the SGI Free License B to be a free-software license, and GLX to be an important free-software graphics project. As of 2011, GLX has reached version 1.4. The first internal implementation of GLX API, called GLcore, loaded a version of the software renderer of Mesa inside the X server and rendered the OpenGL commands in a window or pixmap. With the development of DRI, the ability to use hardware accelerated OpenGL through direct contexts was added (primarily used by videogames). In 2006, the popularization of the nested Xgl X server and Compiz compositing window manager lead to the development of Accelerated Indirect GLX (AIGLX). AIGLX brings hardware acceleration to the GLX (indirect context) applications by loading the Mesa DRI driver inside the X server. This method enables the sharing of GL objects between X clients using indirect contexts (they all are in the same address space in the X server) and also between a X client and the compositing window manager, thus accelerating composition. In 2008 the binding in GLcore to the Mesa software renderer was rewritten as a DRI interface module, called `swrast_dri.so`, improving the coupling of Mesa and the X server. Also in the year 2008 the new DRI2 was introduced to replace DRI, and with it a new model based in the Kernel mode-setting. In 2011, the Glamor project started, aiming to add a generic hardware-accelerated 2D X driver based in OpenGL. In 2013 Adam Jackson did a major rewrite of GLX code to consolidate the diverse paths from Glamor, indirect rendering, ... to one unique path to OpenGL's library libGL. File:Linux graphics drivers 2D.svg|2D drivers inside of the X server File:Linux graphics drivers Utah GLX.svg|Indirect rendering over GLX, using Utah GLX File:Linux graphics drivers DRI early.svg|Early Direct Rendering Infrastructure File:Linux graphics drivers DRI current.svg|Finally all access goes through the Direct Rendering Manager File:Linux graphics drivers DRI Wayland.svg|In Linux kernel 3.12 render nodes were merged and the KMS was split off. Wayland implements direct rendering over EGL == Features == GLX demo (glxgears) included with X11 GLX consists of three parts: # An API that provides OpenGL functions to an X Window System application. # An extension of the X protocol, which allows the client (the OpenGL application) to send 3D rendering commands to the X server (the software responsible for the display). The client and server software may run on different computers. # An extension of the X server that receives the rendering commands from the client and passes them on to the installed OpenGL library If client and server are running on the same computer and an accelerated 3D graphics card using a suitable driver is available, the former two components can be bypassed by DRI. In this case, the client application is then allowed to directly access the video hardware through several API layers. ==Implementations== * Mesa 3D \u2013 a free and open-source library which implements a couple of graphical APIs and also the available Free and open-source device drivers: graphics; for a last resort Mesa 3D also offers fallback software rendering. * The proprietary device drivers for graphics chips also include an implementation of GLX. ==See also== * WGL \u2013 the equivalent Microsoft Windows interface to OpenGL * CGL \u2013 the equivalent macOS interface to OpenGL * EGL \u2013 a similar cross-platform interface between OpenGL ES or VG and the underlying native platform window system * GLUT \u2013 library of utilities for OpenGL programs == References == == External links == * OpenGL\u00ae Graphics with the X Window System\u00ae * * Current OpenGL API, OpenGL Shading Language and GLX Specifications and Reference Pages Category:OpenGL Category:X Window extensions Category:X-based libraries ",
    "title": "GLX"
}