{
    "id": "47102661",
    "text": "In computing, a system virtual machine is a virtual machine that provides a complete system platform and supports the execution of a complete operating system (OS). These usually emulate an existing architecture, and are built with the purpose of either providing a platform to run programs where the real hardware is not available for use (for example, executing on otherwise obsolete platforms), or of having multiple instances of virtual machines leading to more efficient use of computing resources, both in terms of energy consumption and cost effectiveness (known as hardware virtualization, the key to a cloud computing environment), or both. A VM was originally defined by Popek and Goldberg as \"an efficient, isolated duplicate of a real machine\". ==System virtual machines== System virtual machine advantages: * Multiple OS environments can co-exist on the same primary hard drive, with a virtual partition that allows sharing of files generated in either the \"host\" operating system or \"guest\" virtual environment. Adjunct software installations, wireless connectivity, and remote replication, such as printing and faxing, can be generated in any of the guest or host operating systems. Regardless of the system, all files are stored on the hard drive of the host OS. * Application provisioning, maintenance, high availability and disaster recovery are inherent in the virtual machine software selected. * Can provide emulated hardware environments different from the host's instruction set architecture (ISA), through emulation or by using just-in-time compilation. The main disadvantages of VMs are: * A virtual machine is less efficient than an actual machine when it accesses the host hard drive indirectly. * When multiple VMs are concurrently running on the hard drive of the actual host, adjunct virtual machines may exhibit a varying and/or unstable performance (speed of execution and malware protection). This depends on the data load imposed on the system by other VMs, unless the selected VM software provides temporal isolation among virtual machines. * Malware protections for VMs are not necessarily compatible with the \"host\", and may require separate software. Multiple VMs running their own guest operating system are frequently engaged for server consolidation in order to avoid interference from separate VMs on the same actual machine platform. The desire to run multiple operating systems was the initial motivation for virtual machines, so as to allow time-sharing among several single-tasking operating systems. In some respects, a system virtual machine can be considered a generalization of the concept of virtual memory that historically preceded it. IBM's CP/CMS, the first systems to allow full virtualization, implemented time sharing by providing each user with a single-user operating system, the CMS. Unlike virtual memory, a system virtual machine entitled the user to write privileged instructions in their code. This approach had certain advantages, such as adding input/output devices not allowed by the standard system.Smith and Nair, pp. 395\u2013396 As technology evolves virtual memory for purposes of virtualization, new systems of memory overcommitment may be applied to manage memory sharing among multiple virtual machines on one actual computer operating system. It may be possible to share \"memory pages\" that have identical contents among multiple virtual machines that run on the same physical machine, what may result in mapping them to the same physical page by a technique known as Kernel SamePage Merging. This is particularly useful for read-only pages, such as those that contain code segments; in particular, that would be the case for multiple virtual machines running the same or similar software, software libraries, web servers, middleware components, etc. The guest operating systems do not need to be compliant with the host hardware, thereby making it possible to run different operating systems on the same computer (e.g., Microsoft Windows, Linux, or previous versions of an operating system) to support future software. The use of virtual machines to support separate guest operating systems is popular in regard to embedded systems. A typical use would be to run a real-time operating system simultaneously with a preferred complex operating system, such as Linux or Windows. Another use would be for novel and unproven software still in the developmental stage, so it runs inside a sandbox. Virtual machines have other advantages for operating system development, and may include improved debugging access and faster reboots.Super Fast Server Reboots \u2013 Another reason Virtualization rocks . vmwarez.com (2006-05-09). Retrieved on 2013-06-14. ==Techniques== Different virtualization techniques are used, based on the desired usage. Native execution is based on direct virtualization of the underlying raw hardware, thus it provides multiple \"instances\" of the same architecture a real machine is based on, capable of running complete operating systems. Some virtual machines can also emulate different architectures and allow execution of software applications and operating systems written for another CPU or architecture. Operating-system-level virtualization allows the resources of a computer to be partitioned via kernel's support for multiple isolated user space instances, which are usually called containers and may look and feel like real machines to the end users. Some computer architectures are capable of hardware-assisted virtualization, which enables efficient full virtualization by using virtualization-specific hardware capabilities, primarily from the host CPUs. ===Virtualization of the underlying raw hardware (native execution) === This approach is described as full virtualization of the hardware, and can be implemented using a type 1 or type 2 hypervisor: a type 1 hypervisor runs directly on the hardware, and a type 2 hypervisor runs on another operating system, such as Linux or Windows. Each virtual machine can run any operating system supported by the underlying hardware. Users can thus run two or more different \"guest\" operating systems simultaneously, in separate \"private\" virtual computers. The pioneer system using this concept was IBM's CP-40, the first (1967) version of IBM's CP/CMS (1967\u20131972) and the precursor to IBM's VM family (1972\u2013present). With the VM architecture, most users run a relatively simple interactive computing single-user operating system, CMS, as a \"guest\" on top of the VM control program (VM-CP). This approach kept the CMS design simple, as if it were running alone; the control program quietly provides multitasking and resource management services \"behind the scenes\". In addition to CMS communication and other system tasks are performed by multitasking VMs (RSCS, GCS, TCP/IP, UNIX), and users can run any of the other IBM operating systems, such as MVS, even a new CP itself or now z/OS. Even the simple CMS could be run in a threaded environment (LISTSERV, TRICKLE). z/VM is the current version of VM, and is used to support hundreds or thousands of virtual machines on a given mainframe. Some installations use Linux on IBM Z to run Web servers, where Linux runs as the operating system within many virtual machines. Full virtualization is particularly helpful in operating system development, when experimental new code can be run at the same time as older, more stable, versions, each in a separate virtual machine. The process can even be recursive: IBM debugged new versions of its virtual machine operating system, VM, in a virtual machine running under an older version of VM, and even used this technique to simulate new hardware.See History of CP/CMS for IBM's use of virtual machines for operating system development and simulation of new hardware The standard x86 instruction set architecture as used in the modern PCs does not actually meet the Popek and Goldberg virtualization requirements. Notably, there is no execution mode where all sensitive machine instructions always trap, which would allow per- instruction virtualization. Despite these limitations, several software packages have managed to provide virtualization on the x86 architecture, even though dynamic recompilation of privileged code, as first implemented by VMware, incurs some performance overhead as compared to a VM running on a natively virtualizable architecture such as the IBM System/370 or Motorola MC68020. By now, several other software packages such as Virtual PC, VirtualBox, Parallels Workstation and Virtual Iron manage to implement virtualization on x86 hardware. Intel and AMD have introduced features to their x86 processors to enable virtualization in hardware. As well as virtualization of the resources of a single machine, multiple independent nodes in a cluster can be combined and accessed as a single virtual NUMA machine.Matthew Chapman and Gernot Heiser. vNUMA: A virtual shared-memory multiprocessor. Proceedings of the 2009 USENIX Annual Technical Conference, San Diego, CA, USA, June, 2009 ===Emulation of a non-native system=== Virtual machines can also perform the role of an emulator, allowing software applications and operating systems written for another computer processor architecture to be run. ===Operating-system-level virtualization=== Operating- system-level virtualization is a server virtualization technology which virtualizes servers on an operating system (kernel) layer. It can be thought of as partitioning: a single physical server is sliced into multiple small partitions (otherwise called virtual environments (VE), virtual private servers (VPS), guests, zones, etc.); each such partition looks and feels like a real server, from the point of view of its users. For example, Solaris Zones supports multiple guest operating systems running under the same operating system such as Solaris 10. Guest operating systems can use the same kernel level with the same operating system version, or can be a separate copy of the operating system with a different kernel version using Solaris Kernel Zones. Solaris native Zones also requires that the host operating system is a version of Solaris; other operating systems from other manufacturers are not supported. However, Solaris Branded Zones would need to be used to have other operating systems as zones. Another example is System Workload Partitions (WPARs), introduced in version 6.1 of the IBM AIX operating system. System WPARs are software partitions running under one instance of the global AIX OS environment. The operating system level architecture has low overhead that helps to maximize efficient use of server resources. The virtualization introduces only a negligible overhead and allows running hundreds of virtual private servers on a single physical server. In contrast, approaches such as full virtualization (like VMware) and paravirtualization (like Xen or UML) cannot achieve such level of density, due to overhead of running multiple kernels. From the other side, operating system-level virtualization does not allow running different operating systems (i.e., different kernels), although different libraries, distributions, etc. are possible. Different virtualization techniques are used, based on the desired usage. Native execution is based on direct virtualization of the underlying raw hardware, thus it provides multiple \"instances\" of the same architecture a real machine is based on, capable of running complete operating systems. Some virtual machines can also emulate different architectures and allow execution of software applications and operating systems written for another CPU or architecture. Operating-system-level virtualization allows the resources of a computer to be partitioned via kernel's support for multiple isolated user space instances, which are usually called containers and may look and feel like real machines to the end users. Some computer architectures are capable of hardware-assisted virtualization, which enables efficient full virtualization by using virtualization-specific hardware capabilities, primarily from the host CPUs. == Virtualization-enabled hardware == Examples of virtualization-enabled hardware include the following: * Alcatel-Lucent 3B20D/3B21D emulated on commercial off-the-shelf computers with 3B2OE or 3B21E system * ARM TrustZone * Boston Circuits gCore (grid-on-chip) with 16 ARC 750D cores and Time-machine hardware virtualization module. * Freescale PowerPC MPC8572 and MPC8641D * IBM System/360 Model 67, System/370, System/390, and zSeries mainframes * IBM Power Systems * x86: ** AMD-V (formerly code-named Pacifica) ** Intel VT-x (formerly code-named Vanderpool) * HP vPAR and cell based nPAR * GE and Honeywell Multics systems * Honeywell 200/2000 systems Liberator replacing IBM 14xx systems * Honeywell Level 62/64/66 * IBM System/360 and System/370 models with emulators supporting programs for older IBM systems * Honeywell Level 6 minicomputers emulated predecessor 316/516/716 minis * Oracle Corporation (previously Sun Microsystems) SPARC sun4v (SPARC M6, T5, T4, T3, UltraSPARC T1 and T2) utilized by Oracle VM Server for SPARC, also known as \"Logical Domains\" * Xerox Sigma 6 CPUs were modified to emulate GE/Honeywell 600/6000 systems == See also == * Amazon Machine Image * Linux containers * Storage hypervisor * Universal Turing machine * Virtual appliance * Virtual backup appliance * Virtual disk image * Virtual machine escape == Notes == == References == == Further reading == * James E. Smith, Ravi Nair, Virtual Machines: Versatile Platforms For Systems And Processes, Morgan Kaufmann, May 2005, , 656 pages (covers both process and system virtual machines) * Craig, Iain D. Virtual Machines. Springer, 2006, , 269 pages (covers only process virtual machines) == External links == * The Reincarnation of Virtual Machines, Article on ACM Queue by Mendel Rosenblum, Co-Founder, VMware * Sandia National Laboratories Runs 1 Million Linux Kernels as Virtual Machines * Software Portability by Virtual Machine Emulation by Stefan Vorkoetter * Create new Virtual Machine in Windows Azure by Rahul Vijay Manekari * Category:Operating system technology ",
    "title": "System virtual machine"
}