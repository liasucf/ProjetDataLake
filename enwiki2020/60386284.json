{
    "id": "60386284",
    "text": "TI-BASIC 83,TI-BASIC Z80 or simply TI-BASIC, is the built-in programming language for the Texas Instruments programmable calculators in the TI-83 series. Calculators that implement TI-BASIC have a built in editor for writing programs. While the considerably faster Z80 assembly language is supported for the calculators, TI-BASIC's in-calculator editor and more user friendly syntax make it easier to use. TI-BASIC is interpreted. == Syntax == The syntax for TI-BASIC 83 is significantly different compared to most dialects of BASIC. For example, the language does not permit indentation with whitespace characters. It also depends on the TI calculator character set because it is tokenized. Aside from these differences, TI-BASIC retains most control flow statements: conditionals, various loops, GOTOs and Labels. Conditionals and loops use `End` to denote the end of their bodies. Each command can be placed on a new line, or separated by a colon for brevity. As such, the following snippets are identical in function. :disp \"FOO :disp \"BAR and :disp \"FOO:disp \"BAR In the above example the closing double quotes can be omitted because the colon causes all open markers to be closed. Unlike many high-level programming languages, TI-BASIC has only one assignment operator: `\u2192`. The rightward arrow assigns the value on the left to the variable on the right. === Conditionals === TI-BASIC includes simple constructs using the `If` statement. When the `If` token does not have a `Then` token on the following line it will only execute the next single command. :If condition :command Where `condition` is any boolean statement. One benefit of this format is brevity as it does not include `Then` and `End`. An `If` statement may have more than one command in its body if, instead of a command, a `Then` token is placed. :If condition :Then :command :command :End When using `Then`, the body must be closed by an `End` token. One more construct utilizes `Else`. This allows one of two bodies to be executed. :If condition :Then :body one :Else :body two :End In this case the calculator evaluates `condition`, if it evaluates to true `body one` is executed, however, if `condition` evaluates to false, `body two` is executed. Unlike many other programming languages, TI-BASIC has no `else if` construct, or any switch statement. ==== Menu( statement ==== It does, however, have a `Menu(` statement which allows a user to select one of a number of options. Similar to a switch menus do have fallthrough. The general syntax is `Menu(`, a quoted title string, and followed by quoted option name and label name. An example: :Menu(\"TITLE\",\"FIRST\",1,\"SECOND\",2,\"THIRD\",3) :Lbl 1 :body one :Lbl 2 :body two :Lbl 3 :body three TI-84 Plus CE Menu example The image is how the calculator renders the example above. In terms of functionality, the `Menu(`'s flow is similar to some switch statement and cases, with a key difference that the user supplies the switch's usual expression. Like many switches and cases, the `Lbl` allows fall-through. For example, in the code above, if a user selects \"FIRST\", all three bodies are executed. However, selecting \"SECOND\" means only the second and third bodies are executed. === Loops === TI-BASIC includes three types of loops: `For(`, `While`, and `Repeat`. ==== For( ==== `For(` is similar to many other languages. It will repeat commands either a set number of times, or a variable number. :For(variable,start,end[,increment]) :body :End === DS<( and IS>( === `DS<(` and `IS>(` are specialized conditionals that are similar in overall function to `If` statements. However, they have the unique property of changing the value of the given variable. :DS<(variable,value) :Command == Data types and variables == TI-BASIC is strongly and mostly statically typed. Most variables, besides lists and programs, have predefined names and allowed types. Each variable can usually only hold one data type, the exceptions are the numeric and all list variables which can hold either real or complex values. === Numeric === There are 27 numeric variables, `A` through `Z`, and `\u03b8`. These can hold two types of values, real and complex. All numbers are stored in the RAM as floating-point numbers with 14-digit mantissa, or significand, and an exponent range of -128 to 127. Complex numbers are stored as two consecutive reals. === List === Lists are also supported through the use of six built-in lists, and user created lists with up to five characters as the name. They are capable of holding up to 999 elements. A list may hold entirely real numbers or entirely imaginary numbers. Some functions in the calculator are able to operate over entire lists, via Array programming. === Matrix === Matrices are supported through the use of ten built-in matrices. Matrices do not support user created names or complex numbers. === Other data types === The TI-83 family supports several more data types other than numeric, list, and matrix types: token based data, screen image data, and graph database data. These data types cannot be directly manipulated by TI-BASIC. == References == == External links == *Texas Instruments' official website *TI-Basic Developer, unofficial documentation Category:Calculators Category:Programming languages Category:BASIC programming language family ",
    "title": "TI-BASIC 83"
}