{
    "id": "3239232",
    "text": "In computer science, Programming Computable Functions' (PCF) is a typed functional language introduced by Gordon Plotkin in 1977, based on previous unpublished material by Dana Scott.\"PCF is a programming language for computable functions, based on LCF, Scott\u2019s logic of computable functions\" . Programming Computable Functions is used by . It is also referred to as Programming with Computable Functions or Programming language for Computable Functions. It can be considered to be an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML or Haskell. A fully abstract model for PCF was first given by Milner (1977). However, since Milner's model was essentially based on the syntax of PCF it was considered less than satisfactory (Ong, 1995). The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics (Hyland and Ong, 2000; Abramsky, Jagadeesan, and Malacaria, 2000) and Kripke logical relations (O'Hearn and Riecke, 1995). For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable. ==Syntax== The types of PCF are inductively defined as * nat is a type * For types \u03c3 and \u03c4, there is a type \u03c3 \u2192 \u03c4 A context is a list of pairs x : \u03c3, where x is a variable name and \u03c3 is a type, such that no variable name is duplicated. One then defines typing judgments of terms-in-context in the usual way for the following syntactical constructs: * Variables (if x : \u03c3 is part of a context \u0393, then \u0393 \u22a2 x : \u03c3) * Application (of a term of type \u03c3 \u2192 \u03c4 to a term of type \u03c3) * \u03bb-abstraction * The Y fixed point combinator (making terms of type \u03c3 out of terms of type \u03c3 \u2192 \u03c3) * The successor (succ) and predecessor (pred) operations on nat and the constant 0 * The conditional if with the typing rule: : \\frac{ \\Gamma \\; \\vdash \\; t \\; : \\textbf{nat} , \\quad \\quad \\Gamma \\; \\vdash \\; s_0 \\; : \\sigma , \\quad \\quad \\Gamma \\; \\vdash \\; s_1 \\; : \\sigma } { \\Gamma \\; \\vdash \\; \\textbf{if}(t,s_0,s_1) \\; : \\sigma } : (nats will be interpreted as booleans here with a convention like zero denoting truth, and any other number denoting falsity) ==Semantics== ===Denotational semantics=== A relatively straightforward semantics for the language is the Scott model. In this model, * Types are interpreted as certain domains. ** [\\\\![ \\textbf{nat} ]\\\\!] := \\mathbb{N}_{\\bot} (the natural numbers with a bottom element adjoined, with the flat ordering) ** [\\\\![ \\sigma \\to \\tau \\, ]\\\\!] is interpreted as the domain of Scott-continuous functions from [\\\\![\\sigma]\\\\!] \\, to [\\\\![\\tau]\\\\!] \\,, with the pointwise ordering. * A context x_1 : \\sigma_1, \\; \\dots, \\; x_n : \\sigma_n is interpreted as the product [\\\\![\\sigma_1]\\\\!] \\times \\; \\dots \\; \\times [\\\\![\\sigma_n]\\\\!] * Terms in context \\Gamma \\; \\vdash \\; x \\; : \\; \\sigma are interpreted as continuous functions [\\\\![\\Gamma]\\\\!] \\; \\to \\; [\\\\![\\sigma]\\\\!] ** Variable terms are interpreted as projections ** Lambda abstraction and application are interpreted by making use of the cartesian closed structure of the category of domains and continuous functions ** Y is interpreted by taking the least fixed point of the argument This model is not fully abstract for PCF; but it is fully abstract for the language obtained by adding a parallel or operator to PCF (p. 293 in the Hyland and Ong 2000 reference below). == Notes == == References == * Appeared as * * * * * * * * ==External links== * Introduction to RealPCF * Lexer and Parser for PCF written in SML Category:Programming languages created in 1977 Category:Academic programming languages Category:Educational programming languages Category:Functional languages Category:Programming language theory ",
    "title": "Programming Computable Functions"
}