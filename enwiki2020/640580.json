{
    "id": "640580",
    "text": "In numerical analysis, Romberg's method is used to estimate the definite integral : \\int_a^b f(x) \\, dx by applying Richardson extrapolation repeatedly on the trapezium rule or the rectangle rule (midpoint rule). The estimates generate a triangular array. Romberg's method is a Newton\u2013Cotes formula \u2013 it evaluates the integrand at equally spaced points. The integrand must have continuous derivatives, though fairly good results may be obtained if only a few derivatives exist. If it is possible to evaluate the integrand at unequally spaced points, then other methods such as Gaussian quadrature and Clenshaw\u2013Curtis quadrature are generally more accurate. The method is named after Werner Romberg (1909\u20132003), who published the method in 1955. == Method == Using :h_n = \\tfrac{1}{2^n}(b-a) the method can be inductively defined by :R(0,0) = h_1 (f(a) + f(b)) :R(n,0) = \\tfrac{1}{2} R(n-1,0) + h_n \\sum_{k=1}^{2^{n-1}} f(a + (2k-1)h_n) :R(n,m) = R(n,m-1) + \\tfrac{1}{4^{m}-1} (R(n,m-1) - R(n-1,m-1)) or :R(n,m) = \\tfrac{1}{4^{m}-1} ( 4^{m} R(n,m-1) - R(n-1,m-1)) where n \\ge m \\, and m \\ge 1 \\, . In big O notation, the error for R(n, m) is : : O\\left(h_n^{2m+2}\\right). \\, The zeroeth extrapolation, R(n, 0), is equivalent to the trapezoidal rule with 2n + 1 points; the first extrapolation, R(n, 1), is equivalent to Simpson's rule with 2n + 1 points. The second extrapolation, R(n, 2), is equivalent to Boole's rule with 2n + 1 points. Further extrapolations differ from Newton Cotes formulas. In particular further Romberg extrapolations expand on Boole's rule in very slight ways, modifying weights into ratios similar as in Boole's rule. In contrast, further Newton Cotes methods produce increasingly differing weights, eventually leading to large positive and negative weights. This is indicative of how large degree interpolating polynomial Newton Cotes methods fail to converge for many integrals, while Romberg integration is more stable. When function evaluations are expensive, it may be preferable to replace the polynomial interpolation of Richardson with the rational interpolation proposed by . == A geometric example == To estimate the area under a curve the trapezoid rule is applied first to one-piece, then two, then four, and so on. One-piece. Note since it starts and ends at zero, this approximation yields zero area. Two-piece Four-piece Eight-piece After trapezoid rule estimates are obtained, Richardson extrapolation is applied. *For the first iteration the two piece and one piece estimates are used in the formula The same formula is then used to compare the four piece and the two piece estimate, and likewise for the higher estimates *For the second iteration the values of the first iteration are used in the formula *The third iteration uses the next power of 4: on the values derived by the second iteration. *The pattern is continued until there is one estimate. {| class=\"wikitable\" |- ! Number of pieces || Trapezoid estimates || First iteration || Second iteration || Third iteration |- | || ||(4 MA \u2212 LA)/3* || (16 MA \u2212 LA)/15|| (64 MA \u2212 LA)/63 |- |1||0 || (4\u00d716 \u2212 0)/3 = 21.333...|| (16\u00d734.667 \u2212 21.333)/15 = 35.556... || (64\u00d742.489 \u2212 35.556)/63 = 42.599... |- |2||16 || (4\u00d730 \u2212 16)/3 = 34.666... || (16\u00d742 \u2212 34.667)/15 = 42.489... || |- |4||30 || (4\u00d739 \u2212 30)/3 = 42 || || |- |8||39 || || || |- |- |} *MA stands for more accurate, LA stands for less accurate == Example == As an example, the Gaussian function is integrated from 0 to 1, i.e. the error function erf(1) \u2248 0.842700792949715. The triangular array is calculated row by row and calculation is terminated if the two last entries in the last row differ less than 10\u22128. 0.77174333 0.82526296 0.84310283 0.83836778 0.84273605 0.84271160 0.84161922 0.84270304 0.84270083 0.84270066 0.84243051 0.84270093 0.84270079 0.84270079 0.84270079 The result in the lower right corner of the triangular array is accurate to the digits shown. It is remarkable that this result is derived from the less accurate approximations obtained by the trapezium rule in the first column of the triangular array. == Implementation == Here is an example of a computer implementation of the Romberg method (in the C programming language). #include #include void dump_row(size_t i, double *R) { printf(\"R[%2zu] = \", i); for (size_t j = 0; j <= i; ++j){ printf(\"%f \", R[j]); } printf(\" \"); } double romberg(double (*f/* function to integrate */)(double), double /*lower limit*/ a, double /*upper limit*/ b, size_t max_steps, double /*desired accuracy*/ acc) { double R1[max_steps], R2[max_steps]; // buffers double *Rp = &R1;[0], *Rc = &R2;[0]; // Rp is previous row, Rc is current row double h = (b-a); //step size Rp[0] = (f(a) + f(b))*h*.5; // first trapezoidal step dump_row(0, Rp); for (size_t i = 1; i < max_steps; ++i) { h /= 2.; double c = 0; size_t ep = 1 << (i-1); //2^(n-1) for (size_t j = 1; j <= ep; ++j) { c += f(a+(2*j-1)*h); } Rc[0] = h*c + .5*Rp[0]; //R(i,0) for (size_t j = 1; j <= i; ++j) { double n_k = pow(4, j); Rc[j] = (n_k*Rc[j-1] - Rp[j-1])/(n_k-1); // compute R(i,j) } // Dump ith column of R, R[i,i] is the best estimate so far dump_row(i, Rc); if (i > 1 && fabs(Rp[i-1]-Rc[i]) < acc) { return Rc[i-1]; } // swap Rn and Rc as we only need the last row double *rt = Rp; Rp = Rc; Rc = rt; } return Rp[max_steps-1]; // return our best guess } == References == * * * * * * * == External links == * ROMBINT \u2013 code for MATLAB (author: Martin Kacenak) *Free online integration tool using Romberg, Fox\u2013Romberg, Gauss\u2013Legendre and other numerical methods *SciPy implementation of Romberg's method Category:Numerical integration (quadrature) Category:Articles with example C code ",
    "title": "Romberg's method"
}