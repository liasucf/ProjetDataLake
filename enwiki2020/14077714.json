{
    "id": "14077714",
    "text": "In mesh generation, Ruppert's algorithm, also known as Delaunay refinement, is an algorithm for creating quality Delaunay triangulations. The algorithm takes a planar straight-line graph (or in dimension higher than two a piecewise linear system) and returns a conforming Delaunay triangulation of only quality triangles. A triangle is considered poor-quality if it has a circumradius to shortest edge ratio larger than some prescribed threshold. Discovered by Jim Ruppert in the early 1990s, \"Ruppert's algorithm for two-dimensional quality mesh generation is perhaps the first theoretically guaranteed meshing algorithm to be truly satisfactory in practice.\" == Motivation == When doing computer simulations such as computational fluid dynamics, one starts with a model such as a 2D outline of a wing section. The input to a 2D finite element method needs to be in the form of triangles that fill all space, and each triangle to be filled with one kind of material \u2013 in this example, either \"air\" or \"wing\". Long, skinny triangles cannot be simulated accurately. The simulation time is generally proportional to the number of triangles, and so one wants to minimize the number of triangles, while still using enough triangles to give reasonably accurate results \u2013 typically by using an unstructured grid. The computer uses Ruppert's algorithm (or some similar meshing algorithm) to convert the polygonal model into triangles suitable for the finite element method. Intermediate triangulations of Ruppert's algorithm == Algorithm description == The algorithm begins with a Delaunay triangulation of the input vertices and then consists of two main operations. * The midpoint of a segment with non-empty diametral circles is inserted into the triangulation. * The circumcenter of a poor-quality triangle is inserted into the triangulation, unless this circumcenter lies in the diametral circle of some segment. In this case, the encroached segment is split instead. These operations are repeated until no poor-quality triangles exist and all segments are not encroached. == Pseudocode == function Ruppert(points, segments, threshold) is T := DelaunayTriangulation(points) Q := the set of encroached segments and poor quality triangles while Q is not empty: // The main loop if Q contains a segment s: insert the midpoint of s into T else Q contains poor quality triangle t: if the circumcenter of t encroaches a segment s: add s to Q; else: insert the circumcenter of t into T end if end if update Q end while return T end Ruppert. == Practical usage == Without modification Ruppert's algorithm is guaranteed to terminate and generate a quality mesh for non-acute input and any poor-quality threshold less than about 20.7 degrees. To relax these restrictions various small improvements have been made. By relaxing the quality requirement near small input angles, the algorithm can be extended to handle any straight-line input. Curved input can also be meshed using similar techniques. Ruppert's algorithm can be naturally extended to three dimensions, however its output guarantees are somewhat weaker due to the sliver type tetrahedron. An extension of Ruppert's algorithm in two dimensions is implemented in the freely available Triangle package. Two variants of Ruppert's algorithm in this package are guaranteed to terminate for a poor- quality threshold of about 26.5 degrees. In practice these algorithms are successful for poor-quality thresholds over 30 degrees. However, examples are known which cause the algorithm to fail with a threshold greater than 29.06 degrees.. == See also == * Chew's second algorithm * Local feature size * Polygon mesh * TetGen * Voronoi diagram == References == == External links == * * * Category:Mesh generation Category:Triangulation (geometry) Category:Articles containing video clips ",
    "title": "Ruppert's algorithm"
}