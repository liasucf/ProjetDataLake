{
    "id": "1515407",
    "text": "Bash, the default shell on many GNU/Linux distributions. A command shell is a command-line interface computer program to an operating system. ==General characteristics== {| class=\"wikitable sortable\" style=\"width: auto; text- align: center; font-size: smaller;\" |- !Shell !Usual environment !Usually invoked !Introduced !Platform-independent !Default login shell in !Default script shell in !License !Source code availability !User interface !Mouse support !Unicode support !ISO 8601 support !Console redirection !Stream redirection !Configurability !Startup/shutdown scripts !Batch scripts !Logging !available as statically linked, independent single file executable |- !Thompson shell |UNIX |sh |1971 | |UNIX |UNIX | | |Text-based CLI | | | | | | | | | | |- !Bourne shell 1977 version |7th Ed. UNIX |sh |1977 | |7th Ed. UNIX |7th Ed. UNIX, | | |Text-based CLI | | | | | | | | | | |- !Bourne shell current version |Various UNIX |sh |1977 | |SunOS-5.x, FreeBSD (non-root user) |SunOS-5.x | | |Text-based CLI | |Since mid 1990s. | | | | | | |if compiled with -DACCT. | |- !POSIX shell |POSIX |sh |1992As part of IEEE Std.1003.2-1992 (POSIX.2); integrated into IEEE Std.1003.1 with the 2001 revision. | | |POSIX | | |Text-based CLI | | | | | | |Unspecified ( given as an example) | | | |- !bash (v4) |POSIX |bash, sh |1989 | |GNU, Linux (default for root), macOS 10.3\u201310.14 |GNU, Linux, Haiku, macOS 10.3\u201310.14 | | |Text-based CLI | |, \"Bash now supports the \\u and \\U Unicode escape.\" | | | | | | | | |- !csh |POSIX |csh |1978 | |SunOS | | | |Text-based CLI | | | | | | | | | | |- !tcsh |POSIX |tcsh, csh |1983 | |FreeBSD (default for root), formerly Mac OS X | | | |Text- based CLI | | | | | | | | | | |- !Hamilton C shell |Win32, OS/2 |csh |1988 | (OS/2 version no longer maintained) | | | | |Text-based CLI | | | | | | | | | | |- !Scsh |POSIX |scsh |1994 | | | | | | | | | | | | | | | | |- !ksh (ksh93t+) |POSIX |ksh |1983 | |AIX, HP-UX |OpenSolaris | | |Text-based CLI | | | | | | | | | | |- !pdksh |POSIX |ksh, sh |1989? | |OpenBSDDefault shell in OpenBSD is ksh (pdksh). |OpenBSD | | |Text-based CLI | | | | | | | | | | |- !zsh |POSIX |zsh |1990 | |Deepin, GoboLinux, Grml, macOS 10.15+ |Grml, macOS 10.15+ | | |Text-based CLI | | | | | | | | | | |- !ash |POSIX |sh |1989 | |Minix, BusyBox based systems |NetBSD, Minix, BusyBox based systems | | |Text- based CLI | | (for BusyBox, supported in command-line editing, but not in string handling) | | | | | | | | |- !CCP |CP/M, MP/M |(CCP) |1976 (1974) | |CP/M (no login), MP/M |CP/M, MP/M | | (originally closed-source) |Text-based CLI | | | | | | | (automatic via ) | (only via external command to update ) | | |- !COMMAND.COM |DOS |COMMAND |1980 | (3rd party implementations, not bound to a specific DOS vendor or version, available) |DOS, Windows 95, 98, SE, ME |DOS, Windows 95, 98, SE, ME |vendor specific, f.e. MS-EULA,MS-DOS and Windows component \u2013 covered by a valid license for MS-DOS or Microsoft Windows. or BSD/GPL (free clones) | (except for OpenDOS, DR-DOS, PTS/DOS and FreeDOS) |Text-based CLI | | | (except for DR-DOS) | (via or ) | | (via startup parameters and environment variables, DR-DOS also supports user-default switch command) | (automatic for primary shell, or explicitly via , or startup options) | (via command or and startup options) | | |- !OS/2 CMD.EXE |OS/2 |CMD |1987 | |OS/2 |OS/2 |OS/2 component \u2013 covered by a valid license for OS/2. | |Text-based CLI | | | | | | | (only via startup option) | (via command or and startup options) | | |- !Windows CMD.EXECommand extensions enabled, or \"CMD /X\". |Win32 |CMD |1993 | |Windows NT, 2000, XP, Server 2003, Vista |Windows NT, 2000, XP, Server 2003, Vista |Windows component \u2013 covered by a valid license for Microsoft Windows. | |Text-based CLI | | ( for UTF-8, but program arguments are still encoded in local codepage) | | | | (via registry, startup parameters, and environment variables) | (automatic via registry, or explicitly via startup option) | (via command or and startup options) | | |- !4DOS, NDOS |DOS, Windows 95, 98, SE, ME |4DOS, NDOS |1989 (1986) | | | | | |Text-based CLI with TUI extensions | (popups, help system, internal variable, command) | | | (via , except for , , , , , , , commands and file / directory coloring) | | (via / file, startup parameters, environment variables, command) | (automatic for primary shell and / as well as / for any shell, or explicitly via , or startup options) | (via command or and startup options) | | |- !4OS2 |OS/2 |4OS2 |1992 | | | | | |Text-based CLI | | | | | | (via file, startup parameters, environment variables, command) | (automatic via / as well as / files, or explicitly via option) | (via command or and startup options) | | |- !TCC (formerly 4NT) |Win32 |TCC |1993 | |optional |optional | | |Text-based CLI (Take Command: GUI) | (console mouse, popups, help system, , internal variables, command) | | | | | (via registry, / file, startup parameters, environment variables, command) | (automatic via registry and / as well as /, or explicitly via startup option) | (via command or and startup options) | | |- !VMS DCL |OpenVMS |Automatically for login/interactive process |1977? | |VMS |VMS |Proprietary, bundled in VMS | |Text-based CLI | | | | | | | | | | |- !PowerShell |.NET |PowerShell |2006 | |Windows 10, 8, Server 2008, 7, Vista, XPWindows PowerShell is installed with Windows 7, however, it is an optional download for users of Windows Vista or Windows XP. |Windows 10, 8, Server 2008, 7 | | |Graphical CLI | | | | | | | | | | |- !rc |Plan 9, POSIX |rc |1989 | |Plan 9, Version 10 Unix |Plan 9, Version 10 Unix | | | | | | | | | | | | | |- !BeanShell |Java | |2005 | | | | | | | | | | | | | | | | |- !fish |POSIX |fish |2005 | |GhostBSD | | | |Text-based CLI | | | | | | | | | | |- !Ion |Redox, Linux |ion |2015 | |Redox |Redox | | |Text-based CLI | | | | | | | | | | (not distributed as a standalone executable, but it can be built as one) |- !Shell !Usual environment !Usually invoked !Introduced !Platform- independent !Default login shell in !Default script shell in !License !Source code availability !User interface !Mouse support !Unicode support !ISO 8601 support !Console redirection !Stream redirection !Configurability !Startup/shutdown scripts !Batch scripts !Logging !available as statically linked, independent single file executable |} ==Interactive features== {| class=\"wikitable sortable\" style=\"width: auto; text-align: center; font-size: smaller;\" |- !Shell !Command name completion !Path completion !Command argument completion !Wildcard completion !Command history !Mandatory argument prompt !Automatic suggestions !Colored directory listings !Text highlighting !Syntax highlighting !Directory history, stack or similar features !Implicit directory change !Auto\u00adcorrection !Integrated environment !Snippets !Value prompt !Menu/options prompt !Progress indicator !Context sensitive help !Command builder |- !Thompson shell | | | | | | | |? |? | | | | | | | | | | | |- !Bourne shell 1977 version | | | | | | | |? |? | | | | | | | | | | | |- !Bourne shell current version | |current versions from J\u00f6rg Schilling. | | | | | | | | | (CDPATH, pushd, popd, dirs), CDPATH since SVr4 | | | | | | | | | |- !POSIX shell | | | | | | | | | | | | | | | | | | | | |- !bash (v4.0) | | | |Alt-Shift-8 or Alt-* will expand to the full matching list of filenames. | | | | | | | | | | | | | | | | |- !csh | | | | | | | | | | | | | | | | | | | | |- !tcsh | | | | | | | | | | | | | | | | | | | | |- !Hamilton C shell | | | | | | | |? |? | | | | | | | | | | | |- !Scsh | | | | | | | |? |? | | | | | | | | | | | |- !ksh (ksh93t+) | | | | | | | | | | | | | | | | | | | | |- !pdksh | | | | | | | | | | | | | | | | | | | | |- !zsh | | | | | | | | | |zsh does not feature syntax highlighting, but a 3rd party project exists which offers this capability as an add-on: zsh-syntax-highlighting | | | | | | | | | | |- !ash | | | | | | | | | | | | | | | | | | | | |- !CCP | | | | | | | | | | | | | | | | | | | | |- !COMMAND.COM | | | | |Available through the add-on.Available in DR- DOS through . | | | | (only in DR-DOS through %$ON%, %$OFF%, %$HEADER%, %$FOOTER%) | | | | | (only single-stepping with COMMAND /Y) | | | (only via external command, in DR-DOS also via / internal commands) | | | |- !OS/2 CMD.EXE | | | | | | | | | | | | | | | | | | | | |- !Windows CMD.EXE | | | | | | | | | | | | | | | | (via command) | | | | |- !4DOS | | | | |Alternatively available through the add-on as well.Alternatively available in DR-DOS through as well. | | | | | | | | | | | (via , and commands) | (via function, and indirectly via a combination of , , commands) | | | (except for command for INI file directives) |- !4OS2 |? |? |? |? | | | | | | | | | |? | |? |? | | | |- !TCC (formerly 4NT) | | | | | | | | | | | | | | | | (via , , and commands) | (via function, and indirectly via a combination of , , commands)TCC has special prompt functions for Yes, No, Cancel, Close, Retry. | | | |- !PowerShell | | | | | | |Yes, in ISE |? |? |Yes, in ISE and PSReadLine module (included in v5.0) |Push-Location (with alias `pushd`) and Pop-Location (with alias `popd`) allows multiple location types (directories of file systems, organizational units of Active Directory, nodes of Windows Registry etc) to be pushed onto and popped from location stacks. | |Yes, in PSReadLine module |Yes, in ISE |Yes, in ISE | |The $host.ui.PromptForChoice function allows for a menu-style prompt for choices. The prompt works from background jobs as well as from remote sessions, displaying the menu prompt on the console of the controlling session. |The cmdlet writes a progress bar which can indicate percentage, remaining seconds etc. The progress bar messages work from background jobs or remote sessions in addition to interactive scripts, i.e. the progress bar is displayed on the console of the controlling session, not as part of the regular output. |Yes, in ISE |The cmdlet inspects the command definition and opens an interactive windows with a named input field for each parameter/switch |- !rc |Handled by rio, GNU readline, editline or vrl. | | | | | | |? |? | | | | | | |? | | | | |- !BeanShell | | | | | | | |? |? | | | | | | | | | | | |- !VMS DCL | | | | | | | |? |? | | | | | | | | | | | |- !fish | | | | | | | |? |? | | | | |The fish shell is an interactive character based input/output surface. | | | | | | |- !Shell !Command name completion !Path completion !Command argument completion !Wildcard completion !Command history !Mandatory argument prompt !Automatic suggestions !Colored directory listings !Text highlighting !Syntax highlighting !Directory history, stack or similar features !Implicit directory change !Auto\u00adcorrection !Integrated environment !Snippets !Value prompt !Menu/options prompt !Progress indicator !Context sensitive help !Command builder |} === Background execution === Background execution allows a shell to run a command in background. POSIX shells and other Unix shells allow background execution by using the & character at the end of command, and in PowerShell you can use `Start-Process` or `Start-Job` commands. === Completions === Bash. Completion features assist the user in typing commands at the command line, by looking for and suggesting matching words for incomplete ones. Completion is generally requested by pressing the completion key (often the key). Command name completion is the completion of the name of a command. In most shells, a command can be a program in the command path (usually `$PATH`), a builtin command, a function or alias. Path completion is the completion of the path to a file, relative or absolute. Wildcard completion is a generalization of path completion, where an expression matches any number of files, using any supported syntax for file matching. Variable completion is the completion of the name of a variable name (environment variable or shell variable). Bash, zsh, and fish have completion for all variable names. PowerShell has completions for environment variable names, shell variable names and \u2014 from within user-defined functions \u2014 parameter names. Command argument completion is the completion of a specific command's arguments. There are two types of arguments, named and positional: Named arguments, often called options, are identified by their name or letter preceding a value, whereas positional arguments consist only of the value. Some shells allow completion of argument names, but few support completing values. Bash, zsh and fish offer parameter name completion through a definition external to the command, distributed in a separate completion definition file. For command parameter name/value completions, these shells assume path/filename completion if no completion is defined for the command. Completion can be set up to suggest completions by calling a shell function. The fish shell additionally supports parsing of man pages to extract parameter information that can be used to improve completions/suggestions. In PowerShell, all types of commands (cmdlets, functions, script files) inherently expose data about the names, types and valid value ranges/lists for each argument. This metadata is used by PowerShell to automatically support argument name and value completion for built-in commands/functions, user- defined commands/functions as well as for script files. Individual cmdlets can also define dynamic completion of argument values where the completion values are computed dynamically on the running system. === Command history === A user of a shell may find that he/she is typing something similar to what the user typed before. If the shell supports command history the user can call the previous command into the line editor and edit it before issuing it again. Shells that support completion may also be able to directly complete the command from the command history given a partial/initial part of the previous command. Most modern shells support command history. Shells which support command history in general also support completion from history rather than just recalling commands from the history. In addition to the plain command text, PowerShell also records execution start- and end time and execution status in the command history. === Mandatory argument prompt === Mandatory arguments/parameters are arguments/parameters which must be assigned a value upon invocation of the command, function or script file. A shell that can determine ahead of invocation that there are missing mandatory values, can assist the interactive user by prompting for those values instead of letting the command fail. Having the shell prompt for missing values will allow the author of a script, command or function to mark a parameter as mandatory instead of creating script code to either prompt for the missing values (after determining that it is being run interactively) or fail with a message. PowerShell allows commands, functions and scripts to define arguments/parameters as mandatory. The shell determines prior to invocation if there is any mandatory arguments/parameters which have not been bound, and will then prompt the user for the value(s) before actual invocation. === Automatic suggestions === Command-line completion in PowerShell ISE.With automatic suggestions the shell monitors while the interactive user is typing and displays context-relevant suggestions without interrupting the typing instead of the user explicitly requesting completion. The PowerShell Integrated Scripting Environment uses the discoverable metadata to provide \"intellisense\" - i.e. suggestions that automatically pops up as the user types, in addition to when the user explicitly requests completion lists by pressing e.g. === Directory history, stack or similar features === A shell may record the locations the user has used as current locations and allow fast switching to any location/directory in the history. One of the uses of the zsh directory stack is to record a directory history. In particular, the option and advanced arguments and completion are used for this purpose. PowerShell allows multiple named stacks to be used. Locations (directories) can be pushed onto/popped from the current stack or a named stack. Any stack can become the current (default) stack. Unlike most other shells, PowerShell's location concept allow location stacks to hold file system locations as well as other location types like e.g. Active Directory organizational units/groups, SQL Server databases/tables/objects, Internet Information Server applications/sites/virtual directories. 4DOS and Take Command Console record history of current directories and allows the user to switch to a directory in the history using a popup a window. === Implicit directory change === A directory name can be used directly as a command which implicitly changes the current location to the directory. This must be distinguished from an unrelated load drive feature supported by Concurrent DOS, Multiuser DOS, System Manager and REAL/32, where the drive letter L: will be implicitly updated to point to the load path of a loaded application, thereby allowing applications to refer to files residing in their load directory under a standardized drive letter instead of under an absolute path. === Autocorrection === When a command line does not match a command or arguments directly, spell checking can automatically correct common typing mistakes (such as case sensitivity, missing letters). There are two approaches to this; the shell can either suggest probable corrections upon command invocation, or this can happen earlier as part of a completion or autosuggestion. The tcsh and zsh shells feature optional spell checking/correction, upon command invocation. Fish does the autocorrection upon completion and autosuggestion. The feature is therefore not in the way when typing out the whole command and pressing enter, whereas extensive use of the tab and right-arrow keys makes the shell mostly case insensitive. The PSReadLine PowerShell module (which is shipped with version 5.0) provides the option to specify a CommandValidationHandler ScriptBlock which runs before submitting the command. This allows for custom correcting of commonly mistyped commands, and verification before actually running the command. === Integrated environment === An integrated environment is the integration of the command-line interface with editors (typically multiple documents), help system and possibly debugging and other tools. Take Command Console (TCC) comes with an integrated environment with command line pane, file explorer, editor, batch debugger and more. PowerShell ISE includes a command line pane with support for integrated command line, copy-paste, multiple document editors, source-level debugging, help pane, command explorer pane and scripting interface allowing scripts/modules to manipulate menus, add-ons etc. The ISE (menus, windows, shortcuts, addons) are customizable through scripts. === Snippets === Snippets are small regions of reusable script code. Snippets are often used to save keystrokes, or to assist the user with common scripting patterns. Many text editors support snippets for scripting either as built-in functionality or through plugins. PowerShell supports snippets in the Integrated Scripting Environment (ISE) using . === Value prompt === A shell script can prompt the interactive user for a value. === Menu/options selector === A shell script can present the interactive user with a list of choices. === Progress indicator === A shell script (or job) can report progress of long running tasks to the interactive user. Unix/Linux systems may offer other tools support using progress indicators from scripts or as standalone-commands, such as the program \"pv\". These are not integrated features of the shells, however. PowerShell has a built-in command and API functions (to be used when authoring commands) for writing/updating a progress bar. Progress bar messages are sent separates from regular command output and the progress bar is always displayed at the ultimate interactive users console regardless of whether the progress messages originates from an interactive script, from a background job or from a remote session. === Interactive table === Output from a command execution can be displayed in a table/grid which can be interactively sorted and filtered and/or otherwise manipulated after command execution ends. PowerShell cmdlet displays data in an interactive window with interactive sorting and filtering. === Colored directory listings === JP Software command-line processors provide user-configurable colorization of file and directory names in directory listings based on their file extension and/or attributes through an optionally defined %COLORDIR% environment variable. For the Unix/Linux shells, this is a feature of the command and the terminal. === Text highlighting === The command line processors in DOS Plus, Multiuser DOS, REAL/32 and in all versions of DR-DOS support a number of optional environment variables to define escape sequences allowing to control text highlighting, reversion or colorization for display or print purposes in commands like TYPE. All mentioned command line processors support %$ON% and %$OFF%. If defined, these sequences will be emitted before and after filenames. A typical sequence for %$ON% would be \\033[1m in conjunction with ANSI.SYS, \\033p for an ASCII terminal or \\016 for an IBM or ESC/P printer. Likewise, typical sequences for %$OFF% would be \\033[0m, \\033q, \\024, respectively. The variables %$HEADER% and %$FOOTER% are only supported by COMMAND.COM in DR-DOS 7.02 and higher to define sequences emitted before and after text blocks in order to control text highlighting, pagination or other formatting options. For the Unix/Linux shells, this is a feature of the terminal. === Syntax highlighting === An independent project offers syntax highlighting as an add-on to the Z Shell (zsh). This is not part of the shell, however. PowerShell provides customizable syntax highlighting on the command line through the PSReadLine module. This module can be used with PowerShell v3.0+, and it's included with v5.0. Additionally, it is loaded by default in the command line host \"powershell.exe\" in v5.0. The PowerShell ISE also includes syntax highlighting on the command line as well as in the script pane. Take Command Console (TCC) offers syntax highlighting in the integrated environment. ===Context sensitive help=== 4DOS, 4OS2, 4NT / Take Command Console and PowerShell (in PowerShell ISE) looks up context-sensitive help information when is pressed. Zsh provides various forms of configurable context-sensitive help as part of its widget, command, or in the completion of options for some commands. ===Command builder=== A command builder is a guided dialog which assists the user in filling in a command. PowerShell has a command builder which is available in PowerShell ISE or which can be displayed separately through the cmdlet. ==Programming features== {| class=\"wikitable sortable\" style=\"width: auto; text-align: center; font-size: smaller;\" |- !Shell !Functions !Exception handling !Search & replace on variable substi\u00adtutions !Arith\u00admetic !Floating point !Math function library !Linear arrays or lists !Assoc\u00adiative arrays !Lambda functions !eval func\u00adtion !Pseudo\u00adrandom number generation !Bytecode |- !Bourne shell 1977 version | | | | | | | | | | | | |- !Bourne shell current version | | | | | | | | | | | | |- !POSIX shell | | | | | | | | | | | | |- !bash (v4.0) | | | | | | | | | | | | |- !csh | | | | | | | | | | | | |- !tcsh | | | | | | | | | | | | |- !Hamilton C shell | | | | | | | | | | | | |- !Scsh | |? | |? |? |? | |? | | | | |- !ksh (ksh93t+) | | | | | | | | | | | | |- !pdksh | | | | | | | | | | | | |- !zsh | | | | | | | | | | | | |- !ash | | (via ) | | | | | | | | | | |- !CCP | |? | | |? |? | | | | | | |- !COMMAND.COM | | (only Auto-fail (via (or in some versions of DR-DOS)) | | | | | | | | | | |- !OS/2 CMD.EXE | | | |? | | |? | | | | | |- !Windows CMD.EXE | | | | | | | | | | | | |- !4DOS | | | | |? |? | | | | | | |- !4OS2 |? |? |? |? |? |? |? |? | | | ( function) |? |- !TCC (formerly 4NT) | | | | |? |? | |? | | | ( function) | (via command) |- !PowerShell | | (Try-Catch-Finally) | | | |The .NET System.Math class defines mathematical functions that can be used through the shortcut , e.g. for the sinus function. | | | | | | |- !rc | | | |? |? |? | |? | | | | |- !BeanShell | | |? | |? |? | | | | | | |- !VMS DCL | | | | | | | | | | | | |- !fish | | | | | | | | | | | | |} ==String processing and filename matching== {| class=\"wikitable sortable\" style=\"width: auto; text-align: center; font-size: smaller;\" |- !Shell !String processing !Alternation (Brace expansion) !Pattern matching (regular expressions built-in) !Pattern matching (filename globbing) !Globbing qualifiers (filename generation based on file attributes) !Recursive globbing (generating files from any level of subdirectories) |- !Bourne shell 1977 version |? | | | | | |- !Bourne shell recent version | (prefix and suffix stripping in variable expansion) | | | | | |- !POSIX shell | (prefix and suffix stripping in variable expansion) | | | | | |- !bash (v4.0) | (prefix and suffix stripping in variable expansion) | | | | | () |- !csh | | | | | | |- !tcsh | | | | | | |- !Hamilton C shell | | | | | | |- !Scsh |? |? | | | | |- !ksh (ksh93t+) | (prefix, suffix stripping and string replacement in variable expansion) | | | | | (with , no following of symlinks) |- !pdksh |? | | | | | |- !zsh | (through variable processing: e.g. substring extraction, various transformations via parameter expansion) | | | | | ( or to follow symlinks) |- !ash |? |? | | | | |- !CCP | | | | | | |- !COMMAND.COM | | | | | | |- !OS/2 CMD.EXE | | | | | (only in command) | |- !Windows CMD.EXE | (only through and ) | | | | (only in command) | (via command, or, where available, indirectly via subdir option) |- !4DOS | (through variable functions , extended environment variable processing, various string commands and and ) | | | | (via attribute and description options and size, time, date, and file exclusion ranges) | (via command, or indirectly via command or, where available, subdir option) |- !4OS2 |? | | |? |? |? |- !TCC (formerly 4NT) | (through variable functions , extended environment variable processing, various string commands and and ) | | | | (via attribute and description options and size, time, date, owner, and file exclusion ranges) | (via command, or indirectly via command or, where available, subdir option) |- !PowerShell | | | | |? |? |- !rc |? |? | | | | |- !BeanShell |? |? | |? |? |? |- !VMS DCL | | | | | | (via ) |- !fish | | | | | | () |} ==Inter-process communication== {| class=\"wikitable sortable\" style=\"width: auto; text-align: center; font-size: smaller;\" |- !Shell !Pipes !Command substitution !Process substitution !Subshells !TCP/UDP connections as streams !Keystroke stacking |- !Bourne shell | | | | | |xautomation and xdotool can be used to generate keystrokes under X Window System; or a program can be run in a pseudoterminal to be able to control it (as with the tool). |- !POSIX shell | | | | | | |- !bash (v4.0) | | | | | | |- !csh | | | | | | |- !tcsh | | | | | | |- !Hamilton C shell | | | | | |? |- !Scsh | |? |? |? | | |- !ksh (ksh93t+) | | | | | | |- !pdksh | | | | | | |- !zsh | | | | | | |- !ash | | | | | | |- !CCP | | | | | | |- !COMMAND.COM | | | | (only under DR-DOS multitasker via ) | | |- !OS/2 CMD.EXE | | | |? | | |- !Windows CMD.EXE | | | | | | |- !4DOS | | |? | (via and , or via , and and ) | | (via and ) |- !4OS2 | |? |? |? | | (via ) |- !TCC (formerly 4NT) | | |? | (via and ) | (via , , , , , and , client only) | (via ) |- !PowerShell | | | | | |? |- !rc | | | | | |? |- !BeanShell | |? |? |? | |? |- !VMS DCL | | | | | | |- !fish | | () | | | | |} ===Keystroke stacking=== In anticipation of what a given running application may accept as keyboard input, the user of the shell instructs the shell to generate a sequence of simulated keystrokes, which the application will interpret as a keyboard input from an interactive user. By sending keystroke sequences the user may be able to direct the application to perform actions that would be impossible to achieve through input redirection or would otherwise require an interactive user. For example, if an application acts on keystrokes, which cannot be redirected, distinguishes between normal and extended keys, flushes the queue before accepting new input on startup or under certain conditions, or because it does not read through standard input at all. Keystroke stacking typically also provides means to control the timing of simulated keys being sent or to delay new keys until the queue was flushed etc. It also allows to simulate keys which are not present on a keyboard (because the corresponding keys do not physically exist or because a different keyboard layout is being used) and therefore would be impossible to type by a user. ==Security features== {| class=\"wikitable sortable\" style=\"width: auto; text-align: center; font-size: smaller;\" |- !Shell !Secure (password) prompt !Encrypted variables/ parameters !File/directory passwords !Execute permission !Untrusted script blocking !Restricted shell subset !Safe data subset |- !Bourne shell |The shell can use the utility to suppress echoing of typed characters to the screen. This requires multiple steps: 1. reading the current echo state, 2. switching echo off, 3. reading the input, 4. switching echo state back to the original state. | |? |The execute permission is enforced by a separate program, the program loader, by refusing to invoke the interpreter (possibly a shell) specified by the script's hashbang. The interpreter does not enforce the execute permission if invoked directly as the program loader would, with the file as an argument; this only requires read permission, as does piping the file as input to the interpreter, in which case the interpreter cannot see the execute permission. | | | |- !POSIX shell | | |? | | | | |- !bash (v4.0) | | |? | | | | |- !csh | | |? | | | | |- !tcsh | | |? | | | | |- !Hamilton C shell | | | | | | | |- !Scsh | | |? | | | | |- !ksh (ksh93t+) | | |? | | | | |- !pdksh | | |? | | | | |- !zsh | | |? | | | | |- !ash | | |? | | | | |- !CCP | | | | | | | |- !COMMAND.COM | (only under DR- DOS, prompts for password if file/directory is protected) | | (only under DR- DOS via syntax)Under DR-DOS the password separator for file and directory passwords is a semicolon. This is also supported under 4DOS for as long as the command does not support include lists. Under 4DOS, the password separator must be doubled for all commands supporting include lists in order to distinguish passwords from include lists. Commands not supporting include lists accept both forms. DR-DOS 7.02 and higher optionally accept a doubled semicolon as well, so that doubled semicolons work under both COMMAND.COM and 4DOS regardless of the command executed. | (only under DR-DOS, if files are password-protected for read and/or execute permission)DR-DOS supports file passwords for read/write/delete and optionally execute permissions. Files are not protected by default, but the system can be set up so that f.e. batch scripts require a password to read. | | | |- !OS/2 CMD.EXE | | | | | | | |- !Windows CMD.EXE | | | | | | | |- !4DOS | (via or ) and echoes back asterisks for each typed character. | | (only under DR-DOS via syntax) | (only under DR- DOS, if files are password-protected for read and/or execute permission) | | | |- !4OS2 |? | | | | | | |- !TCC (formerly 4NT) | (via , or ) | | | | | | |- !PowerShell | reads a string of characters from the input device into an encrypted string, one character at a time thus ensuring that there is no memory image of the clear text which could be gleaned from scanning memory, or from crash dumps, memory dumps, paging files, log files or similar. | | |PowerShell script files ( files) are by default associated with the Notepad editor, not with the PowerShell execution engine. Invoking a file will launch Notepad rather than executing the script. | |Startup scripts per computer/user can import modules and expose a subset the commands/functions available in the modules. | |- !rc | | |? | | | | |- !BeanShell |? |? |? |? |? |? |? |- !VMS DCL | | | | | | | |- !fish | | |? | | | |? |} === Secure prompt === Some shell scripts need to query the user for sensitive information such as passwords, private digital keys, PIN codes or other confidential information. Sensitive input should not be echoed back to the screen/input device where it could be gleaned by unauthorized persons. Plaintext memory representation of sensitive information should also be avoided as it could allow the information to be compromised, e.g., through swap files, core dumps etc. The shells bash, zsh and PowerShell offer this as a specific feature. Shells which do not offer this as a specific feature may still be able to turn off echoing through some other means. Shells executing on a Unix/Linux operating system can use the external command to switch off/on echoing of input characters. In addition to not echoing back the characters, PowerShell's option also encrypts the input character-by-character during the input process, ensuring that the string is never represented unencrypted in memory where it could be compromised through memory dumps, scanning, transcription etc. === Encrypted variables/parameters === If a script reads a password into an environment variable it is in memory in plain text, and thus may be accessed via a core dump. It is also in the process environment, which may be accessible by other processes started by the script. PowerShell can work with encrypted string variables/parameters. Encrypted variables ensure that values are not inadvertently disclosed through e.g. transcripts, echo'ing, logfiles, memory or crash dumps or even malicious memory scanning. PowerShell also supports saving of such encrypted strings in text files, protected by a key owned by the current user. === Execute permission === Some operating systems define an execute permission which can be granted to users/groups for a file. On Unix systems, the execute permission controls access to invoking the file as a program, and applies both to executables and scripts. As the permission is enforced in the program loader, no obligation is needed from the invoking program, nor the invoked program, in enforcing the execute permission this also goes for shells and other interpreter programs. The behaviour is mandated by the POSIX C library that is used for interfacing with the kernel. POSIX specifies that the `exec` family of functions shall fail with EACCESS (permission denied) if the file denies execution permission (see ). The execute permission only applies when the script is run directly. If a script is invoked as an argument to the interpreting shell, it will be executed regardless of whether the user holds the execute permission for that script. Although Windows also specifies an execute permission, none of the Windows-specific shells block script execution if the permission has not been granted. === Untrusted script blocking === Some shells will block scripts determined to be untrustworthy, or refuse to run scripts if mandated by a system administrator. ==== Script origin execution restriction ==== PowerShell can be set to block execution of scripts which has been marked as obtained from an unknown/untrusted origin (e.g. the Internet). Internet facing applications such as web browsers, IM clients, mail readers etc. mark files downloaded from the internet with the origin zone in an alternate data stream which is understood by PowerShell. ==== Signed script restriction ==== Script/code signing policies can be used to ensure that an operations department only run approved scripts/code which have been reviewed and signed by a trusted reviewer/approver. Signing regimes also protects against tampering. If a script is sent from vendor to a client, the client can use signing to ensure that the script has not been tampered with during transit and that the script indeed originates from the vendor and not an attacker trying to social engineer an operator into running an attack script. PowerShell can be set to allow execution of otherwise blocked scripts (e.g. originating from an untrusted zone) if the script has been digitally signed using a trusted digital certificate. ==== Multilevel execution policies ==== A company may want to enforce execution restriction globally within the company and/or certain parts of the company. It may want to set a policy for running signed scripts but allow certain parts of the company to set their own policies for zoned restrictions. PowerShell allows script blocking policies to be enforced at multiple levels: Local machine, current user etc. A higher level policy overrides a lower level policy, e.g. if a policy is defined for the local machine it is in place for all users of the local machine, only if it is left undefined at the higher level can it be defined for the lower levels. === Restricted shell subset === Several shells can be started or be configured to start in a mode where only a limited set of commands and actions is available to the user. While not a security boundary (the command accessing a resource is blocked rather than the resource) this is nevertheless typically used to restrict users' actions before logging in. A restricted mode is part of the POSIX specification for shells, and most of the Linux/Unix shells support such a mode where several of the built-in commands are disabled and only external commands from a certain directory can be invoked. PowerShell supports restricted modes through session configuration files or session configurations. A session configuration file can define visible (available) cmdlets, aliases, functions, path providers and more. === Safe data subset === Scripts that invoke other scripts can be a security risk as they can potentially execute foreign code in the context of the user who launched the initial script. Scripts will usually be designed to exclusively include scripts from known safe locations; but in some instances, e.g. when offering the user a way to configure the environment or loading localized messages, the script may need to include other scripts/files. One way to address this risk is for the shell to offer a safe subset of commands which can be executed by an included script. PowerShell data sections can contain constants and expressions using a restricted subset of operators and commands. PowerShell data sections are used when e.g. localized strings needs to be read from an external source while protecting against unwanted side effects. ==Notes== ==References== ==External links== * Linux Magazine: Bash vs. Vista PowerShell * IEEE. 1003.1 Standard for Information Technology \u2013 Portable Operating System Interface (POSIX): Shell and Utilities, Issue 7 Category:Command shells Shells ",
    "title": "Comparison of command shells"
}