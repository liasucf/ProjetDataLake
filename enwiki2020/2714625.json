{
    "id": "2714625",
    "text": "The Local Inter-Process Communicationhttps://blogs.msdn.microsoft.com/ntdebugging/2007/07/26/lpc- local-procedure-calls-part-1-architecture/ (LPC, often also referred to as Local Procedure Call or Lightweight Procedure Call) is an internal, undocumented inter-process communication facility provided by the Microsoft Windows NT kernel for lightweight IPC between processes on the same computer. As of Windows Vista, LPC has been rewritten as Asynchronous Local Inter- Process Communicationhttps://blogs.msdn.microsoft.com/ntdebugging/2007/07/26/lpc- local-procedure-calls-part-1-architecture/ (ALPC, often also Advanced Local Procedure Call) in order to provide a high-speed scalable communication mechanism required to efficiently implement User-Mode Driver Framework (UMDF), whose user-mode parts require an efficient communication channel with UMDF's components in the executive. The (A)LPC interface is part of Windows NT's undocumented Native API, and as such is not available to applications for direct use. However, it can be used indirectly in the following instances: * when using the Microsoft RPC API to communicate locally, i.e. between the processes on the same machine * by calling Windows APIs that are implemented with (A)LPC (see below) ==Implementation== (A)LPC is implemented using kernel \"port\" objects, which are securable (with ACLs, allowing e.g. only specific SIDs to use them) and allow identification of the process on the other side of the connection. Individual messages are also securable: applications can set per-message SIDs, and also test for changes of the security context in the token associated with the (A)LPC message. The typical communication scenario between the server and the client is as follows: # A server process first creates a named server connection port object, and waits for clients to connect. # A client requests a connection to that named port by sending a connect message. # If the server accepts the connection, two unnamed ports are created: #* client communication port - used by client threads to communicate with a particular server #* server communication port - used by the server to communicate with a particular client; one such port per client is created # The client receives a handle to the client communication port, and server receives a handle to the server communication port, and the inter-process communication channel is established. (A)LPC supports the following three modes of message exchange between the server and client: * For short messages (fewer than 256 bytes) the kernel copies the message buffers between processes, from the address space of the sending process to the system address space, and from there to the receiving process' address space. * For messages longer than 256 bytes a shared memory section must be used to transfer data, which the (A)LPC service maps between the sending and receiving processes. First the sender places data into the shared memory, and then sends a notification (e.g. a small message, using the first method of (A)LPC) to the receiving process pointing to the sent data in the shared memory section. * Server can directly read and write data from the client's address space, when the amount of data is too large to fit in a shared section. ALPC has a performance advantage over the former LPC interface, as it can be configured to use I/O completion ports instead of synchronous request/reply mechanism that LPC exclusively uses. This enables ALPC ports high-speed communication which automatically balances the number of messages and threads. Additionally, ALPC messages can be batched together so as to minimize user-mode/kernel-mode switches. ==Known usage== (A)LPC is used heavily in communication between internal subsystems in Windows NT. The Win32 subsystem uses (A)LPC heavily for communication between client and the subsystem server (CSRSS). Quick LPC was introduced in version 3.51 of Windows NT to make these calls faster. This method was largely abandoned in version 4.0 in favor of moving the performance critical server portions into kernel mode (win32k.sys). The Local Security Authority Subsystem Service (LSASS), Session Manager (SMSS), and Service Control Manager all use (A)LPC ports directly to communicate with client processes. Winlogon and the Security Reference Monitor use it to communicate with the LSASS process. As mentioned, Microsoft RPC can use (A)LPC as a transport when the client and server are both on the same machine. Many services that are designed to communicate only on the local computer use (A)LPC as the only transport through RPC. The implementation of remote OLE and DCOM in many cases uses (A)LPC for local communication as well. ==See also== * Doors * Remote procedure call ==Notes== ==References== * * ==External links== * \u2014 Includes explanation of undocumented functions * LPC Communication Category:Windows communication and services Category:Inter-process communication ",
    "title": "Local Inter-Process Communication"
}