{
    "id": "9124553",
    "text": "In applied mathematics, the maximum generalized assignment problem is a problem in combinatorial optimization. This problem is a generalization of the assignment problem in which both tasks and agents have a size. Moreover, the size of each task might vary from one agent to the other. This problem in its most general form is as follows: There are a number of agents and a number of tasks. Any agent can be assigned to perform any task, incurring some cost and profit that may vary depending on the agent-task assignment. Moreover, each agent has a budget and the sum of the costs of tasks assigned to it cannot exceed this budget. It is required to find an assignment in which all agents do not exceed their budget and total profit of the assignment is maximized. ==In special cases== In the special case in which all the agents' budgets and all tasks' costs are equal to 1, this problem reduces to the assignment problem. When the costs and profits of all tasks do not vary between different agents, this problem reduces to the multiple knapsack problem. If there is a single agent, then, this problem reduces to the knapsack problem. ==Explanation of definition== In the following, we have n kinds of items, a_1 through a_n and m kinds of bins b_1 through b_m. Each bin b_i is associated with a budget t_i. For a bin b_i, each item a_j has a profit p_{ij} and a weight w_{ij}. A solution is an assignment from items to bins. A feasible solution is a solution in which for each bin b_i the total weight of assigned items is at most t_i. The solution's profit is the sum of profits for each item-bin assignment. The goal is to find a maximum profit feasible solution. Mathematically the generalized assignment problem can be formulated as an integer program: : \\begin{align} \\text{maximize } & \\sum_{i=1}^m\\sum_{j=1}^n p_{ij} x_{ij}. \\\\\\ \\text{subject to } & \\sum_{j=1}^n w_{ij} x_{ij} \\le t_i & & i=1, \\ldots, m; \\\\\\ & \\sum_{i=1}^m x_{ij} = 1 & & j=1, \\ldots, n; \\\\\\ & x_{ij} \\in \\\\{0,1\\\\} & & i=1, \\ldots, m, \\quad j=1, \\ldots, n; \\end{align} == Complexity == The generalized assignment problem is NP-hard,. However, there are linear-programming relaxations which give a (1 - 1/e)-approximation. ==Greedy approximation algorithm== For the problem variant in which not every item must be assigned to a bin, there is a family of algorithms for solving the GAP by using a combinatorial translation of any algorithm for the knapsack problem into an approximation algorithm for the GAP. Using any \\alpha- approximation algorithm ALG for the knapsack problem, it is possible to construct a (\\alpha + 1)-approximation for the generalized assignment problem in a greedy manner using a residual profit concept. The algorithm constructs a schedule in iterations, where during iteration j a tentative selection of items to bin b_j is selected. The selection for bin b_j might change as items might be reselected in a later iteration for other bins. The residual profit of an item x_i for bin b_j is p_{ij} if x_i is not selected for any other bin or p_{ij} \u2013 p_{ik} if x_i is selected for bin b_k. Formally: We use a vector T to indicate the tentative schedule during the algorithm. Specifically, T[i]=j means the item x_i is scheduled on bin b_j and T[i]=-1 means that item x_i is not scheduled. The residual profit in iteration j is denoted by P_j, where P_j[i]=p_{ij} if item x_i is not scheduled (i.e. T[i]=-1) and P_j[i]=p_{ij}-p_{ik} if item x_i is scheduled on bin b_k (i.e. T[i]=k). Formally: : Set T[i]=-1 \\text{ for } i = 1\\ldots n : For j=1,\\ldots,m do: :: Call ALG to find a solution to bin b_j using the residual profit function P_j. Denote the selected items by S_j. :: Update T using S_j, i.e., T[i]=j for all i \\in S_j. ==See also== * Assignment problem ==References== ==Further reading== ==External links== Category:NP-complete problems Category:Combinatorial optimization ",
    "title": "Generalized assignment problem"
}