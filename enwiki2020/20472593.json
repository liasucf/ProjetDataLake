{
    "id": "20472593",
    "text": "In computer science, an event (also called event semaphore) is a type of synchronization mechanism that is used to indicate to waiting processes when a particular condition has become true. An event is an abstract data type with a boolean state and the following operations: * wait - when executed, causes the suspension of the executing process until the state of the event is set to true. If the state is already set to true before wait was called, wait has no effect. * set - sets the event's state to true, release all waiting processes. * clear - sets the event's state to false. Different implementations of events may provide different subsets of these possible operations; for example, the implementation provided by Microsoft Windows provides the operations wait (WaitForObject and related functions), set (SetEvent), and clear (ResetEvent). An option that may be specified during creation of the event object changes the behaviour of SetEvent so that only a single thread is released and the state is automatically returned to false after that thread is released. Events short of reset function, that is, those which can be completed only once, are known as futures.500 lines or less, \"A Web Crawler With asyncio Coroutines\" by A. Jesse Jiryu Davis and Guido van Rossum says \"implementation uses an asyncio.Event in place of the Future shown here. The difference is an Event can be reset, whereas a Future cannot transition from resolved back to pending.\" Monitors are, on the other hand, more general since they combine completion signaling with mutex and do not let the producer and consumer to execute simultaneously in the monitor making it an event+critical section. ==References== == External links == * Event Objects, Microsoft Developer Network * Thread Synchronization Mechanisms in Python Category:Concurrency control Synchronization primitive ",
    "title": "Event (synchronization primitive)"
}