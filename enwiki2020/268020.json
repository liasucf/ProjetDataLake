{
    "id": "268020",
    "text": "In computer science, evolutionary computation is a family of algorithms for global optimization inspired by biological evolution, and the subfield of artificial intelligence and soft computing studying these algorithms. In technical terms, they are a family of population-based trial and error problem solvers with a metaheuristic or stochastic optimization character. In evolutionary computation, an initial set of candidate solutions is generated and iteratively updated. Each new generation is produced by stochastically removing less desired solutions, and introducing small random changes. In biological terminology, a population of solutions is subjected to natural selection (or artificial selection) and mutation. As a result, the population will gradually evolve to increase in fitness, in this case the chosen fitness function of the algorithm. Evolutionary computation techniques can produce highly optimized solutions in a wide range of problem settings, making them popular in computer science. Many variants and extensions exist, suited to more specific families of problems and data structures. Evolutionary computation is also sometimes used in evolutionary biology as an in silico experimental procedure to study common aspects of general evolutionary processes. == History == The use of evolutionary principles for automated problem solving originated in the 1950s. It was not until the 1960s that three distinct interpretations of this idea started to be developed in three different places. Evolutionary programming was introduced by Lawrence J. Fogel in the US, while John Henry Holland called his method a genetic algorithm. In Germany Ingo Rechenberg and Hans-Paul Schwefel introduced evolution strategies. These areas developed separately for about 15 years. From the early nineties on they are unified as different representatives (\"dialects\") of one technology, called evolutionary computing. Also in the early nineties, a fourth stream following the general ideas had emerged \u2013 genetic programming. Since the 1990s, nature-inspired algorithms are becoming an increasingly significant part of the evolutionary computation. These terminologies denote the field of evolutionary computing and consider evolutionary programming, evolution strategies, genetic algorithms, and genetic programming as sub- areas. Simulations of evolution using evolutionary algorithms and artificial life started with the work of Nils Aall Barricelli in the 1960s, and was extended by Alex Fraser, who published a series of papers on simulation of artificial selection. Artificial evolution became a widely recognised optimisation method as a result of the work of Ingo Rechenberg in the 1960s and early 1970s, who used evolution strategies to solve complex engineering problems. Genetic algorithms in particular became popular through the writing of John Holland. As academic interest grew, dramatic increases in the power of computers allowed practical applications, including the automatic evolution of computer programs. Evolutionary algorithms are now used to solve multi- dimensional problems more efficiently than software produced by human designers, and also to optimise the design of systems.G. C. Onwubolu and B V Babu, == Techniques == Evolutionary computing techniques mostly involve metaheuristic optimization algorithms. Broadly speaking, the field includes: *Ant colony optimization *Artificial immune systems *Artificial life (also see digital organism) *Cultural algorithms *Differential evolution *Dual-phase evolution *Estimation of distribution algorithms *Evolutionary algorithms *Evolutionary programming *Evolution strategy *Gene expression programming *Genetic algorithm *Genetic programming *Grammatical evolution *Learnable evolution model *Learning classifier systems *Memetic algorithms *Neuroevolution *Particle swarm optimization *Self-organization such as self- organizing maps, competitive learning *Swarm intelligence == Evolutionary algorithms == Evolutionary algorithms form a subset of evolutionary computation in that they generally only involve techniques implementing mechanisms inspired by biological evolution such as reproduction, mutation, recombination, natural selection and survival of the fittest. Candidate solutions to the optimization problem play the role of individuals in a population, and the cost function determines the environment within which the solutions \"live\" (see also fitness function). Evolution of the population then takes place after the repeated application of the above operators. In this process, there are two main forces that form the basis of evolutionary systems: Recombination mutation and crossover create the necessary diversity and thereby facilitate novelty, while selection acts as a force increasing quality. Many aspects of such an evolutionary process are stochastic. Changed pieces of information due to recombination and mutation are randomly chosen. On the other hand, selection operators can be either deterministic, or stochastic. In the latter case, individuals with a higher fitness have a higher chance to be selected than individuals with a lower fitness, but typically even the weak individuals have a chance to become a parent or to survive. == Evolutionary algorithms and biology == Genetic algorithms deliver methods to model biological systems and systems biology that are linked to the theory of dynamical systems, since they are used to predict the future states of the system. This is just a vivid (but perhaps misleading) way of drawing attention to the orderly, well-controlled and highly structured character of development in biology. However, the use of algorithms and informatics, in particular of computational theory, beyond the analogy to dynamical systems, is also relevant to understand evolution itself. This view has the merit of recognizing that there is no central control of development; organisms develop as a result of local interactions within and between cells. The most promising ideas about program-development parallels seem to us to be ones that point to an apparently close analogy between processes within cells, and the low-level operation of modern computers. Thus, biological systems are like computational machines that process input information to compute next states, such that biological systems are closer to a computation than classical dynamical system. Furthermore, following concepts from computational theory, micro processes in biological organisms are fundamentally incomplete and undecidable (completeness (logic)), implying that \u201cthere is more than a crude metaphor behind the analogy between cells and computers. The analogy to computation extends also to the relationship between inheritance systems and biological structure, which is often thought to reveal one of the most pressing problems in explaining the origins of life. Evolutionary automata, a generalization of Evolutionary Turing machines, have been introduced in order to investigate more precisely properties of biological and evolutionary computation. In particular, they allow to obtain new results on expressiveness of evolutionary computation. This confirms the initial result about undecidability of natural evolution and evolutionary algorithms and processes. Evolutionary finite automata, the simplest subclass of Evolutionary automata working in terminal mode can accept arbitrary languages over a given alphabet, including non- recursively enumerable (e.g., diagonalization language) and recursively enumerable but not recursive languages (e.g., language of the universal Turing machine). == Notable practitioners == The list of active researchers is naturally dynamic and non-exhaustive. A network analysis of the community was published in 2007. * Kalyanmoy Deb * Kenneth A De Jong * Peter J. Fleming * David B. Fogel * Stephanie Forrest * David E. Goldberg * John Henry Holland * Theo Jansen * John Koza * Zbigniew Michalewicz * Melanie Mitchell * Peter Nordin * Riccardo Poli * Ingo Rechenberg * Hans-Paul Schwefel == Conferences == The main conferences in the evolutionary computation area include * ACM Genetic and Evolutionary Computation Conference (GECCO), * IEEE Congress on Evolutionary Computation (CEC), * EvoStar, which comprises four conferences: EuroGP, EvoApplications, EvoCOP and EvoMUSART, * Parallel Problem Solving from Nature (PPSN). == See also == * Adaptive dimensional search * Artificial development * Autoconstructive * Developmental biology * Digital organism * Estimation of distribution algorithm * Evolutionary robotics * Evolved antenna * Fitness approximation * Fitness function * Fitness landscape * Genetic operators * Grammatical evolution * Human-based evolutionary computation * Inferential programming * Interactive evolutionary computation * List of digital organism simulators * Mutation testing * No free lunch in search and optimization * Program synthesis * Test functions for optimization * Universal Darwinism == External links == *Article in the Stanford Encyclopedia of Philosophy about Biological Information (English) == Bibliography == * Th. B\u00e4ck, D.B. Fogel, and Z. Michalewicz (Editors), Handbook of Evolutionary Computation, 1997, * Th. B\u00e4ck and H.-P. Schwefel. An overview of evolutionary algorithms for parameter optimization. Evolutionary Computation, 1(1):1\u201323, 1993. * W. Banzhaf, P. Nordin, R.E. Keller, and F.D. Francone. Genetic Programming \u2014 An Introduction. Morgan Kaufmann, 1998. * S. Cagnoni, et al., Real-World Applications of Evolutionary Computing, Springer-Verlag Lecture Notes in Computer Science, Berlin, 2000. * R. Chiong, Th. Weise, Z. Michalewicz (Editors), Variants of Evolutionary Algorithms for Real-World Applications, Springer, 2012, * K. A. De Jong, Evolutionary computation: a unified approach. MIT Press, Cambridge MA, 2006 * A. E. Eiben and J.E. Smith, From evolutionary computation to the evolution of things, Nature, 521:476-482, doi:10.1038/nature14544, 2015 * A. E. Eiben and J.E. Smith, Introduction to Evolutionary Computing, Springer, First edition, 2003; Second edition, 2015 * D. B. Fogel. Evolutionary Computation. Toward a New Philosophy of Machine Intelligence. IEEE Press, Piscataway, NJ, 1995. * L. J. Fogel, A. J. Owens, and M. J. Walsh. Artificial Intelligence through Simulated Evolution. New York: John Wiley, 1966. * D. E. Goldberg. Genetic algorithms in search, optimization and machine learning. Addison Wesley, 1989. * J. H. Holland. Adaptation in natural and artificial systems. University of Michigan Press, Ann Arbor, 1975. * P. Hingston, L. Barone, and Z. Michalewicz (Editors), Design by Evolution, Natural Computing Series, 2008, Springer, * J. R. Koza. Genetic Programming: On the Programming of Computers by means of Natural Evolution. MIT Press, Massachusetts, 1992. * F.J. Lobo, C.F. Lima, Z. Michalewicz (Editors), Parameter Setting in Evolutionary Algorithms, Springer, 2010, * Z. Michalewicz, Genetic Algorithms + Data Structures \u2013 Evolution Programs, 1996, Springer, * Z. Michalewicz and D.B. Fogel, How to Solve It: Modern Heuristics, Springer, 2004, * I. Rechenberg. Evolutionstrategie: Optimierung Technischer Systeme nach Prinzipien des Biologischen Evolution. Fromman-Hozlboog Verlag, Stuttgart, 1973. * H.-P. Schwefel. Numerical Optimization of Computer Models. John Wiley & Sons, New-York, 1981. 1995 \u2013 2nd edition. * D. Simon. Evolutionary Optimization Algorithms. Wiley, 2013. * * == References == Category:Evolution ",
    "title": "Evolutionary computation"
}