{
    "id": "1427921",
    "text": "Rounded magnet icon used on The Pirate Bay Magnet is a URI scheme that defines the format of magnet links, a de facto standard for identifying files (URN) by their content, via cryptographic hash value rather than by their location. Although magnet links can be used in a number of contexts, they are particularly useful in peer-to-peer file sharing networks because they allow resources to be referred to without the need for a continuously available host, and can be generated by anyone who already has the file, without the need for a central authority to issue them. This makes them popular for use as \"guaranteed\" search terms within the file sharing community where anyone can distribute a magnet link to ensure that the resource retrieved by that link is the one intended, regardless of how it is retrieved. == History == The standard for Magnet URIs was developed by Bitzi in 2002, partly as a \"vendor- and project-neutral generalization\" of the `ed2k:` and `freenet:` URI schemes used by eDonkey2000 and Freenet, respectively, and attempts to follow official IETF URI standards as closely as possible. BitTorrent introduced the `btmh:` protocol in 2020 as apart of its BitTorrent v2 changes. == Format == Magnet URIs consist of a series of one or more parameters, the order of which is not significant, formatted in the same way as query strings that ordinarily terminate HTTP URLs. The most common parameter is \"xt\" (\"exact topic\"), which is generally a URN formed from the content hash of a particular file, e.g.: `magnet:?xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a` This refers to the hex-encoded SHA-1 hash (btih, \"BitTorrent info-hash\") of the torrent file info section in question. Note that, although a particular file is indicated, an availability search for it must still be carried out by the client application. === Parameters === The following parameters are supported: {| class=\"wikitable\" !Parameter !Name !Description |- |dn |Display Name |A filename to display to the user, for convenience. |- |xl |eXact Length |Size (in bytes) |- |xt |eXact Topic |URN containing file hash. This is the most crucial part of the magnet link, and is used to find and verify the specified file. The URN is specific to the protocol, so a file hash URN under btih (BitTorrent) would be completely different than the file hash URN for ed2k : `xt=urn:btih:c12fe1c06bba254a9dc9f519b335aa7c1367a88a` |- |ws |Web Seed |The payload data served over HTTP(S) |- |as |Acceptable Source |Refers to a direct download from a web server. Regarded as only a fall-back source in case a client is unable to locate and/or download the linked-to file in its supported P2P network(s) :`as=[web link to file(URL encoded)]` |- |xs |eXact Source |Either an HTTP (or HTTPS, FTP, FTPS, etc.) download source for the file pointed to by the Magnet link, the address of a P2P source for the file or the address of a hub (in the case of DC++), by which a client tries to connect directly, asking for the file and/or its sources. This field is commonly used by P2P clients to store the source, and may include the file hash. : `xs=http://[Client Address]:[Port of client]/uri-res/N2R?[ URN containing a file hash ]` : `xs=http://192.0.2.27:6346/uri- res/N2R?urn:sha1:FINYVGHENTHSMNDSQQYDNLPONVBZTICF` |- |kt |Keyword Topic |Specifies a string of search keywords to search for in P2P networks, rather than a particular file :`kt=martin+luther+king+mp3` |- |mt |Manifest Topic |Link to the metafile that contains a list of magneto (MAGMA MAGnet MAnifest); ie. a link to a list of links :`mt=http://example.org/all-my-favorites.rss` :`mt=urn:sha1:3I42H3S6NNFQ2MSVX7XZKYAYSCX5QBYJ` |- |tr |address TRacker |Tracker URL; used to obtain resources for BitTorrent downloads without a need for DHT support. The value must be URL encoded. :`tr=http%3A%2F%2Fexample.org%2Fannounce` |} The standard also allows for application-specific experimental parameters, which must begin with \"x.\" === xt exact topic === The xt parameter specifies the URN for a given p2p protocol. Its purpose is to provide a search parameter for finding the metadata to the torrent. This effectively acts as a replacement to a .torrent file, which itself contains the torrent metadata, by instead searching the p2p network (using the URN) for that metadata. Each protocol handles a URN uniquely; for example, xt=urn:btih:FFC7E738EAA4CD4ECF51EC6FD669C6CDE2C281A8 uses the btih (BitTorrent v1 protocol), so a BitTorrent client can take the hash and lookup the torrent's metadata in the BitTorrent DHT. In the case of DHT the client searches through a set of pre-known nodes and requests the metadata for an infohash; those nodes will make the same request to other known nodes until eventually a swarm is found and returned. xt also allows for a group setting. Multiple files can be included by adding a count number preceded by a dot (\".\") to each link parameter. :`magnet:?xt.1=[ URN of the first file]&xt.2;=[ URN of the second file]` ; Tiger Tree Hash (TTH): These hashes are used on Direct Connect and G2 (Gnutella2), among others. :`xt=urn:tree:tiger:[ TTH Hash (Base32) ]` ; Secure Hash Algorithm 1 (SHA-1): These hash sums are used on gnutella and G2 (Gnutella2). :`xt=urn:sha1:[ SHA-1 Hash (Base32) ]` ; BitPrint: Such hash sums consist of an SHA-1 Hash, followed by a TTH Hash, delimited by a point; they are used on gnutella and G2 (Gnutella2). :`xt=urn:bitprint:[ SHA-1 Hash (Base32) ].[ TTH Hash (Base32) ]` ; ED2K (eDonkey2000) hash: These hash sums are used on eDonkey2000. :`xt=urn:ed2k:[ ED2K Hash (Hex) ]` ; Advanced Intelligent Corruption Handler (AICH): Not formal URNs for Magnet links, such hash sums are used by eDonkey2000 to restore and control the integrity of downloading and already downloaded files. :`xt=urn:aich:[ aich Hash (Base32) ]` ; Kazaa hash: Used on FastTrack, these hash sums are vulnerable to hash collision attacks. :`xt=urn:kzhash:[ Kazaa Hash (Hex) ]` ; BitTorrent info hash (BTIH): These are hex-encoded SHA-1 hash sums of the \"info\" sections of BitTorrent metafiles as used by BitTorrent to identify downloadable files or sets of files. For backwards compatibility with existing links, clients should also support the Base32 encoded version of the hash.BEP-9: Extension for Peers to Send Metadata Files :`xt=urn:btih:[ BitTorrent Info Hash (Hex) ]` Some clients require Base32 of info_hash (e.g., Vuze). ; Message Digest 5 (MD5): Supported by G2 (Gnutella2), such hashes are vulnerable to hash collision attacks. :`xt=urn:md5:[ MD5 Hash (Hex) ]` === Web links to the file === There are two types of download links that a Magnet link can include as a direct or backup source. ; \"as\" (\"acceptable source\"): Most clients treat \"as\" as equal to the \"xs\" token when it comes to priority, and ignore the timeout before contacting \"as\" sources denoted by the specs. ; Content-Addressable Web URL: This type of -based link is used by gnutella as well as G2 applications. :`xs=http://[Client Address]:[Port of client]/uri-res/N2R?[ URN containing a file hash ]` :`xs=http://192.0.2.27:6346/uri- res/N2R?urn:sha1:FINYVGHENTHSMNDSQQYDNLPONVBZTICF` ;Link to a DirectConnect hub to find sources for a file: This type of link connects a DirectConnect client immediately to the hub in question. :`xs=dchub://[hub address]:[hub port]` ;Reference to a web-based source cache for a file on Gnutella2: In this case, the included link points, not to a client IP or direct source, but to a source cache which stores the IPs of other clients contacting it to download the same file. Once a client connects to the cache, it is served IPs for alternate sources, while its own IP is stored within the cache and forwarded to the next one connecting to the cache. This system operates similar to a BitTorrent tracker. :`xs=http://cache.freebase.be/[ SHA-1 hash ]` ;Reference to an eD2k source :`xs=ed2kftp://[client address]:[client port]/[ed2k hash]/[file size]/` === Supplement format (x.) === For experimental and self- complementing informal options, the prefix followed by a chosen suffix letter can be used. These names are guaranteed to never be standardized. :`x.[name of the new parameter]=[data of the new parameter (URL encoded)]` == Clients == {|Class = \"wikitable\" |- ! Client ! dn ! xl ! xt ! tr ! xs ! as ! kt ! mt |- | AMule | | | `urn:ed2k:` | | | | | |- | ApexDC++ | | | `urn:bitprint:` `urn:tree:tiger:` | | | | | |- | BitComet | | | `urn:btih:` | | | | | |- | Bitflu | | | `urn:btih:` | | | | | |- | Deluge | | | `urn:btih:` | | | | | |- | FlylinkDC++ | | | `urn:bitprint:` `urn:tree:tiger:` | | | | | |- | gtk-gnutella | | | `urn:sha1:` | | push: | | | |- | KTorrent | | | `urn:btih:` | | | | | |- | LimeWire | | | `urn:sha1:` | | urn:guid: | | | |- | MonoTorrent | | | `urn:btih:` | | | | | |- | \u03bcTorrent | | | `urn:btih:` | | | | | |- | qBittorrent | | | `urn:btih:` | | | | | |- | Shareaza | | | `urn:bitprint:` `urn:btih:` `urn:ed2k:` `urn:md5:` `urn:sha1:` `urn:tree:tiger: ` | Since v2.5.1.0 | ftp: | ftp: (Same priority as xs) | | |- | Tixati | | | `urn:btih:` | | | | | |- | Transmission | | | `urn:btih:` | | | | | |- | Vuze | | | `urn:btih:` `urn:sha1:` | | | | | |} == See also == * BitTorrent * Peer-to-peer * Burnbit * ed2k URI scheme * Metalink * Named data networking * InterPlanetary File System == Notes == == References == == External links == * , an early definition of the format (last update 2002) * CHK Freeware Checksum Utility with SHA1-Base32 and ED2K support * , an open source command-line tool, which can calculate Magnet links Category:File sharing Category:URI schemes ",
    "title": "Magnet URI scheme"
}