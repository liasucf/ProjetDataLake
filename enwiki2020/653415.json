{
    "id": "653415",
    "text": "In the theory of computation, a generalized nondeterministic finite automaton (GNFA), also known as an expression automaton or a generalized nondeterministic finite state machine, is a variation of a nondeterministic finite automaton (NFA) where each transition is labeled with any regular expression. The GNFA reads blocks of symbols from the input which constitute a string as defined by the regular expression on the transition. There are several differences between a standard finite state machine and a generalized nondeterministic finite state machine. A GNFA must have only one start state and one accept state, and these cannot be the same state, whereas a NFA or DFA both may have several accept states, and the start state can be an accept state. A GNFA must have only one transition between any two states, whereas a NFA or DFA both allow for numerous transitions between states. In a GNFA, a state has a single transition to every state in the machine, although often it is a convention to ignore the transitions that are labelled with the empty set when drawing generalized nondeterministic finite state machines. ==Formal definition== A GNFA can be defined as a 5-tuple, (S, \u03a3, T, s, a), consisting of * a finite set of states (S); * a finite set called the alphabet (\u03a3); * a transition function (T : (S \u2216 {a}) \u00d7 (S \u2216 {s}) \u2192 R); * a start state (s \u2208 S); * an accept state (a \u2208 S); where R is the collection of all regular expressions over the alphabet \u03a3. The transition function takes as its argument a pair of two states and outputs a regular expression (the label of the transition). This differs from other finite state machines, which take as input a single state and an input from the alphabet (or the empty string in the case of nondeterministic finite state machines) and outputs the next state (or the set of possible states in the case of nondeterministic finite state machines). A DFA or NFA can easily be converted into a GNFA and then the GNFA can be easily converted into a regular expression by repeatedly collapsing parts of it to single edges until S = {s, a}. Similarly, GNFAs can be reduced to NFAs by changing regular expression operators into new edges until each edge is labelled with a regular expression matching a single string of length at most 1. NFAs, in turn, can be reduced to DFAs using the powerset construction. This shows that GNFAs recognize the same set of formal languages as DFAs and NFAs. ==References== * Yo-Sub Han and Derick Wood. \"The Generalization of Generalized Automata: Expression Automata.\" In: 9th International Conference on Implementation and Application of Automata, CIAA 2004, Kingston, Canada, July 22\u201324, 2004, Revised Selected Papers, LNCS 3317, pp. 156\u2013166. * Michael Sipser. 2006. Introduction to the Theory of Computation (2nd ed.). International Thomson Publishing. ==External links== * A graphical description of GNFAs and the process of converting an NFA to a regular expression using GNFAs, can be found at Category:Finite automata ",
    "title": "Generalized nondeterministic finite automaton"
}