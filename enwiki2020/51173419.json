{
    "id": "51173419",
    "text": "This is a chronologically ordered list of metaphor-based metaheuristics and swarm intelligence algorithms. == Algorithms == === Simulated annealing (Kirkpatrick et al. 1983) === Simulated annealing (SA) is a probabilistic technique inspired by a heat treatment method in metallurgy. It is often used when the search space is discrete (e.g., all tours that visit a given set of cities). For problems where finding the precise global optimum is less important than finding an acceptable local optimum in a fixed amount of time, simulated annealing may be preferable to alternatives such as gradient descent. Simulated annealing interprets slow cooling as a slow decrease in the probability of accepting worse solutions as it explores the solution space. Accepting worse solutions is a fundamental property of metaheuristics because it allows for a more extensive search for the optimal solution. === Ant colony optimization (Dorigo, 1992) === The ant colony optimization algorithm (ACO) is a probabilistic technique for solving computational problems which can be reduced to finding good paths through graphs. Initially proposed by Marco Dorigo in 1992 in his PhD thesis,M. Dorigo, Optimization, Learning and Natural Algorithms, PhD thesis, Politecnico di Milano, Italy, 1992. the first algorithm was aiming to search for an optimal path in a graph, based on the behavior of ants seeking a path between their colony and a source of food. The original idea has since diversified to solve a wider class of numerical problems, and as a result, several problems have emerged, drawing on various aspects of the behavior of ants. From a broader perspective, ACO performs a model-based search and shares some similarities with Estimation of Distribution Algorithms. === Particle swarm optimization (Kennedy & Eberhart 1995) === Particle swarm optimization (PSO) is a computational method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. It solves a problem by having a population of candidate solutions, here dubbed particles, and moving these particles around in the search-space according to simple mathematical formulae over the particle's position and velocity. Each particle's movement is influenced by its local best known position, but is also guided toward the best known positions in the search-space, which are updated as better positions are found by other particles. This is expected to move the swarm toward the best solutions. PSO is originally attributed to Kennedy, Eberhart and Shi and was first intended for simulating social behaviour, as a stylized representation of the movement of organisms in a bird flock or fish school. The algorithm was simplified and it was observed to be performing optimization. The book by Kennedy and Eberhart describes many philosophical aspects of PSO and swarm intelligence. An extensive survey of PSO applications is made by Poli. Recently, a comprehensive review on theoretical and experimental works on PSO has been published by Bonyadi and Michalewicz. === Harmony search (Geem, Kim & Loganathan 2001) === Harmony search is a phenomenon-mimicking metaheuristic introduced in 2001 by Zong Woo Geem, Joong Hoon Kim, and G. V. Loganathan. Harmony search is inspired by the improvisation process of jazz musicians. A paper claimed that harmony search is proven to be a special case of the Evolution Strategies algorithm. However, a recent paper argues that the structure of Evolution Strategies is different from that of harmony search. Also, a programming code was provided for showing how HS to solve Sudoku. The Harmony search (HS) is a relatively simple yet very efficient evolutionary algorithm. In HS algorithm a bunch/group of solutions is randomly generated (Called Harmony memory). A new solution is generated by using all the solutions in the Harmony memory (rather than just two as used in GA) and if this new solution is better than the Worst solution in Harmony memory, the Worst solution gets replaced by this new solution. Although HS is a relatively new meta heuristic algorithm, its effectiveness and advantages have been demonstrated in various applications like design of municipal water distribution networks, structural design, traffic routing, load dispatch problem in electrical engineering, multi objective optimization, rostering problems, clustering, classification and feature selection to name a few. A detailed survey on applications of HS can be found in and applications of HS in data mining can be found in . ===Artificial bee colony algorithm (Karaboga 2005)=== Artificial bee colony algorithm is a meta-heuristic algorithm introduced by Karaboga in 2005, and simulates the foraging behaviour of honey bees. The ABC algorithm has three phases: employed bee, onlooker bee and scout bee. In the employed bee and the onlooker bee phases, bees exploit the sources by local searches in the neighbourhood of the solutions selected based on deterministic selection in the employed bee phase and the probabilistic selection in the onlooker bee phase. In the scout bee phase which is an analogy of abandoning exhausted food sources in the foraging process, solutions that are not beneficial anymore for search progress are abandoned, and new solutions are inserted instead of them to explore new regions in the search space. The algorithm has a well-balanced exploration and exploitation ability. === Bees algorithm (Pham 2005) === The bees algorithm in its basic formulation was created by Pham and his co-workers in 2005,Pham DT, Ghanbarzadeh A, Koc E, Otri S, Rahim S and Zaidi M. The Bees Algorithm. Technical Note, Manufacturing Engineering Centre, Cardiff University, UK, 2005. and further refined in the following years. Modelled on the foraging behaviour of honey bees, the algorithm combines global explorative search with local exploitative search. A small number of artificial bees (scouts) explores randomly the solution space (environment) for solutions of high fitness (highly profitable food sources), whilst the bulk of the population search (harvest) the neighbourhood of the fittest solutions looking for the fitness optimum. A deterministics recruitment procedure which simulates the waggle dance of biological bees is used to communicate the scouts' findings to the foragers, and distribute the foragers depending on the fitness of the neighbourhoods selected for local search. Once the search in the neighbourhood of a solution stagnates, the local fitness optimum is considered to be found, and the site is abandoned. In summary, the Bees Algorithm searches concurrently the most promising regions of the solution space, whilst continuously sampling it in search of new favourable regions. === Glowworm swarm optimization (Krishnanand & Ghose 2005) === The glowworm swarm optimization is a swarm intelligence optimization algorithm developed based on the behaviour of glowworms (also known as fireflies or lightning bugs). The GSO algorithm was developed and introduced by K.N. Krishnanand and Debasish Ghose in 2005 at the Guidance, Control, and Decision Systems Laboratory in the Department of Aerospace Engineering at the Indian Institute of Science, Bangalore, India. The behaviour pattern of glowworms which is used for this algorithm is the apparent capability of the glowworms to change the intensity of the luciferin emission and thus appear to glow at different intensities. # The GSO algorithm makes the agents glow at intensities approximately proportional to the function value being optimized. It is assumed that glowworms of brighter intensities attract glowworms that have lower intensity. # The second significant part of the algorithm incorporates a dynamic decision range by which the effect of distant glowworms are discounted when a glowworm has sufficient number of neighbours or the range goes beyond the range of perception of the glowworms. The part 2 of the algorithm makes it different from other evolutionary multimodal optimization algorithms. It is this step that allows glowworm swarms to automatically subdivide into subgroups which can then converge to multiple local optima simultaneously, This property of the algorithm allows it to be used to identify multiple peaks of a multi-modal function and makes it a part of the evolutionary multimodal optimization algorithms family. === Shuffled frog leaping algorithm (Eusuff, Lansey & Pasha 2006) === The shuffled frog leaping algorithm is an optimization algorithm used in artificial intelligence. It is comparable to a genetic algorithm. === Cat Swarm Optimization (Chu, Tsai, and Pan 2006) === The cat swarm optimization algorithm which solves optimization problems and is inspired by the behavior of cats. It is similar to other swarm optimization algorithms such as the Ant Colony Optimization or Particle Swarm Optimization algorithms. Seeking and Tracing, two common behavior of cats, make up the two sub-models of the algorithm. Seeking Mode is inspired by the behavior of a cat at rest, seeking where to move next. In Seeking Mode, it selects several candidate points and then selects one to move to randomly, increasing the probability of choosing points that have a higher fitness value. Tracing Mode is inspired by a cat tracing some target. In this mode, the cat will try to move towards the position with the best fitness value. Cats will continue moving in Seeking and Tracing mode until a terminating condition is met. === Imperialist competitive algorithm (Atashpaz-Gargari & Lucas 2007) === The imperialist competitive algorithm is a computational method that is used to solve optimization problems of different types. Like most of the methods in the area of evolutionary computation, ICA does not need the gradient of the function in its optimization process. From a specific point of view, ICA can be thought of as the social counterpart of genetic algorithms (GAs). ICA is the mathematical model and the computer simulation of human social evolution, while GAs are based on the biological evolution of species. This algorithm starts by generating a set of random candidate solutions in the search space of the optimization problem. The generated random points are called the initial Countries. Countries in this algorithm are the counterpart of Chromosomes in GAs and Particles in Particle Swarm Optimization (PSO) and it is an array of values of a candidate solution of optimization problem. The cost function of the optimization problem determines the power of each country. Based on their power, some of the best initial countries (the countries with the least cost function value), become Imperialists and start taking control of other countries (called colonies) and form the initial Empires. Two main operators of this algorithm are Assimilation and Revolution. Assimilation makes the colonies of each empire get closer to the imperialist state in the space of socio-political characteristics (optimization search space). Revolution brings about sudden random changes in the position of some of the countries in the search space. During assimilation and revolution a colony might reach a better position and has the chance to take the control of the entire empire and replace the current imperialist state of the empire. Imperialistic Competition is another part of this algorithm. All the empires try to win this game and take possession of colonies of other empires. In each step of the algorithm, based on their power, all the empires have a chance to take control of one or more of the colonies of the weakest empire. Algorithm continues with the mentioned steps (Assimilation, Revolution, Competition) until a stop condition is satisfied. The above steps can be summarized as the below pseudocode. 0) Define objective function: f(\\mathbf{x}), \\quad \\mathbf{x}=(x_1,x_2,\\dots,x_d); \\, 1) Initialization of the algorithm. Generate some random solution in the search space and create initial empires. 2) Assimilation: Colonies move towards imperialist states in different in directions. 3) Revolution: Random changes occur in the characteristics of some countries. 4) Position exchange between a colony and Imperialist. A colony with a better position than the imperialist, has the chance to take the control of empire by replacing the existing imperialist. 5) Imperialistic competition: All imperialists compete to take possession of colonies of each other. 6) Eliminate the powerless empires. Weak empires lose their power gradually and they will finally be eliminated. 7) If the stop condition is satisfied, stop, if not go to 2. 8) End === River formation dynamics (Rabanal, Rodr\u00edguez & Rubio 2007) === River formation dynamics is based on imitating how water forms rivers by eroding the ground and depositing sediments (the drops act as the swarm). After drops transform the landscape by increasing/decreasing the altitude of places, solutions are given in the form of paths of decreasing altitudes. Decreasing gradients are constructed, and these gradients are followed by subsequent drops to compose new gradients and reinforce the best ones. This heuristic optimization method was first presented in 2007 by Rabanal et al. The applicability of RFD to other NP- complete problems has been studied, and the algorithm has been applied to fields such as routing and robot navigation. The main applications of RFD can be found at a detailed survey. === Intelligent water drops algorithm (Shah- Hosseini 2007) === Intelligent water drops algorithm contains a few essential elements of natural water drops and actions and reactions that occur between river's bed and the water drops that flow within. The IWD was first introduced for the traveling salesman problem in 2007. Almost every IWD algorithm is composed of two parts: a graph that plays the role of distributed memory on which soils of different edges are preserved, and the moving part of the IWD algorithm, which is a few number of Intelligent water drops. These intelligent water drops (IWDs) both compete and cooperate to find better solutions and by changing soils of the graph, the paths to better solutions become more reachable. It is mentioned that the IWD-based algorithms need at least two IWDs to work. The IWD algorithm has two types of parameters: static and dynamic parameters. Static parameters are constant during the process of the IWD algorithm. Dynamic parameters are reinitialized after each iteration of the IWD algorithm. The pseudo-code of an IWD-based algorithm may be specified in eight steps: :1) Static parameter initialization :: a) Problem representation in the form of a graph :: b) Setting values for static parameters :2) Dynamic parameter initialization: soil and velocity of IWDs :3) Distribution of IWDs on the problem\u2019s graph :4) Solution construction by IWDs along with soil and velocity updating :: a) Local soil updating on the graph :: b) Soil and velocity updating on the IWDs :5) Local search over each IWD\u2019s solution (optional) : 6) Global soil updating : 7) Total-best solution updating : 8) Go to step 2 unless termination condition is satisfied === Gravitational search algorithm (Rashedi, Nezamabadi-pour & Saryazdi 2009) === A gravitational search algorithm is based on the law of gravity and the notion of mass interactions. The GSA algorithm uses the theory of Newtonian physics and its searcher agents are the collection of masses. In GSA, there is an isolated system of masses. Using the gravitational force, every mass in the system can see the situation of other masses. The gravitational force is therefore a way of transferring information between different masses (Rashedi, Nezamabadi-pour and Saryazdi 2009). In GSA, agents are considered as objects and their performance is measured by their masses. All these objects attract each other by a gravity force, and this force causes movement of all objects towards the objects with heavier masses. Heavier masses correspond to better solutions of the problem. The position of the agent corresponds to a solution of the problem, and its mass is determined using a fitness function. By lapse of time, masses are attracted by the heaviest mass, which would ideally present an optimum solution in the search space. The GSA could be considered as an isolated system of masses. It is like a small artificial world of masses obeying the Newtonian laws of gravitation and motion.Rashedi, Nezamabadi-pour and Saryazdi 2009 A multi-objective variant of GSA, called MOGSA, was first proposed by Hassanzadeh et al. in 2010. === Cuckoo search (Yang & Deb 2009) === In operations research, cuckoo search is an optimization algorithm developed by Xin-she Yang and Suash Deb in 2009. It was inspired by the obligate brood parasitism of some cuckoo species by laying their eggs in the nests of other host birds (of other species). Some host birds can engage direct conflict with the intruding cuckoos. For example, if a host bird discovers the eggs are not their own, it will either throw these alien eggs away or simply abandon its nest and build a new nest elsewhere. Some cuckoo species such as the New World brood-parasitic Tapera have evolved in such a way that female parasitic cuckoos are often very specialized in the mimicry in colors and pattern of the eggs of a few chosen host species.R. B. Payne, M. D. Sorenson, and K. Klitz, The Cuckoos, Oxford University Press, (2005). === Bat algorithm (Yang 2010) === Bat algorithm is a swarm-intelligence-based algorithm, inspired by the echolocation behavior of microbats. BA automatically balances exploration (long-range jumps around the global search space to avoid getting stuck around one local maximum) with exploitation (searching in more detail around known good solutions to find local maxima) by controlling loudness and pulse emission rates of simulated bats in the multi- dimensional search space. === Spiral optimization (SPO) algorithm (Tamura & Yasuda 2011,2016-2017) === Spiral optimization (SPO) algorithm The spiral optimization (SPO) algorithm is an uncomplicated search concept inspired by spiral phenomena in nature. The motivation for focusing on spiral phenomena was due to the insight that the dynamics that generate logarithmic spirals share the diversification and intensification behavior. The diversification behavior can work for a global search (exploration) and the intensification behavior enables an intensive search around a current found good solution (exploitation). The SPO algorithm is a multipoint search algorithm that has no objective function gradient, which uses multiple spiral models that can be described as deterministic dynamical systems. As search points follow logarithmic spiral trajectories towards the common center, defined as the current best point, better solutions can be found and the common center can be updated. === Flower pollination algorithm (Yang 2012) === Flower pollination algorithm is a metaheuristic algorithm that was developed by Xin-She Yang, based on the pollination process of flowering plants. This algorithm has 4 rules or assumptions: #Biotic and cross-pollination is considered as a global pollination process with pollen carrying pollinators performing Levy flights. #Abiotic and self-pollination are considered as local pollination. #Flower constancy can be considered as the reproduction probability is proportional to the similarity of two flowers involved. # Local and global pollination are controlled by a switch probability p \\in [0, 1]. Due to the physical proximity and other factors such as wind, local pollination can have a significant fraction q in the overall pollination activities. These rules can be translated into the following updating equations: : x_i^{t+1}=x_i^t + L (x_i^t-g_*) : x_i^{t+1}=x_i^t + \\epsilon (x_i^t-x_k^t) where x_i^t is the solution vector and g_* is the current best found so far during iteration. The switch probability between two equations during iterations is p. In addition, \\epsilon is a random number drawn from a uniform distribution. L is a step size drawn from a L\u00e9vy distribution. L\u00e9vy flights using L\u00e9vy steps is a powerful random walk because both global and local search capabilities can be carried out at the same time. In contrast with standard Random walks, L\u00e9vy flights have occasional long jumps, which enable the algorithm to jump out any local valleys. L\u00e9vy steps obey the following approximation: : L \\sim \\frac{1}{s^{1+\\beta}}, where \\beta is the L\u00e9vy exponent. It may be challenging to draw L\u00e9vy steps properly, and a simple way of generating L\u00e9vy flights s is to use two normal distributions u and v by a transformX. S. Yang, Nature-Inspired Optimization Algorithms, Elsevier, (2014). : s = \\frac{u}{|v|^{1+\\beta}}, with : u \\sim N(0, \\sigma^2), \\quad v \\sim N(0,1), where \\sigma is a function of \\beta. === Cuttlefish optimization algorithm (Eesa, Mohsin, Brifcani & Orman 2013) === The six cases of reflection used by the Cuttlefish The cuttlefish optimization algorithm is a population-based search algorithm inspired by skin color changing behaviour of Cuttlefish which was developed in 2013 It has two global search and two local search. The algorithm considers two main processes: Reflection and Visibility. Reflection process simulates the light reflection mechanism, while visibility simulates the visibility of matching patterns. These two processes are used as a search strategy to find the global optimal solution. The formulation of finding the new solution (newP) by using reflection and visibility is as follows: newP = Reflection + Visibility CFA divide the population into 4 Groups (G1, G2, G3 and G4). For G1 the algorithm applying case 1 and 2 (the interaction between chromatophores and iridophores) to produce a new solutions. These two cases are used as a global search. For G2, the algorithm uses case 3 (Iridophores reflection opaerator) and case 4 (the interaction between Iridophores and chromatophores) to produces a new solutions) as a local search. While for G3 the interaction between the leucophores and chromatophores (case 5) is used to produce solutions around the best solution (local search). Finally for G4, case 6 (reflection operator of leucophores) is used as a global search by reflecting any incoming light as it with out any modification. The main step of CFA is described as follows: 1 Initialize population (P[N]) with random solutions, Assign the values of r1, r2, v1, v2. 2 Evaluate the population and Keep the best solution. 3 Divide population into four groups (G1, G2, G3 and G4). 4 Repeat 4.1 Calculate the average value of the best solution. 4.2 for (each element in G1) generate new solution using Case(1 and 2) 4.3 for (each element in G2) generate new solution using Case(3 and 4) 4.4 for (each element in G3) generate new solution using Case(5) 4.5 for (each element in G4) generate new solution using Case(6) 4.6 Evaluate the new solutions 5\\. Until (stopping criterion is met) 6\\. Return the best solution Equations that are used to calculate reflection and visibility for the four Groups are described below: Case 1 and 2 for G1: Reflection[j] = R*G_{1}[j].Points[j] Visibility[j] = V*(Best.Points[j]-G_{1}[i].Points[j]) Case 3 and 4 for G2: Reflection[j] = R*Best.Points[j] Visibility[j] = V*(Best.Points[j]-G_{2}[i].Points[j]) Case 5 for G3: Reflection[j] = R*Best.Points[j] Visibility[j] = V*(Best.Points[j]-AV_{Best} Case 6 for G4: P[i].Points[j] = random*(upperLimit-lowerLinit)+LowerLimit, i = 1, 2, ..., N; j=1, 2, ..., d Where G_{1}, G_{2} are Group1 and Group2, i presents the i^{th} element in G, j is the j^{th} point of i^{th} element in group G, Best is the best solution and AV_{Best} presents the average value of the Best points. While R and V are two random numbers produced around zero such as between (-1, 1), R represents the degree of reflection, V represents the visibility degree of the final view of the pattern, upperLimit and lowerLimit are the upper limit and the lower limit of the problem domain. === Heterogeneous Distributed Bees Algorithm (Tkach et al., 2013) === The Heterogeneous Distributed Bees Algorithm (HDBA) also known as the Modified Distributed Bees Algorithm (MDBA) is a multi-agent metaheuristic algorithm initially introduced by Tkach and his co-workers in 2013, developed as part of his PhD dissertation. HDBA uses probabilistic technique taking inspiration from the foraging behaviour of bees. It enables to solve combinatorial optimization problems with multiple heterogeneous agents that possess different capabilities and performances. The final decision-making mechanism uses a wheel-selection rule, where each agent has a probability with which it selects a solution. It was first applied for the case of heterogeneous sensors in target recognition problem to improve system performance by correlating sensors\u2019 utility function with the value of their performances. Afterwards, it was successfully applied to other problems, including the problem of allocating police agents to crime incidents and producing near-optimal solutions to the travelling salesman problem. === Cooperative Group Optimization (2014) === Cooperative group optimization (CGO) system is a metaheuristic framework for implementing algorithm instances by integrating the advantages of the cooperative group and low-level algorithm portfolio design. Following the nature-inspired paradigm of a cooperative group, the agents not only explore in a parallel way with their individual memory, but also cooperate with their peers through the group memory. Each agent holds a portfolio of (heterogeneous) embedded search heuristics (ESHs), in which each ESH can drive the group into a stand-alone CGO case, and hybrid CGO cases in an algorithmic space can be defined by low-level cooperative search among an algorithm portfolio (of ESHs) through customized memory sharing. The optimization process might also be facilitated by a passive group leader through encoding knowledge in the search landscape. It has been applied on both numerical and combinatorial optimization problems. === Artificial swarm intelligence (Rosenberg 2014) === Artificial swarm intelligence refers to a real-time closed-loop system of human users connected over the internet and structured in a framework modeled after natural swarms such that it evokes the group's collective wisdom as a unified emergent intelligence. In this way, human swarms can answer questions, make predictions, reach decisions, and solve problems by collectively exploring a diverse set of options and converging on preferred solutions in synchrony. Invented by Dr. Louis Rosenberg in 2014, the ASI methodology has become notable for its ability to make accurate collective predictions that outperform the individual members of the swarm. In 2016 an Artificial Swarm Intelligence from Unanimous A.I. was challenged by a reporter to predict the winners of the Kentucky Derby, and successfully picked the first four horses, in order, beating 540 to 1 odds. === Colliding bodies optimization (Kaveh and Mahdavi 2014) === The Colliding bodies optimization (CBO) algorithm was created by Kaveh and Mahdavi in 2014 based on laws of momentum and energy. This algorithm does not depend on any internal parameter and also it is extremely simple to implement and to use and used in different types of problems in engineering. === Duelist Algorithm (Biyanto 2016) === Duelist algorithm refers to a gene-based optimization algorithm similar to Genetic Algorithms. Duelist Algorithm starts with an initial set of duelists. The duel is to determine the winner and loser. The loser learns from the winner, while the winner try their new skill or technique that may improve their fighting capabilities. A few duelists with highest fighting capabilities are called as champion. The champion train a new duelist such as their capabilities. The new duelist will join the tournament as a representative of each champion. All duelist are re-evaluated, and the duelists with worst fighting capabilities is eliminated to maintain the amount of duelists. === Harris hawks optimization (Heidari et al. 2019) === Harris hawks optimizer (HHO) inspires the hunting strategies of Harris's hawk and escaping patterns of rabbits in nature. === Killer Whale Algorithm (Biyanto 2016) === Killer Whale Algorithm is an algorithm Inspired by the Killer Whale Life. The philosophy of algorithm is the patterns of movement Killer Whale in prey hunting and Killer whale social structure. The novelty of this algorithm is incorporating \"memorize capability\" of Killer Whale in the algorithm. === Rain Water Algorithm (Biyanto 2017) === \"Physical movements of rain drops by utilizing Newton\u2019s Law motion\" was inspired the authors to create this algorithm. Each rain drop represent as random values of optimized variables that it have vary in mass and elevation. It will fall on the ground by following \"the free fall movement\" with velocity is square root of gravity acceleration time elevation. The next movement is \"uniformly accelerated motion\" along the rain drop travel to reach the lowest place on the ground. The lowest place in the ground is an objective function of this algorithm. === Mass and Energy Balances Algorithm (Biyanto 2018) === Mass and Energy Balances is a fundamental \"laws of physics\" states that mass can neither be produced nor destroyed. It is only conserved. Equally fundamental is the law of conservation of energy. Although energy can change in form, it can not be created or destroyed also. The beauty of this algorithm is the capability to reach the global optimum solution by simultaneously work either \"minimize and maximize searching method\". === Hydrological Cycle Algorithm (Wedyan et al. 2017) === A new nature-inspired optimization algorithm called the Hydrological Cycle Algorithm (HCA) is proposed based on the continuous movement of water in nature. In the HCA, a collection of water drops passes through various hydrological water cycle stages, such as flow, evaporation, condensation, and precipitation. Each stage plays an important role in generating solutions and avoiding premature convergence. The HCA shares information by direct and indirect communication among the water drops, which improves solution quality. HCA provides an alternative approach to tackling various types of optimization problems as well as an overall framework for water-based particle algorithms in general. === Emperor Penguins Colony (Harifi et al. 2019) === This algorithm is a new metaheuristic algorithm that inspired by the behavior of emperor penguins that live in Antarctica. EPC is controlled by the body heat radiation of the penguins and their spiral-like movement in their colony. The emperor penguins in the colony seek to create the appropriate heat and regulate their body temperature, and this heat is completely coordinated and controlled by the movement of the penguins. === Momentum Balance Algorithm (MBA) (Biyanto et al. 2019) === Momentum balance is one of three fundamental \"laws of physics\" that states mass, energy and momentum is only conserved. The utilizations of momentum balance have been proposed in many applications. In this research momentum balance was adopted to obtain the perfectly elastic collision. In an ideal, perfectly elastic collision, there is no kinetic energy losses into other forms such as potential energy, heat and noise. The beauty of this algorithm is easy as simple as deterministic optimization algorithms, however the momentum balance algorithm has capability to reach the global optimum solution. === Shuffled Shepherd Optimization Algorithm (SSOA) (Kaveh and Zaerreza 2020) === This method is a new multi-community meta- heuristic optimization algorithm. In this algorithm,The agents are first separated into multi-communities and the optimization process is then performed mimicking the behavior of a shepherd in nature operating on each community. === A mayfly optimization algorithm (MA) (Zervoudakis & Tsafarakis 2020) === The mayfly optimization algorithm was developed to address both continuous and discrete optimization problems and is inspired from the flight behavior and the mating process of mayflies. The processes of nuptial dance and random flight enhance the balance between algorithm\u2019s exploration and exploitation properties and assist its escape from local optima. The performance of the mayfly algorithm is superior to that of other popular metaheuristics like PSO, DE, GA and FA, in terms of convergence rate and convergence speed. === Political Optimizer (PO) (Qamar Askari, Irfan Younas & Mehreen Saeed 2020) === Political Optimizer (PO) is a human social behaviour- based algorithm inspired by a multi-party political system. The source of inspiration is formulated as a set of 5 phases: party formation and constituency allocation, party switching, election campaign, inter-party election, and parliamentary affairs. PO has two unique features: logical division of the population to assign a dual role to each candidate solution and recent-past based position updating strategy (RPPUS). PO demonstrates excellent performance against 15 well-known meta-heuristics for 50 unimodal and multimodal benchmark functions and 4 engineering problems. === Heap-Based Optimizer (HBO) (Qamar Askari, Mehreen Saeed, Irfan Younas 2020) === HBO is a human social-behaviour-based meta-heuristic inspired by the corporate rank hierarchy and interaction among the employees arranged in the hierarchy. The uniqueness of HBO is the utilization of the heap data structure to model the hierarchical arrangement of the employees and the introduction of a parameter (\u03b3) to alternatively incorporate exploration and exploitation. Moreover, three equations derived for three phases of HBO are probabilistically merged to balance exploration and exploitation. HBO demonstrates tremendous performance for 97 benchmarks and 3 mechanical engineering problems. === Forensic-based investigation algorithm (FBI) (JS Chou and NM Nguyen, 2020) === The main motivation for developing a new algorithm is its capacity to effectively and efficiently solve various optimization problems. A novel optimization method, the forensic-based investigation algorithm (FBI), is developed to determine global solutions for continuous nonlinear functions with low computational effort and high accuracy. FBI is inspired by the suspect investigation\u2013location\u2013pursuit process of police officers. Main features of FBI: (1) FBI is a parameter-free optimization algorithm; (2) FBI remarkably outperformed the well-known and newly developed algorithms; (3) FBI has short computational time and rapidly reaches the optimal solutions in solving problems; (4) FBI is effective in solving high-dimensional problems (D=1000); and (5) FBI structure has two teams that well balance exploration and exploitation. Details can be found at: Chou J-S, Nguyen N-M, FBI inspired meta-optimization, Applied Soft Computing, 2020:106339, ISSN 1568-4946, https://doi.org/10.1016/j.asoc.2020.106339 === Jellyfish Search (JS) (JS Chou and DN Truong, 2021) === Visualization of JS for searching the global minimum of a mathematical function. Jellyfish Search (JS) Optimizer is inspired by the behavior of jellyfish in the ocean. The simulation of the search behavior of jellyfish involves their following the ocean current, their motions inside a jellyfish swarm (active motions and passive motions), a time control mechanism for switching among these movements, and their convergences into jellyfish bloom. The new algorithm is successfully tested on benchmark functions and optimization problems. Notably, JS has only two control parameters, which are population size and number of iterations. Therefore, JS is very simple to use, and potentially an excellent metaheuristic algorithm for solving optimization problems. == Criticism of the metaphor methodology == While individual metaphor-inspired metaheuristics have produced remarkably effective solutions to specific problems,Alexander Brownlee and John R. Woodward (2015). \"Why we fell out of love with algorithms inspired by nature\". The Conversation. metaphor-inspired metaheuristics in general have attracted criticism in the research community for hiding their lack of effectiveness or novelty behind an elaborate metaphor.Jerry Swan, Steven Adriaensen, Mohamed Bishr, Edmund K. Burke, John A. Clark, Patrick De Causmaecker, Juanjo Durillo, Kevin Hammond, Emma Hart, Colin G. Johnson, Zoltan A. Kocsis, Ben Kovitz, Krzysztof Krawiec, Simon Martin, J. J. Merelo, Leandro L. Minku, Ender \u00d6zcan, Gisele L. Pappa, Erwin Pesch, Pablo Garc\u00e1a-S\u00e1nchez, Andrea Schaerf, Kevin Sim, Jim E. Smith, Thomas St\u00fctzle, Stefan Vo\u00df, Stefan Wagner, Xin Yao. \"A Research Agenda for Metaheuristic Standardization\". \"Metaphors often inspire new metaheuristics, but without mathematical rigor, it can be hard to tell if a new metaheuristic is really distinct from a familiar one. For example, mathematically, 'Harmony search' turned out to be a simple variant of 'Evolution Strategies' even though the metaphors that inspired them were quite different. Formally describing state, representation, and operators allows genuine novelty to be distinguished from minor variation.\" Kenneth S\u00f6rensen noted that: > In recent years, the field of combinatorial optimization has witnessed a > true tsunami of \"novel\" metaheuristic methods, most of them based on a > metaphor of some natural or man-made process. The behavior of virtually any > species of insects, the flow of water, musicians playing together \u2013 it seems > that no idea is too far-fetched to serve as inspiration to launch yet > another metaheuristic. [I] will argue that this line of research is > threatening to lead the area of metaheuristics away from scientific rigor. S\u00f6rensen and Glover stated that: > A large (and increasing) number of publications focuses on the development > of (supposedly) new metaheuristic frameworks based on metaphors. The list of > natural or man-made processes that has been used as the basis for a > metaheuristic framework now includes such diverse processes as bacterial > foraging, river formation, biogeography, musicians playing together, > electromagnetism, gravity, colonization by an empire, mine blasts, league > championships, clouds, and so forth. An important subcategory is found in > metaheuristics based on animal behavior. Ants, bees, bats, wolves, cats, > fireflies, eagles, dolphins, frogs, salmon, vultures, termites, flies, and > many others, have all been used to inspire a \"novel\" metaheuristic. [...] As > a general rule, publication of papers on metaphor-based metaheuristics has > been limited to second-tier journals and conferences, but some recent > exceptions to this rule can be found. S\u00f6rensen (2013) states that research > in this direction is fundamentally flawed. Most importantly, the author > contends that the novelty of the underlying metaphor does not automatically > render the resulting framework \"novel\". On the contrary, there is increasing > evidence that very few of the metaphor-based methods are new in any > interesting sense. In response, Springer's Journal of Heuristics has updated their editorial policy to state that:Journal of Heuristic Policies on Heuristic Search Research. Springer. > Proposing new paradigms is only acceptable if they contain innovative basic > ideas, such as those that are embedded in classical frameworks like genetic > algorithms, tabu search, and simulated annealing. The Journal of Heuristics > avoids the publication of articles that repackage and embed old ideas in > methods that are claimed to be based on metaphors of natural or manmade > systems and processes. These so-called \"novel\" methods employ analogies that > range from intelligent water drops, musicians playing jazz, imperialist > societies, leapfrogs, kangaroos, all types of swarms and insects and even > mine blast processes (S\u00f6rensen, 2013). If a researcher uses a metaphor to > stimulate his or her own ideas about a new method, the method must > nevertheless be translated into metaphor-free language, so that the > strategies employed can be clearly understood, and their novelty is made > clearly visible. (See items 2 and 3 below.) Metaphors are cheap and easy to > come by. Their use to \"window dress\" a method is not acceptable.\" [...] > Implementations should be explained by employing standard optimization > terminology, where a solution is called a \"solution\" and not something else > related to some obscure metaphor (e.g., harmony, flies, bats, countries, > etc.). [...] The Journal of Heuristics fully endorses S\u00f6rensen\u2019s view that > metaphor-based \u201cnovel\u201d methods should not be published if they cannot > demonstrate a contribution to their field. Renaming existing concepts does > not count as a contribution. Even though these methods are often called > \u201cnovel\u201d, many present no new ideas, except for the occasional marginal > variant of an already existing methodology. These methods should not take > the journal space of truly innovative ideas and research. Since they do not > use the standard optimization vocabulary, they are unnecessarily difficult > to understand. The policy of Springer's journal 4OR - A Quarterly Journal of Operations Research states The emphasis on scientific rigor and on innovation implies, in particular, that the journal does not publish articles that simply propose disguised variants of known methods without adequate validation (e.g., metaheuristics that are claimed to be \"effective\" on the sole basis of metaphorical comparisons with natural or artificial systems and processes). New methods must be presented in metaphor-free language by establishing their relationship with classical paradigms. Their properties must be established on the basis of scientifically compelling arguments: mathematical proofs, controlled experiments, objective comparisons, etc. == See also == * Swarm intelligence#Algorithms == Notes == == References == * * * * == External links == *Evolutionary Computation Bestiary a tongue-in-cheek account of all the weird, even bizarre metaphor-based metaheuristics out there in the wide world of academic publishing *The Science Matrix's List of Metaheuristic a complete list of metaheuristic algorithms. The list can be easily filter by Name, Author or Year, and provides the link to the main publication of each algorithm. ",
    "title": "List of metaphor-based metaheuristics"
}