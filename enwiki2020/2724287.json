{
    "id": "2724287",
    "text": "In mathematics, Machin-like formulae are a popular technique for computing to a large number of digits. They are generalizations of John Machin's formula from 1706: :\\frac{\\pi}{4} = 4 \\arctan \\frac{1}{5} - \\arctan \\frac{1}{239} which he used to compute to 100 decimal places. Machin-like formulas have the form where a_n and b_n are positive integers such that a_n < b_n, c_n is a signed non-zero integer, and c_0 is a positive integer. These formulae are used in conjunction with the Taylor series expansion for arctangent: ==Derivation== The following equations were derived in Angle addition formula: :\\sin(\\alpha + \\beta) = \\sin \\alpha \\cos \\beta + \\cos \\alpha \\sin \\beta :\\cos(\\alpha + \\beta) = \\cos \\alpha \\cos \\beta - \\sin \\alpha \\sin \\beta Algebraic manipulation of these equations yields the following: if -\\frac{\\pi}{2} < \\arctan \\frac{a_1}{b_1} + \\arctan \\frac{a_2}{b_2} < \\frac{\\pi}{2}. All of the Machin-like formulae can be derived by repeated application of equation . As an example, we show the derivation of Machin's original formula: :2 \\arctan \\frac{1}{5} ::= \\arctan \\frac{1}{5} + \\arctan \\frac{1}{5} ::= \\arctan \\frac {1*5 + 1*5}{5*5 - 1*1} ::= \\arctan \\frac {10}{24} ::= \\arctan \\frac {5}{12} :4 \\arctan \\frac{1}{5} ::= 2 \\arctan \\frac{1}{5} + 2 \\arctan \\frac{1}{5} ::= \\arctan \\frac{5}{12} + \\arctan \\frac{5}{12} ::= \\arctan \\frac{5*12 + 5*12}{12*12 - 5*5} ::= \\arctan \\frac{120}{119} :4 \\arctan \\frac{1}{5} - \\frac{\\pi}{4} ::= 4 \\arctan \\frac{1}{5} - \\arctan \\frac{1}{1} ::= 4 \\arctan \\frac{1}{5} + \\arctan \\frac{-1}{1} ::= \\arctan \\frac{120}{119} + \\arctan \\frac{-1}{1} ::= \\arctan \\frac{120*1 + (-1)*119}{119*1 - 120*(-1)} ::= \\arctan \\frac{1}{239} :\\frac{\\pi}{4} = 4 \\arctan \\frac{1}{5} - \\arctan \\frac{1}{239} An insightful way to visualize equation is to picture what happens when two complex numbers are multiplied together: :(b_1 + a_1 i)*(b_2 + a_2 i) ::=b_1 b_2 + a_2 b_1 i + a_1 b_2 i - a_1 a_2 The angle associated with a complex number (b_n + a_n i) is given by: :\\arctan \\frac {a_n}{b_n} Thus, in equation , the angle associated with the product is: :\\arctan \\frac{a_1 b_2 + a_2 b_1}{b_1 b_2 - a_1 a_2} Note that this is the same expression as occurs in equation . Thus equation can be interpreted as saying that the act of multiplying two complex numbers is equivalent to adding their associated angles (see multiplication of complex numbers). The expression: :c_n \\arctan \\frac{a_n}{b_n} is the angle associated with: :(b_n + a_n i)^{c_n} Equation can be re-written as: :k * (1 + i)^{c_0} = \\prod_{n=1}^N (b_n + a_n i)^{c_n} Here k is an arbitrary constant that accounts for the difference in magnitude between the vectors on the two sides of the equation. The magnitudes can be ignored, only the angles are significant. ===Using complex numbers=== Other formulas may be generated using complex numbers. For example, the angle of a complex number (a + bi) is given by \\arctan\\frac{b}{a} and, when one multiplies complex numbers, one adds their angles. If a=b then \\arctan\\frac{b}{a} is 45 degrees or \\frac{\\pi}{4} radians. This means that if the real part and complex part are equal then the arctangent will equal \\frac{\\pi}{4}. Since the arctangent of one has a very slow convergence rate if we find two complex numbers that when multiplied will result in the same real and imaginary part we will have a Machin-like formula. An example is (2 + i) and (3 + i). If we multiply these out we will get (5 + 5i). Therefore, \\arctan\\frac{1}{2} + \\arctan\\frac{1}{3} = \\frac{\\pi}{4}. If you want to use complex numbers to show that \\frac{\\pi}{4} = 4\\arctan\\frac{1}{5} - \\arctan\\frac{1}{239} you first must know that when multiplying angles you put the complex number to the power of the number that you are multiplying by. So (5+i)^4 (-239+i) = -2^2(13^4)(1+i) and since the real part and imaginary part are equal then, 4\\arctan\\frac{1}{5} - \\arctan\\frac{1}{239} = \\frac{\\pi}{4} ==Two-term formulas== In the special case where a_n=1, there are exactly four solutions having only two terms. These are Euler's: :\\frac{\\pi}{4} = \\arctan\\frac{1}{2} + \\arctan\\frac{1}{3} Hermann's: :\\frac{\\pi}{4} = 2 \\arctan\\frac{1}{2} - \\arctan\\frac{1}{7} Hutton's (or Vega's): :\\frac{\\pi}{4} = 2 \\arctan\\frac{1}{3} + \\arctan\\frac{1}{7} and Machin's: :\\frac{\\pi}{4} = 4 \\arctan\\frac{1}{5} - \\arctan\\frac{1}{239} . In the general case, where the value of a_n is not restricted, there are infinitely many other solutions. For example: ===Example=== 300px The adjacent diagram demonstrates the relationship between the arctangents and their areas. From the diagram, we have the following: :\\begin{align} {\\rm area}(PON)&={\\rm area}(MOF)=\\pi\\times\\frac{\\angle MOF}{2\\pi}=\\angle MEF=\\arctan{1\\over2}\\\\\\ {\\rm area}(POM)&={\\rm area}(NOF)=\\arctan{1\\over3}\\\\\\ {\\rm area}(POF)&={\\pi\\over4}=\\arctan{1\\over2}+\\arctan{1\\over3}\\\\\\ {\\rm area}(MON)&=\\arctan{1\\over7}\\\\\\ \\arctan{1\\over2}&=\\arctan{1\\over3}+\\arctan{1\\over7}\\end{align} ==More terms== The 2002 record for digits of , 1,241,100,000,000, was obtained by Yasumasa Kanada of Tokyo University. The calculation was performed on a 64-node Hitachi supercomputer with 1 terabyte of main memory, performing 2 trillion operations per second. The following two equations were both used: : \\frac{\\pi}{4} = 12 \\arctan\\frac{1}{49} + 32 \\arctan\\frac{1}{57} - 5 \\arctan\\frac{1}{239} + 12 \\arctan\\frac{1}{110443} : Kikuo Takano (1982). : \\frac{\\pi}{4} = 44 \\arctan\\frac{1}{57} + 7 \\arctan\\frac{1}{239} - 12 \\arctan\\frac{1}{682} + 24 \\arctan\\frac{1}{12943} :F. C. M. St\u00f6rmer (1896). Two equations are used so that one can check they both give the same result; it is helpful if the equations reuse some but not all of the arctangents because those need only be computed once - note the reuse of 57 and 239 above. Machin-like formulae for pi can be constructed by finding a set of numbers where the prime factorisations of n^2+1 together use no more distinct primes than the number of elements in the set, and then using either linear algebra or the LLL basis- reduction algorithm to construct linear combinations of \\arctan \\frac{1}{n_i}. For example, for the St\u00f8rmer formula above, we have 57^2+1 = 2 * 5^3 * 13 239^2+1 = 2 * 13^4 682^2+1 = 5^3 * 61^2 12943^2+1 = 2 * 5^4 * 13 * 61 so four terms using between them only the primes 2, 5, 13 and 61. The most efficient currently known Machin-like formula pair discovered by Hwang Chien-Lih (\u9ec3\u898b\u5229) (2004) for computing are: : \\begin{align} \\frac{\\pi}{4} =& 36462\\arctan\\frac{1}{390112} + 135908\\arctan\\frac{1}{485298} + 274509\\arctan\\frac{1}{683982}\\\\\\ & \\- 39581\\arctan\\frac{1}{1984933} + 178477\\arctan\\frac{1}{2478328} - 114569\\arctan\\frac{1}{3449051}\\\\\\ & \\- 146571\\arctan\\frac{1}{18975991} + 61914\\arctan\\frac{1}{22709274} - 69044\\arctan\\frac{1}{24208144}\\\\\\ & \\- 89431\\arctan\\frac{1}{201229582} - 43938\\arctan\\frac{1}{2189376182}\\\\\\ \\end{align} : \\begin{align} \\frac{\\pi}{4} =& 36462\\arctan\\frac{1}{51387} + 26522\\arctan\\frac{1}{485298} + 19275\\arctan\\frac{1}{683982}\\\\\\ & \\- 3119\\arctan\\frac{1}{1984933} - 3833\\arctan\\frac{1}{2478328} - 5183\\arctan\\frac{1}{3449051}\\\\\\ & \\- 37185\\arctan\\frac{1}{18975991} - 11010\\arctan\\frac{1}{22709274} + 3880\\arctan\\frac{1}{24208144}\\\\\\ & \\- 16507\\arctan\\frac{1}{201229582} - 7476\\arctan\\frac{1}{2189376182}\\\\\\ \\end{align} You will note that these formulae reuse all the same arctangents after the first one. They are constructed by looking for numbers where n^2+1 is divisible only by primes less than 101. The most efficient currently known Machin-like formulas for computing are: : \\begin{align} \\frac{\\pi}{4} =& 183\\arctan\\frac{1}{239} + 32\\arctan\\frac{1}{1023} - 68\\arctan\\frac{1}{5832}\\\\\\ & \\+ 12\\arctan\\frac{1}{110443} - 12\\arctan\\frac{1}{4841182} - 100\\arctan\\frac{1}{6826318}\\\\\\ \\end{align} :(Hwang Chien-Lih, 1997) where the set of primes is {2, 5, 13, 229, 457, 1201} A further refinement is to use \"Todd's Process\", as described in ; this leads to results such as : \\begin{align} \\frac{\\pi}{4} =& 183\\arctan\\frac{1}{239} + 32\\arctan\\frac{1}{1023} - 68\\arctan\\frac{1}{5832}\\\\\\ & \\+ 12\\arctan\\frac{1}{113021} - 100\\arctan\\frac{1}{6826318}\\\\\\ & \\- 12\\arctan\\frac{1}{33366019650} + 12\\arctan\\frac{1}{43599522992503626068}\\\\\\ \\end{align} :(Hwang Chien-Lih, 2003) where the large prime 834312889110521 appears in n^2+1 for both of the last two indices : \\begin{align} \\frac{\\pi}{4} =& 83\\arctan\\frac{1}{107} + 17\\arctan\\frac{1}{1710} - 22\\arctan\\frac{1}{103697}\\\\\\ & \\- 24\\arctan\\frac{1}{2513489} - 44\\arctan\\frac{1}{18280007883}\\\\\\ & \\+ 12\\arctan\\frac{1}{7939642926390344818}\\\\\\ & \\+ 22\\arctan\\frac{1}{3054211727257704725384731479018}\\\\\\ \\end{align} :(M. Wetherfield, 2004) ==Efficiency== For large computations of pi, the binary splitting algorithm can be used to compute the arctangents much, much more quickly than by adding the terms in the Taylor series naively one at a time. In practical implementations such as y-cruncher, there is a relatively large constant overhead per term plus a time proportional to 1/log(b_n), and a point of diminishing returns appears beyond three or four arctangent terms in the sum; this is why the supercomputer calculation above used only a four-term version. It is not the goal of this section to estimate the actual run time of any given algorithm. Instead, the intention is merely to devise a relative metric by which two algorithms can be compared against each other. Let N_d be the number of digits to which \\pi is to be calculated. Let N_t be the number of terms in the Taylor series (see equation ). Let u_n be the amount of time spent on each digit (for each term in the Taylor series). The Taylor series will converge when: :\\left(\\left(\\frac{b_n}{a_n}\\right)^2\\right)^{N_t} = 10^{N_d} Thus: :N_t = N_d \\quad \\frac{\\ln 10}{2 \\ln \\frac{b_n}{a_n}} For the first term in the Taylor series, all N_d digits must be processed. In the last term of the Taylor series, however, there's only one digit remaining to be processed. In all of the intervening terms, the number of digits to be processed can be approximated by linear interpolation. Thus the total is given by: : \\frac{N_d N_t}{2} The run time is given by: : time = \\frac{u_n N_d N_t}{2} Combining equations, the run time is given by: : time = \\frac{u_n {N_d}^2 \\ln 10}{4 \\ln \\frac{b_n}{a_n}} = \\frac{k u_n}{\\ln \\frac{b_n}{a_n}} Where k is a constant that combines all of the other constants. Since this is a relative metric, the value of k can be ignored. The total time, across all the terms of equation , is given by: :time = \\sum_{n=1}^N \\frac{u_n}{\\ln \\frac{b_n}{a_n}} u_n cannot be modelled accurately without detailed knowledge of the specific software. Regardless, we present one possible model. The software spends most of its time evaluating the Taylor series from equation . The primary loop can be summarized in the following pseudo code: ::1: \\quad term \\quad *= \\quad {a_n}^2 ::2: \\quad term \\quad /= \\quad -{b_n}^2 ::3: \\quad tmp \\quad = \\quad term \\quad / \\quad (2*n+1) ::4: \\quad sum \\quad += \\quad tmp In this particular model, it is assumed that each of these steps takes approximately the same amount of time. Depending on the software used, this may be a very good approximation or it may be a poor one. The unit of time is defined such that one step of the pseudo code corresponds to one unit. To execute the loop, in its entirety, requires four units of time. u_n is defined to be four. Note, however, that if a_n is equal to one, then step one can be skipped. The loop only takes three units of time. u_n is defined to be three. As an example, consider the equation: The following table shows the estimated time for each of the terms: {|class=\"wikitable\" |- ! align=\"center\" | a_n ! align=\"center\" | b_n ! align=\"center\" | \\frac{b_n}{a_n} ! align=\"center\" | \\ln \\frac{b_n}{a_n} ! align=\"center\" | u_n ! align=\"center\" | time |- | align=\"right\" | 74684 | align=\"right\" | 14967113 | align=\"right\" | 200.41 | align=\"right\" | 5.3003 | align=\"center\" | 4 | align=\"right\" | 0.75467 |- | align=\"right\" | 1 | align=\"right\" | 239 | align=\"right\" | 239.00 | align=\"right\" | 5.4765 | align=\"center\" | 3 | align=\"right\" | 0.54780 |- | align=\"right\" | 20138 | align=\"right\" | 15351991 | align=\"right\" | 762.34 | align=\"right\" | 6.6364 | align=\"center\" | 4 | align=\"right\" | 0.60274 |} The total time is 0.75467 + 0.54780 + 0.60274 = 1.9052 Compare this with equation . The following table shows the estimated time for each of the terms: {|class=\"wikitable\" |- ! align=\"center\" | a_n ! align=\"center\" | b_n ! align=\"center\" | \\frac{b_n}{a_n} ! align=\"center\" | \\ln \\frac{b_n}{a_n} ! align=\"center\" | u_n ! align=\"center\" | time |- | align=\"right\" | 24478 | align=\"right\" | 873121 | align=\"right\" | 35.670 | align=\"right\" | 3.5743 | align=\"center\" | 4 | align=\"right\" | 1.1191 |- | align=\"right\" | 685601 | align=\"right\" | 69049993 | align=\"right\" | 100.71 | align=\"right\" | 4.6123 | align=\"center\" | 4 | align=\"right\" | 0.8672 |} The total time is 1.1191 + 0.8672 = 1.9863 The conclusion, based on this particular model, is that equation is slightly faster than equation , regardless of the fact that equation has more terms. This result is typical of the general trend. The dominant factor is the ratio between a_n and b_n. In order to achieve a high ratio, it is necessary to add additional terms. Often, there is a net savings in time. ==References== ==External links== * * The constant \u03c0 * Machin's Merit at MathPages Category:Pi algorithms ",
    "title": "Machin-like formula"
}