{
    "id": "51217375",
    "text": "Ion is a data serialization language developed by Amazon. It may be represented by either a human-readable text form or a compact binary form. The text form is a superset of JSON; thus, any valid JSON document is also a valid Ion document. ==Data types== As a superset of JSON, Ion includes the following data types * : An empty value * : Boolean values * : Unicode text literals * : Ordered heterogeneous collection of Ion values * : Unordered collection of key/value pairs The nebulous JSON 'number' type is strictly defined in Ion to be one of * : Signed integers of arbitrary size * : 64-bit IEEE binary-encoded floating point numbers * : Decimal-encoded real numbers of arbitrary precision Ion adds these types: * : Date/time/time zone moments of arbitrary precision * : Unicode symbolic atoms (aka identifiers) * : Binary data of user-defined encoding * : Text data of user-defined encoding * : Ordered collections of values with application-defined semantics Each Ion type supports a null variant, indicating a lack of value while maintaining a strict type (e.g., , ). The Ion format permits annotations to any value in the form of symbols. Such annotations may be used as metadata for otherwise opaque data (such as a blob). == Implementations == * Amazon supported library implementations * C# * Go Lang * Python * JS ==Examples== ===Sample document=== // comments are allowed in Ion files using the double forward slash { key: \"value\", // key here is a symbol, it can also be a string as in JSON nums: 1_000_000, // equivalent to 1000000, use of underscores with numbers is more readable 'A float value': -31415e-4, // key is a value that contains spaces \"An int value\": null.int, annotated: age::45, // age here is the annotation to number 45 lists : 'hw grades'::[80, 85, 90], // any symbol can be used as an annotation many_annot: I::have::many::annotations::true, // annotations are not nested, but rather, a list of annotations sexp: (this (is a [valid] \"Ion\") last::value 42) // Ion S-expressions, blob_value: , clob_value: } ===Uses=== * Amazon's Quantum Ledger Database (QLDB) stores data in Ion documents. https://www.reddit.com/r/aws/comments/a18awq/we_are_the_amazon_managed_blockchain_and_amazon/ * PartiQL, an open source SQL-based query language also by Amazon, is build upon Ion. PartiQL supported queries are used by QLDB, S3Select. https://aws.amazon.com/blogs/opensource/announcing-partiql-one-query-language- for-all-your-data/ == Tooling and Extensions == * Ion Path Extractor API aims to combine the convenience of a DOM API with the speed of a streaming API. * IDE support ** Eclipse ** IntelliJ * Jackson data format module for Ion * Apache Hive SerDe for Ion * Ion Schema ** Specification ** Implementations * Ion Hash defines an algorithm for constructing a hash for any Ion value. ** Specification ** Implementations ==References== ==External links== * Ion specification * Amazon supported language implementations * Java API documentation * C# implementation Category:Data serialization formats Category:Markup languages ",
    "title": "Ion (serialization format)"
}