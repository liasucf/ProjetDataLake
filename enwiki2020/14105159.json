{
    "id": "14105159",
    "text": "A rapidly exploring random tree (RRT) is an algorithm designed to efficiently search nonconvex, high-dimensional spaces by randomly building a space-filling tree. The tree is constructed incrementally from samples drawn randomly from the search space and is inherently biased to grow towards large unsearched areas of the problem. RRTs were developed by Steven M. LaValle and James J. Kuffner Jr. . They easily handle problems with obstacles and differential constraints (nonholonomic and kinodynamic) and have been widely used in autonomous robotic motion planning. RRTs can be viewed as a technique to generate open-loop trajectories for nonlinear systems with state constraints. An RRT can also be considered as a Monte-Carlo method to bias search into the largest Voronoi regions of a graph in a configuration space. Some variations can even be considered stochastic fractals.http://msl.cs.uiuc.edu/rrt/about.html About RRTs, by Steve LaValle ==Description== An RRT grows a tree rooted at the starting configuration by using random samples from the search space. As each sample is drawn, a connection is attempted between it and the nearest state in the tree. If the connection is feasible (passes entirely through free space and obeys any constraints), this results in the addition of the new state to the tree. With uniform sampling of the search space, the probability of expanding an existing state is proportional to the size of its Voronoi region. As the largest Voronoi regions belong to the states on the frontier of the search, this means that the tree preferentially expands towards large unsearched areas. The length of the connection between the tree and a new state is frequently limited by a growth factor. If the random sample is further from its nearest state in the tree than this limit allows, a new state at the maximum distance from the tree along the line to the random sample is used instead of the random sample itself. The random samples can then be viewed as controlling the direction of the tree growth while the growth factor determines its rate. This maintains the space-filling bias of the RRT while limiting the size of the incremental growth. RRT growth can be biased by increasing the probability of sampling states from a specific area. Most practical implementations of RRTs make use of this to guide the search towards the planning problem goals. This is accomplished by introducing a small probability of sampling the goal to the state sampling procedure. The higher this probability, the more greedily the tree grows towards the goal. ==Algorithm== For a general configuration space C, the algorithm in pseudocode is as follows: Input: Initial configuration qinit, number of vertices in RRT K, incremental distance \u0394q) Output: RRT graph G G.init(qinit) for k = 1 to K do qrand \u2190 RAND_CONF() qnear \u2190 NEAREST_VERTEX(qrand, G) qnew \u2190 NEW_CONF(qnear, qrand, \u0394q) G.add_vertex(qnew) G.add_edge(qnear, qnew) return G In the algorithm above, \"RAND_CONF\" grabs a random configuration qrand in C. This may be replaced with a function \"RAND_FREE_CONF\" that uses samples in Cfree, while rejecting those in Cobs using some collision detection algorithm. \"NEAREST_VERTEX\" is a function that runs through all vertices v in graph G, calculates the distance between qrand and v using some measurement function thereby returning the nearest vertex. \"NEW_CONF\" selects a new configuration qnew by moving an incremental distance \u0394q from qnear in the direction of qrand. (According to Rapidly-Exploring Random Trees: Progress and Prospects (2000), by Steven M. Lavalle , James J. Kuffner , Jr. Algorithmic and Computational Robotics: New Directions, http://eprints.kfupm.edu.sa/60786/1/60786.pdf in holonomic problems, this should be omitted and qrand used instead of qnew.) ==Variants and improvements for motion planning== * Parti-game directed RRTs (PDRRTs),Ranganathan, Ananth; Koenig, Sven. PDRRTs: \"Integrating Graph-Based and Cell-Based Planning\". In Proceedings of the IEEE International Conference on Intelligent Robots and Systems (IROS), pages 2799\u20132808, 2004. a method that combines RRTs with the parti-game methodMoore, A. W.; Atkeson, C. G., \"The parti-game algorithm for variable resolution reinforcement learning in multidimensional state-spaces,\" Machine Learning, vol. 21, no. 3, pages 199\u2013233, 1995. to refine the search where it is needed (for example around obstacles) to be able to plan faster and solve more motion planning problems than RRT * Closed-loop rapidly- exploring random (CL-RRT), an extension of RRT that samples an input to a stable closed-loop system consisting of the vehicle and a controller It has been shown that, under 'mild technical conditions', the cost of the best path in the RRT converges almost surely to a non-optimal value. For that reason, it is desirable to find variants of the RRT that converges to an optimum, like RRT*. Below follows is a list of RRT*-based methods (starting with RRT* itself). Not all of the derived methods do themselves converge to an optimum, though. * Rapidly-exploring random graph (RRG) and RRT*, a variant of RRT that converges towards an optimal solution * RRT*-Smart,Islam, Fahad; Nasir, Jauwairia; Malik, Usman; Ayaz, Yasar; Hasan, Osman; \"RRT*-Smart: Rapid convergence implementation of RRT* towards optimal solution\", in Proceedings of IEEE International Conference on Mechatronics and Automation (ICMA), pages 1651\u20131656, Chengdu, China, August 2012. a method for accelerating the convergence rate of RRT* by using path optimization (in a similar fashion to Theta*) and intelligent sampling (by biasing sampling towards path vertices, which \u2013 after path optimization \u2013 are likely to be close to obstacles) * A*-RRT and A*-RRT*,Brunner, M.; Bruggemann, B.; Schulz, D.. \"Hierarchical rough terrain motion planning using an optimal sampling-based method,\" in Int. Conf. on Robotics and Automation (ICRA), Karlsruhe, Germany, 2013. a two-phase motion planning method that uses a graph search algorithm to search for an initial feasible path in a low-dimensional space (not considering the complete state space) in a first phase, avoiding hazardous areas and preferring low- risk routes, which is then used to focus the RRT* search in the continuous high-dimensional space in a second phase * RRT*FN,Adiyatov, Olzhas; Varol, Huseyin Atakan. \"Rapidly-exploring random tree based memory efficient motion planning\". In Mechatronics and Automation (ICMA), 2013 IEEE International Conference on, pages 354\u2013359, 2013. RRT* with a fixed number of nodes, which randomly removes a leaf node in the tree in every iteration * RRT*-AR,Choudhury, Sanjiban; Scherer, Sebastian; Singh, Sanjiv. \"RRT*-AR: Sampling-based alternate routes planning with applications to autonomous emergency landing of a helicopter\". In Robotics and Automation (ICRA), 2013 IEEE International Conference on, Karlsruhe, 6\u201310 May 2013, pages 3947\u20133952. sampling-based alternate routes planning * Informed RRT*, improves the convergence speed of RRT* by introducing a heuristic, similar to the way in which A* improves upon Dijkstra's algorithm * Real-Time RRT* (RT-RRT*),Naderi, Kourosh; Rajam\u00e4ki, Joose; H\u00e4m\u00e4l\u00e4inen, Perttu (2015). \"RT-RRT*: a real-time path planning algorithm based on RRT*\". In Proceedings of the 8th ACM SIGGRAPH Conference on Motion in Games (MIG '15). ACM, New York, NY, USA, 113\u2013118. DOI=https://dx.doi.org/10.1145/2822013.2822036 a variant of RRT* and informed RRT* that uses an online tree rewiring strategy that allows the tree root to move with the agent without discarding previously sampled paths, in order to obtain real-time path-planning in a dynamic environment such as a computer game * RRT and RRT,RRT: Real-Time Motion Planning/Replanning for Environments with Unpredictable ObstaclesComparison of RRTX, RRT# and RRT* when a shortcut is discovered in a static environment optimization of RRT* for dynamic environments * Theta*-RRT,Palmieri, Luigi; Koenig, Sven; Arras, Kai O. \"RRT- Based Nonholonomic Motion Planning Using Any-Angle Path Biasing\". In Robotics and Automation (ICRA), 2016 Proceedings of the IEEE International Conference on, pages 2775-2781, 2016. a two-phase motion planning method similar to A*-RRT* that uses a hierarchical combination of any-angle search with RRT motion planning for fast trajectory generation in environments with complex nonholonomic constraints * RRT* FND,RRT* FND - motion planning in dynamic environments extension of RRT* for dynamic environments *RRT-GPU, three- dimensional RRT implementation that utilizes hardware acceleration * APF-RRT, a combination of RRT planner with Artificial Potential Fields method that simplify the replanning task * CERRT, a RRT planner modeling uncertainty, which is reduced exploiting contacts *MVRRT*, Minimum violation RRT*, an algorithm that finds the shortest route that minimizes the level of unsafety (the \"cost\" of the environment rules that have been violated, e.g. traffic laws) *RRT-Blossom, RRT planner for highly constrained environments. *TB-RRT, Time-based RRT algorithm for rendezvous planning of two dynamic systems. ==See also == :*Any-angle path planning :*Probabilistic roadmap :*Space-filling tree :*Motion planning :*Randomized algorithm ==References== ==External links== * *Java visualizer of RRT and RRT* including map editor *C++ implementation of RRT using Dubins minimum-time paths Category:Search algorithms Category:Robot navigation Category:Probabilistic data structures ",
    "title": "Rapidly-exploring random tree"
}