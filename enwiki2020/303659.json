{
    "id": "303659",
    "text": "Peripheral Interchange Program (PIP) was a utility to transfer files on and between devices on Digital Equipment Corporation's computers. It was first implemented on the PDP-6 architecture by Harrison \"Dit\" Morse early in the 1960s. It was subsequently implemented for DEC's operating systems for PDP-10, PDP-11, and PDP-8OS/8, OS/8 System Reference Manual architectures. In the 1970s and 1980s Digital Research implemented PIP on CP/MCP/M, CP/M Operating System Manual and MP/M.MP/M, MP/M Operating System User's Guide ==History== It is said that during development it was named ATLATL, which is an acronym for \"Anything, Lord to Anything, Lord.\"PIP, The Jargon File This humorously described both its purpose as a device-independent file copying tool and the difficulties at the time of safely copying files between devices. The original PIP syntax was PIP destination\u2190source /switches using the left-arrow character from the ASCII-1963 character set that the Flexowriter keyboards of the time used. As other terminals were introduced that used later versions of ASCII (without the left-arrow character), PIP allowed the syntax PIP destination=source The underscore (_) character, which was in the same ASCII character position that left-arrow had occupied, was still supported to separate the destination and source specifications. Source and destination were file specification strings. These consisted of a device name, typically 2 characters for device type such as DK (disk), LP (line printer), MT (magnetic tape), etc. and a unit number from 0 to 7, a colon (:), filename and extension. Copying was generally permitted between any file specification to any other where it made sense. Early versions of VAX/VMS implemented certain DCL commands, such as DIRECTORY and RENAME, by running RSX-11M PIP in compatibility mode. This usage of PIP was replaced by VAX-specific code in VAX/VMS 2.0, but PIP remained as part of the VAX-11 RSX layered product for VMS.. As late as the mid 1980s, PIP was still in common use on TOPS-10, TOPS-20 and PDP-11 systems. ==PIP in CP/M and MP/M== `PIP.CMD` in CP/M-86 Gary Kildall, who developed CP/M and MP/M, based much of the design of its file structure and command processor on operating systems from Digital Equipment, such as RSTS/E for the PDP-11. Besides accessing files on a floppy disk, the PIP command in CP/M could also transfer data to and from the following \"special files\": * \u2014 console (input and output) * \u2014 an auxiliary device. In CP/M 1 and 2, PIP used (paper tape punch) and (paper tape reader) instead of * \u2014 list output device, usually the printer * \u2014 as , but lines were numbered, tabs expanded and form feeds added every 60 lines * \u2014 null device, akin to \\Device\\Null and /dev/null * \u2014 input device that produced end-of-file characters, ASCII * \u2014 custom input device, by default the same as * \u2014 punch card unit: * \u2014 custom output device, by default the same as These were not true device files, however, because their handling was limited to PIP. The two custom devices and were implemented as calls to fixed locations at the start of the PIP program; the intention was that the user, or the OEM, could patch these locations to add their own input or output devices. 246 bytes of free space were left in the program for this purpose. In addition to the usual `PIP destination=source` syntax, PIP under CP/M still allowed the old `PIP destination_source` form. This behaviour was not documented, and CP/M generally did not have a standard for which characters could appear in file names; therefore other programs could and did create filenames containing underscore characters, which PIP could not handle. ==See also== *copy (command) \u2013 RT-11, RSX-11, OpenVMS, AmigaOS, DOS, OS/2 and Microsoft Windows command for copying data *cp (Unix) \u2013 Unix command for copying data *Kermit (protocol) ==References== Category:CP/M files Category:CP/M software Category:File copy utilities ",
    "title": "Peripheral Interchange Program"
}