{
    "id": "301782",
    "text": "In computer programming, M-expressions (or meta-expressions) were an early proposed syntax for the Lisp programming language, inspired by contemporary languages such as Fortran and ALGOL. The notation was never implemented into the language and, as such, it was never finalized. Compared to S-expressions, M-expressions introduce function notation, infix operators (including a operator), and shorthands for and into the language. ==Background== John McCarthy published the first paper on Lisp in 1960 while a research fellow at the Massachusetts Institute of Technology. In it he described a language of symbolic expressions (S-expressions) that could represent complex structures as lists. Then he defined a set of primitive operations on the S-expressions, and a language of meta-expressions (M-expressions) that could be used to define more complex operations. Finally, he showed how the meta-language itself could be represented with S-expressions, resulting in a system that was potentially self-hosting.McCarthy, John (April 1960) \"Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I\" The draft version of this paper is known as \"AI Memo 8\". {| class=\"wikitable\" |+ Example M-expressions (LISP 1.5, 1965) ! Expression type ! Mathematical notation ! M-expression ! Modern Lisp S-expression |- | List value | (1, 2, 3) | | |- | Function application | f(x, y) | | |- | Function definition | \\mathrm{square}: x \\mapsto x \\cdot x | | |- | Conditional expression | \\begin{cases} -x, & \\mbox{if } x < 0 \\\\\\ x, & \\mbox{otherwise} \\end{cases} | | |} McCarthy had planned to develop an automatic Lisp compiler (LISP 2) using M-expressions as the language syntax and S-expressions to describe the compiler's internal processes. Stephen B. Russell read the paper and suggested to him that S-expressions were a more convenient syntax. Although McCarthy disapproved of the idea, Russell and colleague Daniel J. Edwards hand-coded an interpreter program that could execute S-expressions. This program was adopted by McCarthy's research group, establishing S-expressions as the dominant form of Lisp. McCarthy reflected on the fate of M-expressions in 1979: == Implementations == A form of sugared M-expressions has been implemented in the Wolfram language of Wolfram Mathematica since 1988: {| class=\"wikitable\" |+ Example Wolfram snippets ! Expression type ! Sugared syntax (InputForm) ! Function form (FullForm) |- | List value | | |- | Function application | | |- | Function definition | | |} (Conditionals take more to explain, as the general conditional system in the language relies on pattern matching and rewriting.) === For LISP === MLisp was a contemporary (1968-1973) project to implement an M-expression-like frontend for Lisp. A few extra features like hygienic macros, pattern matching, and backtracking were incorporated. It eventually evolved into an abandoned LISP70 draft. M-LISP (MetaLISP) from 1989 was another attempt to blend M-expressions with Scheme. A parser for the \"AI Memo 8\" M-expression is available in Common Lisp, but the author intends it as a case against M-expressions due to its perceived inability to cope with macros. ==Further development== A CGOL (1977) was implemented in MacLisp and follows a similar goal of introducing Algol-like syntax with infix operators. It is known to work on Armed Bear Common Lisp.CGOL on ABCL Development of the Armed Bear Common Lisp implementation blog. A more recent (circa 2003) variant is the I-expression, which use indentation to indicate parentheses implicitly, and are thus in some ways intermediate between S-expressions and M-expressions. I-expressions were introduced in Scheme Request For Implementation 49 as an auxiliary syntax for Scheme, but they have not been widely adopted. A further development is the \"sweet\" t-expression, which has infix operators without precedence. Like I-expressions, t-expressions are only a simple transformation away from S-expressions, so that theoretically they can be used on any Lisp dialect and not interfere with features like macros. Additional syntax-related include Apple's Dylan (Algol-like tokens) and Clojure's addition of other literal syntaxes. ==References== Category:Lisp (programming language) ",
    "title": "M-expression"
}