{
    "id": "1497098",
    "text": "In number theory, Kaprekar's routine is an iterative algorithm that, with each iteration, takes a natural number in a given number base, creates two new numbers by sorting the digits of its number by descending and ascending order, and subtracts the second from the first to yield the natural number for the next iteration. It is named after its inventor, the Indian mathematician D. R. Kaprekar. ==Definition and properties== The algorithm is as follows: # Choose any natural number n in a given number base b. This is the first number of the sequence. # Create a new number \\alpha by sorting the digits of n in descending order, and another new number \\beta by sorting the digits of n in ascending order. These numbers may have leading zeros, which are discarded (or alternatively, retained). Subtract \\alpha -\\beta to produce the next number of the sequence. # Repeat step 2. The sequence is called a Kaprekar sequence and the function K_b(n) = \\alpha - \\beta is the Kaprekar mapping. Some numbers map to themselves; these are the fixed points of the Kaprekar mapping, and are called Kaprekar's constants. Zero is a Kaprekar's constant for all bases b, and so is called a trivial Kaprekar's constant. All other Kaprekar's constant are nontrivial Kaprekar's constants. For example, in base 10, starting with 3524, : K_{10}(3524) = 5432 - 2345 = 3087 : K_{10}(3087) = 8730 - 378 = 8352 : K_{10}(8352) = 8532 - 2358 = 6174 : K_{10}(6174) = 7641 - 1467 = 6174 with 6174 as a Kaprekar's constant. All Kaprekar sequences will either reach one of these fixed points or will result in a repeating cycle. Either way, the end result is reached in a fairly small number of steps. Note that the numbers \\alpha and \\beta have the same digit sum and hence the same remainder modulo b - 1. Therefore, each number in a Kaprekar sequence of base b numbers (other than possibly the first) is a multiple of b - 1. When leading zeroes are retained, only repdigits lead to the trivial Kaprekar's constant. ==Families of Kaprekar's constants== In base 4, it can easily be shown that all numbers of the form 3021, 310221, 31102221, 3...111...02...222...1 (where the length of the \"1\" sequence and the length of the \"2\" sequence are the same) are fixed points of the Kaprekar mapping. In base 10, it can easily be shown that all numbers of the form 6174, 631764, 63317664, 6...333...17...666...4 (where the length of the \"3\" sequence and the length of the \"6\" sequence are the same) are fixed points of the Kaprekar mapping. ===b = 2k=== It can be shown that all natural numbers :m = (k) b^{2n + 3} \\left(\\sum_{i = 0}^{n - 1} b^i\\right) + (k - 1) b^{2n + 2} + (2k - 1) b^{n + 1} \\left(\\sum_{i = 0}^{n} b^i\\right) + (k - 1) b \\left(\\sum_{i = 0}^{n - 1} b^i\\right) + (k) are fixed points of the Kaprekar mapping in even base b = 2k for all natural numbers n. {| class=\"wikitable\" |+ Perfect digital invariants ! k ! b ! m |--- | 1 || 2 || 011, 101101, 110111001, 111011110001... |--- | 2 || 4 || 132, 213312, 221333112, 222133331112... |--- | 3 || 6 || 253, 325523, 332555223, 333255552223... |--- | 4 || 8 || 374, 437734, 443777334, 444377773334... |--- | 5 || 10 || 495, 549945, 554999445, 555499994445... |--- | 6 || 12 || 5B6, 65BB56, 665BBB556, 6665BBBB5556... |--- | 7 || 14 || 6D7, 76DD67, 776DDD667, 7776DDDD6667... |--- | 8 || 16 || 7F8, 87FF78, 887FFF778, 8887FFFF7778... |--- | 9 || 18 || 8H9, 98HH89, 998HHH889, 9998HHHH8889... |} ==Kaprekar's constants and cycles of the Kaprekar mapping for specific base b== All numbers are expressed in base b, using A\u2212Z to represent digit values 10 to 35. {| class=\"wikitable\" ! Base b ! Digit length ! Nontrivial (nonzero) Kaprekar's constants ! Cycles |- | rowspan=\"8\" | 2 || 2 || 01Leading zeroes retained. || \\varnothing |- | 3 || 011Leading zeroes retained. || \\varnothing |- | 4 || 0111,Leading zeroes retained. 1001 || \\varnothing |- | 5 || 01111,Leading zeroes retained. 10101 || \\varnothing |- | 6 || 011111,Leading zeroes retained. 101101, 110001 || \\varnothing |- | 7 || 0111111,Leading zeroes retained. 1011101, 1101001 || \\varnothing |- | 8 || 01111111,Leading zeroes retained. 10111101, 11011001, 11100001 || \\varnothing |- | 9 || 011111111,Leading zeroes retained. 101111101, 110111001, 111010001 || \\varnothing |- | rowspan=\"8\" | 3 || 2 || \\varnothing || \\varnothing |- | 3 || \\varnothing || 022 \u2192 121 \u2192 022 |- | 4 || \\varnothing || 1012 \u2192 1221 \u2192 1012 |- | 5 || 20211 || \\varnothing |- | 6 || \\varnothing || 102212 \u2192 210111 \u2192 122221 \u2192 102212 |- | 7 || 2202101 || 2022211 \u2192 2102111 \u2192 2022211 |- | 8 || 21022111 || \\varnothing |- | 9 || 222021001 || 220222101 \u2192 221021101 \u2192 220222101 202222211 \u2192 210222111 \u2192 211021111 \u2192 202222211 |- | rowspan=\"8\" | 4 || 2 || \\varnothing || 03 \u2192 21 \u2192 03 |- | 3 || 132 || \\varnothing |- | 4 || 3021 || 1332 \u2192 2022 \u2192 1332 |- | 5 || \\varnothing || 20322 \u2192 23331 \u2192 20322 |- | 6 || 213312, 310221, 330201 || \\varnothing |- | 7 || 3203211 || \\varnothing |- | 8 || 31102221, 33102201, 33302001 || 22033212 \u2192 31333311 \u2192 22133112 \u2192 22033212 |- | 9 || 221333112, 321032211, 332032101 || \\varnothing |- | rowspan=\"3\" | 5 || 2 || 13 || \\varnothing |- | 3 || \\varnothing || 143 \u2192 242 \u2192 143 |- | 4 || 3032 || \\varnothing |- | rowspan=\"7\" | 6 || 2 || \\varnothing || 05 \u2192 41 \u2192 23 \u2192 05 |- | 3 || 253 || \\varnothing |- | 4 || \\varnothing || 1554 \u2192 4042 \u2192 4132 \u2192 3043 \u2192 3552 \u2192 3133 \u2192 1554 |- | 5 || 41532 || 31533 \u2192 35552 \u2192 31533 |- | 6 || 325523, 420432, 530421 || 205544 \u2192 525521 \u2192 432222 \u2192 205544 |- | 7 || \\varnothing || 4405412 \u2192 5315321 \u2192 4405412 |- | 8 || 43155322, 55304201 || 31104443 \u2192 43255222 \u2192 33204323 \u2192 41055442 \u2192 54155311 \u2192 44404112 \u2192 43313222 \u2192 31104443 42104432 \u2192 43204322 \u2192 42104432 53104421 \u2192 53304221 \u2192 53104421 |- | rowspan=\"3\" | 7 || 2 || \\varnothing || \\varnothing |- | 3 || \\varnothing || 264 \u2192 363 \u2192 264 |- | 4 || \\varnothing || 3054 \u2192 5052 \u2192 5232 \u2192 3054 |- | rowspan=\"5\" | 8 || 2 || 25 || 07 \u2192 61 \u2192 43 \u2192 07 |- | 3 || 374 || \\varnothing |- | 4 || \\varnothing || 1776 \u2192 6062 \u2192 6332 \u2192 3774 \u2192 4244 \u2192 1776 3065 \u2192 6152 \u2192 5243 \u2192 3065 |- | 5 || \\varnothing || 42744 \u2192 47773 \u2192 42744 51753 \u2192 61752 \u2192 63732 \u2192 52743 \u2192 51753 |- | 6 || 437734, 640632 || 310665 \u2192 651522 \u2192 532443 \u2192 310665 |- | rowspan=\"3\" | 9 || 2 || \\varnothing || 17 \u2192 53 \u2192 17 |- | 3 || \\varnothing || 385 \u2192 484 \u2192 385 |- | 4 || \\varnothing || 3076 \u2192 7252 \u2192 5254 \u2192 3076 5074 \u2192 7072 \u2192 7432 \u2192 5074 |- | rowspan=\"7\" | 10 || 2 || \\varnothing || 09 \u2192 81 \u2192 63 \u2192 27 \u2192 45 \u2192 09 |- | 3 || 495 || \\varnothing |- | 4 || 6174 || \\varnothing |- | 5 || \\varnothing || 53955 \u2192 59994 \u2192 53955 61974 \u2192 82962 \u2192 75933 \u2192 63954 \u2192 61974 62964 \u2192 71973 \u2192 83952 \u2192 74943 \u2192 62964 |- | 6 || 549945, 631764 || 420876 \u2192 851742 \u2192 750843 \u2192 840852 \u2192 860832 \u2192 862632 \u2192 642654 \u2192 420876 |- | 7 || \\varnothing || 7509843 \u2192 9529641 \u2192 8719722 \u2192 8649432 \u2192 7519743 \u2192 8429652 \u2192 7619733 \u2192 8439552 \u2192 7509843 |- | 8 || 63317664, 97508421 || 43208766 \u2192 85317642 \u2192 75308643 \u2192 84308652 \u2192 86308632 \u2192 86326632 \u2192 64326654 \u2192 43208766 64308654 \u2192 83208762 \u2192 86526432 \u2192 64308654 |- | rowspan=\"3\" | 11 || 2 || 37 || \\varnothing |- | 3 || \\varnothing || 4A6 \u2192 5A5 \u2192 4A6 |- | 4 || \\varnothing || 3098 \u2192 9452 \u2192 7094 \u2192 9272 \u2192 7454 \u2192 3098 5096 \u2192 9092 \u2192 9632 \u2192 7274 \u2192 5276 \u2192 5096 |- | rowspan=\"7\" | 12 || 2 || \\varnothing || 0B \u2192 A1 \u2192 83 \u2192 47 \u2192 29 \u2192 65 \u2192 0B |- | 3 || 5B6 || \\varnothing |- | 4 || \\varnothing || 3BB8 \u2192 8284 \u2192 6376 \u2192 3BB8 4198 \u2192 8374 \u2192 5287 \u2192 6196 \u2192 7BB4 \u2192 7375 \u2192 4198 |- | 5 || 83B74 || 64B66 \u2192 6BBB5 \u2192 64B66 |- | 6 || 65BB56 || 420A98 \u2192 A73742 \u2192 842874 \u2192 642876 \u2192 62BB86 \u2192 951963 \u2192 860A54 \u2192 A40A72 \u2192 A82832 \u2192 864654 \u2192 420A98 |- | 7 || 962B853 || 841B974 \u2192 A53B762 \u2192 971B943 \u2192 A64B652 \u2192 960BA53 \u2192 B73B741 \u2192 A82B832 \u2192 984B633 \u2192 863B754 \u2192 841B974 |- | 8 || 873BB744, A850A632 || 4210AA98 \u2192 A9737422 \u2192 87428744 \u2192 64328876 \u2192 652BB866 \u2192 961BB953 \u2192 A8428732 \u2192 86528654 \u2192 6410AA76 \u2192 A92BB822 \u2192 9980A323 \u2192 A7646542 \u2192 8320A984 \u2192 A7537642 \u2192 8430A874 \u2192 A5428762 \u2192 8630A854 \u2192 A540X762 \u2192 A830A832 \u2192 A8546632 \u2192 8520A964 \u2192 A740A742 \u2192 A8328832 \u2192 86546654 |- | rowspan=\"2\" | 13 || 2 || \\varnothing || 1B \u2192 93 \u2192 57 \u2192 1B |- | 3 || \\varnothing || 5C7 \u2192 6C6 \u2192 5C7 |- | rowspan=\"2\" | 14 || 2 || 49 || 2B \u2192 85 \u2192 2B 0D \u2192 C1 \u2192 A3 \u2192 67 \u2192 0D |- | 3 || 6D7 || \\varnothing |- | rowspan=\"2\" | 15 || 2 || \\varnothing || \\varnothing |- | 3 || \\varnothing || 6E8 \u2192 7E7 \u2192 6E8 |- | rowspan=\"7\" | 16 || 2 || \\varnothing || 2D \u2192 A5 \u2192 4B \u2192 69 \u2192 2D 0F \u2192 E1 \u2192 C3 \u2192 87 \u2192 0F |- | 3 || 7F8 || \\varnothing |- | 4 || \\varnothing || 3FFC \u2192 C2C4 \u2192 A776 \u2192 3FFC A596 \u2192 52CB \u2192 A596 E0E2 \u2192 EB32 \u2192 C774 \u2192 7FF8 \u2192 8688 \u2192 1FFE \u2192 E0E2 E952 \u2192 C3B4 \u2192 9687 \u2192 30ED \u2192 E952 |- | 5 || \\varnothing || 86F88 \u2192 8FFF7 \u2192 86F88 A3FB6 \u2192 C4FA4 \u2192 B7F75 \u2192 A3FB6 A4FA6 \u2192 B3FB5 \u2192 C5F94 \u2192 B6F85 \u2192 A4FA6 |- | 6 || 87FF78 || 310EED \u2192 ED9522 \u2192 CB3B44 \u2192 976887 \u2192 310EED 532CCB \u2192 A95966 \u2192 532CCB 840EB8 \u2192 E6FF82 \u2192 D95963 \u2192 A42CB6 \u2192 A73B86 \u2192 840EB8 A80E76 \u2192 E40EB2 \u2192 EC6832 \u2192 C91D64 \u2192 C82C74 \u2192 A80E76 C60E94 \u2192 E82C72 \u2192 CA0E54 \u2192 E84A72 \u2192 C60E94 |- | 7 || C83FB74 || B62FC95 \u2192 D74FA83 \u2192 C92FC64 \u2192 D85F973 \u2192 C81FD74 \u2192 E94fA62 \u2192 DA3FB53 \u2192 CA5F954 \u2192 B74FA85 \u2192 B62FC95 B71FD85 \u2192 E83FB72 \u2192 DB3FB43 \u2192 CA6F854 \u2192 B73FB85 \u2192 C63FB94 \u2192 C84FA74 \u2192 B82FC75 \u2192 D73FB83 \u2192 CA3FB54 \u2192 C85F974 \u2192 B71FD85 |- | 8 || \\varnothing || 3110EEED \u2192 EDD95222 \u2192 CBB3B444 \u2192 97768887 \u2192 3110EEED 5332CCCB \u2192 A9959666 \u2192 5332CCCB 7530ECA9 \u2192 E951DA62 \u2192 DB52CA43 \u2192 B974A865 \u2192 7530ECA9 A832CC76 \u2192 A940EB66 \u2192 E742CB82 \u2192 CA70E854 \u2192 E850EA72 \u2192 EC50EA32 \u2192 EC94A632 \u2192 C962C964 \u2192 A832CC76 C610EE94 \u2192 ED82C722 \u2192 CBA0E544 \u2192 E874A872 \u2192 C610EE94 C630EC94 \u2192 E982C762 \u2192 CA30EC54 \u2192 E984A762 \u2192 C630EC94 C650EA94 \u2192 E852CA72 \u2192 CA50EA54 \u2192 E854AA72 \u2192 C650EA94 CA10EE54 \u2192 ED84A722 \u2192 CB60E944 \u2192 E872C872 \u2192 CA10EE54 |} ==Kaprekar's constants in base 10== ===Numbers of length four digits=== In 1949 D. R. Kaprekar discovered that if the above process is applied to base 10 numbers of 4 digits, the resulting sequence will almost always converge to the value 6174 in at most 8 iterations, except for a small set of initial numbers which converge instead to 0. The number 6174 is the first Kaprekar's constant to be discovered, and thus is sometimes known as Kaprekar's constant.Yutaka Nishiyama, Mysterious number 6174 The set of numbers that converge to zero depends on whether leading zeros are retained (the usual formulation) or are discarded (as in Kaprekar's original formulation). In the usual formulation, there are 77 four- digit numbers that converge to zero, for example 2111. However, in Kaprekar's original formulation the leading zeros are retained, and only repdigits such as 1111 or 2222 map to zero. This contrast is illustrated below: {| class=\"wikitable\" style=\"margin-left: auto; margin-right: auto; border: none;\" |- ! discard leading zeros ! retain leading zeros |- style=\"vertical-align: top;\" | 2111 \u2212 1112 = 999 999 \u2212 999 = 0 | 2111 \u2212 1112 = 0999 9990 \u2212 0999 = 8991 9981 \u2212 1899 = 8082 8820 \u2212 0288 = 8532 8532 \u2212 2358 = 6174 |} Below is a flowchart. Leading zeros are retained, however the only difference when leading zeros are discarded is that instead of 0999 connecting to 8991, we get 999 connecting to 0. Sequence of Kaprekar transformations ending in 6174 ===Numbers of length three digits=== If the Kaprekar routine is applied to numbers of 3 digits in base 10, the resulting sequence will almost always converge to the value 495 in at most 6 iterations, except for a small set of initial numbers which converge instead to 0. The set of numbers that converge to zero depends on whether leading zeros are discarded (the usual formulation) or are retained (as in Kaprekar's original formulation). In the usual formulation, there are 60 three-digit numbers that converge to zero, for example 211. However, in Kaprekar's original formulation the leading zeros are retained, and only repdigits such as 111 or 222 map to zero. Below is a flowchart. Leading zeros are retained, however the only difference when leading zeros are discarded is that instead of 099 connecting to 891, we get 99 connecting to 0. Sequence of three digit Kaprekar transformations ending in 495 ===Other digit lengths=== For digit lengths other than three or four (in base 10), the routine may terminate at one of several fixed points or may enter one of several cycles instead, depending on the starting value of the sequence. See the table in the section above for base 10 fixed points and cycles. The number of cycles increases rapidly with larger digit lengths, and all but a small handful of these cycles are of length three. For example, for 20-digit numbers in base 10, there are fourteen constants (cycles of length one) and ninety-six cycles of length greater than one, all but two of which are of length three. Odd digit lengths produce fewer different end results than even digit lengths. ==Programming example== The example below implements the Kaprekar mapping described in the definition above to search for Kaprekar's constants and cycles in Python. ===Leading zeroes discarded=== def get_digits(x, b): digits = [] while x > 0: digits.append(x % b) x = x // b return digits def form_number(digits, b): result = 0 for i in range(0, len(digits)): result = result * b + digits[i] return result def kaprekar_map(x, b): descending = form_number(sorted(get_digits(x, b), reverse=True), b) ascending = form_number(sorted(get_digits(x, b)), b) return descending - ascending def kaprekar_cycle(x, b): x = int (str(x), b) seen = [] while x not in seen: seen.append(x) x = kaprekar_map(x, b) cycle = [] while x not in cycle: cycle.append(x) x = kaprekar_map(x, b) return cycle ===Leading zeroes retained=== def digit_count(x, b): count = 0 while x > 0: count = count + 1 x = x // b return count def get_digits(x, b, init_k): k = digit_count(x, b) digits = [] while x > 0: digits.append(x % b) x = x // b for i in range(k, init_k): digits.append(0) return digits def form_number(digits, b): result = 0 for i in range(0, len(digits)): result = result * b + digits[i] return result def kaprekar_map(x, b, init_k): descending = form_number(sorted(get_digits(x, b, init_k), reverse=True), b) ascending = form_number(sorted(get_digits(x, b, init_k)), b) return descending - ascending def kaprekar_cycle(x, b): x = int (str(x), b) init_k = digit_count(x, b) seen = [] while x not in seen: seen.append(x) x = kaprekar_map(x, b, init_k) cycle = [] while x not in cycle: cycle.append(x) x = kaprekar_map(x, b, init_k) return cycle ==See also== * Arithmetic dynamics * Dudeney number * Factorion * Happy number * Kaprekar number * Meertens number * Narcissistic number * Perfect digit-to-digit invariant * Perfect digital invariant * Sum-product number * Sorting algorithm ==References== ==External links== * * Sample (Perl) code to walk any four- digit number to Kaprekar's Constant Category:Arithmetic dynamics Category:Base-dependent integer sequences Category:Sorting algorithms ",
    "title": "Kaprekar's routine"
}