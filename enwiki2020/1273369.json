{
    "id": "1273369",
    "text": "Action! is a procedural programming language similar to ALGOL that is intended to produce high-performance programs for the Atari 8-bit family. The language was written by Clinton Parker and distributed on ROM cartridge by Optimized Systems Software (OSS) starting in 1983. It was one of the first of OSS's bank switching \"Super Cartridges\", with a total of 16 kB of code. Working with Henry Baker, Parker had previously developed Micro-SPL, a systems programming language for the Xerox Alto. Action! was largely a port of Micro-SPL concepts to the Atari with the necessary changes to more directly handle the underlying MOS 6502 processor and add an editor and debugger. Action! was used to develop at least two commercial products\u2014the HomePak productivity suite and Games Computers Play client program\u2014and numerous programs in ANALOG Computing and Antic magazines. The editor portion was also used as the basis for the PaperClip word processor. The language was not ported to any other platforms. The 6502 assembly language source code for Action! was made available under the GNU General Public License by the author in 2015.Action! Source Code - Page 2, Alfred (Chopper Commander) Posted Mon Feb 2, 2015 1:38 PM, AtariAge Forums, This is the original Action! source as I received it from ICD. It uses the ICD cross assembler which is not included in the zip. It can be easily converted to other formats ==History== ===Micro-SPL=== While taking his postgraduate studies, Parker started working part-time at Xerox PARC working on printer drivers. He later moved to the Xerox Alto project where he wrote several games for the system. His PhD was in natural language parsing and he had worked on compiler theory during his graduate work. Henry Baker and Parker released Micro-SPL in September 1979. Micro-SPL was intended to be used as a systems programming language on the Xerox Alto workstation computer, which was normally programmed in BCPL. The Alto used a microcode system which the BCPL compiler output. Micro-SPL output the same format, allowing BCPL programs to call Micro-SPL programs. Aside from differences in syntax, the main difference between Micro-SPL and BCPL, and the reason for its existence, was that Micro- SPL produced code that was many times faster than the native BCPL compiler. In general, Micro-SPL programs were expected to run about ten times as fast as BCPL, and about half as fast as good hand-written microcode. In comparison to microcode, they claimed it would take half as long to write and 10% of the time to debug it. ===Action!=== It was during this period that Parker purchased an Atari for use at home, and was disappointed with the lack of development systems for this platform. This was the impetus for the development of Action! Parker initially considered releasing the system himself, but later decided to partner with Optimized Systems Software (OSS) for sales and distribution. OSS focused on utilities and programming languages like BASIC XL, so this was a natural fit for Action! Sales were strong enough for Parker to make a living off the royalties for several years. The IBM PC had C compilers available, and Parker decided there was no point in porting Action! to that platform. As the sales of the Atari 8-bit platforms wound down, in North America at least, OSS wound down as well. Late in its history Action! distribution moved from OSS to Electronic Arts, but they did little with the language and sales ended shortly after. In a 2015 interview, Parker expressed his surprise in the level of support the language continued to receive, suggesting there appeared to be more interest in it then than there had been in the late 1980s. ==Development environment== Action! was one of the earlier examples of the OSS SuperCartridge format. ROM cartridges on the Atari were normally limited to 8 kB, which limited its ability to support larger programs. The SuperCartridge had 16 kB organized as four 4 kB blocks, two of which were visible at any time. The lower 4 kB did not change, and system could bank switch between the other three blocks by changing the value in address $AFFF. Action! used this design by breaking the system into four sections, the editor, the compiler, a monitor for testing code and switching between the editor and compiler, and the run-time library. The run-time library is stored in the cartridge itself. To distribute standalone applications requires a separate run-time package which was sold by OSS as the Action! Toolkit. Action! constructs were designed to map cleanly to 6502 opcodes, to provide high performance without needing complex optimizations in the one-pass compiler.ACTION! in Atariki (PL) For example, local variables are assigned fixed addresses in memory, instead of being allocated on the stack of activation records. This eliminates the significant overhead associated with stack management, which is especially difficult in the case of the 6502's 256-byte stack. However, this precludes the use of recursion. Unlike the integrated Atari BASIC and Atari Assembler Editor environments, the Action! editor does not use line numbers. It features a full-screen, scrolling display capable of displaying two windows, as well as block operations and global search and replace. The monitor serves as a debugger, allowing an entire program or individual functions to be run, memory to be displayed and modified, and program execution to be traced. == Data types == Action! has three fundamental data types, all of which are numeric. === BYTE === Internally represented as an unsigned 8-bit integer. Values range from 0 to 255. The CHAR keyword can also be used to declare BYTE variables. BYTE age=[21] ; declare age and initialize it to the value 21 BYTE leftMargin=82 ; declare leftMargin at address 82 === CARDinal === Internally represented as an unsigned 16-bit integer. Values range from 0 to 65,535. CARD population=$600 ; declare population and store it at address 1536 and 1537 CARD prevYear, curYear, nextYear ; use commas to declare multiple variables === INTeger === Internally represented as a signed 16-bit integer. Values range from -32,768 to 32,767. INT veryCold = [-10] INT profitsQ1, profitsQ2, ; declaring multiple variables can profitsQ3, profitsQ4 ; span across multiple lines Action! also has ARRAYs, POINTERs and user-defined TYPEs. No floating point support is provided. An example of a user-defined TYPE: TYPE CORD=[CARD x,y] CORD point point.x=42 point.y=23 == Reserved words == A reserved word is any identifier or symbol that the Action! compiler recognizes as something special. It can be an operator, a data type name, a statement, or a compiler directive. AND FI OR UNTIL = ( ARRAY FOR POINTER WHILE <> ) BYTE FUNC PROC XOR # . CARD IF RETURN + > [ CHAR INCLUDE RSH - >= ] DEFINE INT SET * < \" DO LSH STEP / <= ' ELSE MOD THEN & $ ; ELSEIF MODULE TO % ^ EXIT OD TYPE ! @ == Example code == The following is example code for Sieve of Eratosthenes written in Action!. In order to increase performance, it disables the ANTIC graphics co-processor, preventing its DMA engine from \"stealing\" CPU cycles during computation. BYTE RTCLOK=20, ; addr of sys timer SDMCTL=559 ; DMA control BYTE ARRAY FLAGS(8190) CARD COUNT,I,K,PRIME,TIME PROC SIEVE() SDMCTL=0 ; shut off Antic RTCLOK=0 ; reset the clock to zero COUNT=0 ; init count FOR I=0 TO 8190 ; and flags DO FLAGS(I)='T ; \"'T\" is a compiler-provided constant for True OD FOR I=0 TO 8190 ; now run the sieve DO IF FLAGS(I)='T THEN PRIME=I+I+3 K=I+PRIME WHILE K<=8190 DO FLAGS(K)='F ; \"'F\" is a compiler-provided constant for False K==+PRIME OD COUNT==+1 FI OD TIME=RTCLOK ; get timer reading SDMCTL=34 ; restore screen PRINTF(\"%E %U PRIMES IN\",COUNT) PRINTF(\"%E %U JIFFIES\",TIME) RETURN ==Reception== Brian Moriarty, in a February 1984 review for ANALOG Computing, concluded that Action! was \"one of the most valuable development tools ever published for the Atari.\" He cited the manual as the only weak point of the package, claiming it \"suffers from lack of confidence, uncertain organization and a shortage of good, hard technical data.\" Leo Laporte reviewed Action in the May/June 1984 edition of Hi-Res. He began the review, \"This is the best thing to happen to Atari since Nolan Bushnell figured out people would play ping-pong on a TV screen.\" Laporte praised the editor, noting its split-screen and cut and paste capabilities and describing it as a \"complete word processing system that's very responsive.\" He said that Action! ran about 200 times as fast as Atari BASIC, concluding that \"This language is like a finely tuned racing car.\" BYTE in 1985 praised the compilation and execution speed of software written in Action! Using their Byte Sieve benchmark as a test, ten iterations of the sieve completed in 18 seconds in Action!, compared to 10 seconds for assembly and 38 minutes in BASIC. The magazine also lauded the language's editor. BYTE reported that the language resembled C closely enough to \"routinely convert programs between the two\", and approved of its pointer support. The magazine concluded that \"Action! is easy to use, quick, and efficient. It can exploit the Atari's full power. Action! puts programming for the Atari in a whole new dimension.\" Ian Chadwick wrote in Mapping the Atari that \"Action! is probably the best language yet for the Atari; it's a bit like C and Pascal, with a dash of Forth. I recommend it.\" == See also== *PaperClip, Atari 8-bit word processor from a different author and company, based on the Action! editor == References == ===Citations=== ===Bibliography=== * * * == External links == * *Action! Programming Language Version 3.6 - Source Code, by Optimized Systems Software at archive.org *Action! info at Retrobits.com *The ACTION! Archive *Action! language reference *Effectus cross-compiler Category:Atari 8-bit family software Category:ALGOL 68 dialect Category:Optimized Systems Software Category:Procedural programming languages Category:Programming languages created in 1983 Category:Statically typed programming languages Category:Free and open-source software Category:Formerly proprietary software Category:Systems programming languages ",
    "title": "Action! (programming language)"
}