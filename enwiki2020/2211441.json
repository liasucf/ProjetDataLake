{
    "id": "2211441",
    "text": "Lempel\u2013Ziv\u2013Storer\u2013Szymanski (LZSS) is a lossless data compression algorithm, a derivative of LZ77, that was created in 1982 by James A. Storer and Thomas Szymanski. LZSS was described in article \"Data compression via textual substitution\" published in Journal of the ACM (1982, pp. 928\u2013951). LZSS is a dictionary coding technique. It attempts to replace a string of symbols with a reference to a dictionary location of the same string. The main difference between LZ77 and LZSS is that in LZ77 the dictionary reference could actually be longer than the string it was replacing. In LZSS, such references are omitted if the length is less than the \"break even\" point. Furthermore, LZSS uses one-bit flags to indicate whether the next chunk of data is a literal (byte) or a reference to an offset/length pair. == Example == Here is the beginning of Dr. Seuss's Green Eggs and Ham, with character numbers at the beginning of lines for convenience. Green Eggs and Ham is an optimal example to illustrate LZSS compression because the book itself only contains 50 unique words, despite having a word count of 170. Thus, words are repeated, however not in succession. 0: I am Sam 9: 10: Sam I am 19: 20: That Sam-I-am! 35: That Sam-I-am! 50: I do not like 64: that Sam-I-am! 79: 80: Do you like green eggs and ham? 112: 113: I do not like them, Sam-I-am. 143: I do not like green eggs and ham. This text takes 177 bytes in uncompressed form. Assuming a break even point of 2 bytes (and thus 2 byte pointer/offset pairs), and one byte newlines, this text compressed with LZSS becomes 94 bytes long: A color coded example of LZSS compression in action. 0: I am Sam 9: 10: (5,3) (0,4) 16: 17: That(4,4)-I-am!(19,16)I do not like 45: t(21,14) 49: Do you(58,5) green eggs and ham? 78: (49,14) them,(24,9).(112,15)(92,18). Note: this does not include the 12 bytes of flags indicating whether the next chunk of text is a pointer or a literal. Adding it, the text becomes 106 bytes long, which is still shorter than the original 177 bytes. == Implementations == Many popular archivers like PKZip, ARJ, RAR, ZOO, LHarc use LZSS rather than LZ77 as the primary compression algorithm; the encoding of literal characters and of length-distance pairs varies, with the most common option being Huffman coding. Most implementations stem from a public domain 1989 code by Haruhiko Okumura.Simtel.net mirror. Haruhiko Okumura implementation of 1989. Archived on February 3, 1999.Haruhiko Okumura. History of Data Compression in Japan. Archived on January 10, 2016. Version 4 of the Allegro library can encode and decode an LZSS format,, et al. Allegro source code: lzss.c. Accessed on July 13, 2016. but the feature was cut from version 5. The Game Boy Advance BIOS can decode a slightly modified LZSS format.Korth, Martin. . Accessed on August 3, 2008. Apple's Mac OS X uses LZSS as one of the compression methods for kernel code. == See also == * LZ77 * Lempel\u2013Ziv\u2013Welch (LZW) == References == Category:Lossless compression algorithms ",
    "title": "Lempel\u2013Ziv\u2013Storer\u2013Szymanski"
}