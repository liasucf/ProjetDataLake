{
    "id": "44230614",
    "text": "C++17 is a revision of the ISO/IEC 14882 standard for the C++ programming language. ==History== Before the C++ Standards Committee fixed a 3-year release cycle, C++17's release date was uncertain. In that time period, the C++17 revision was also called C++1z, following C++0x or C++1x for C++11 and C++1y for C++14. The C++17 specification reached the Draft International Standard (DIS) stage in March 2017. This DIS was unanimously approved, with only editorial comments, and the final standard was published in December 2017. Few changes were made to the C++ Standard Template Library, although some algorithms in the `` header were given support for explicit parallelization and some syntactic enhancements were made. ==Removed== This revision of C++ not only added new features but also removed a few. * Removal of trigraphs.IBM comment on preparing for a Trigraph-adverse future in C++17, IBM paper N4210, 2014-10-10. Authors: Michael Wong, Hubert Tong, Rajan Bhakta, Derek Inglis * Removal of some deprecated types and functions from the standard library, including `std::auto_ptr`, `std::random_shuffle`, and old function adaptors. These were superseded in C++11 by improved facilities such as `std::unique_ptr`, `std::shuffle`, `std::bind`, and lambdas. * Removal of the (formerly deprecated) use of the keyword as a storage class specifier. This keyword is now reserved and unused. ==New features== C++17 introduced many new features. The following lists may be incomplete. ===Language=== * Making the text message for optional * Allow (as an alternative to ) in a template template parameter * New rules for deduction from braced-init-list * Nested namespace definitions, e.g., instead of * Allowing attributes for namespaces and enumerators * New standard attributes , and * UTF-8 () character literals (UTF-8 string literals have existed since C++11; C++17 adds the corresponding character literals for consistency, though as they are restricted to a single byte they can only store ASCII) * Hexadecimal floating- point literals * Constant evaluation for all non-type template arguments * Fold expressions, for variadic templates * A compile-time static with the form * Structured binding declarations, allowing * Initializers in and statements *copy-initialization and direct-initialization of objects of type from prvalue expressions of type (ignoring top-level cv-qualifiers) shall result in no copy or move constructors from the prvalue expression. See copy elision for more information. * Some extensions on over-aligned memory allocation * Class template argument deduction (CTAD), introducing constructor deduction guides, eg. allowing instead of requiring explicit constructor arguments types or an additional helper template function . * Inline variables, which allows the definition of variables in header files without violating the one definition rule. The rules are effectively the same as inline functions * , allowing the availability of a header to be checked by preprocessor directives * Value of changed to * Exception specifications were made part of the function type ===Library=== * Most of Library Fundamentals TS I, including: **`std::string_view`, a read-only non-owning reference to a character sequence or string-slice ** `std::optional`, for representing optional objects, a data type that may not always be returned by a given algorithm with support for non-return ** `std::any`, for holding single values of any type * `std::uncaught_exceptions`, as a replacement of `std::uncaught_exception` in exception handling * New insertion functions `try_emplace` and `insert_or_assign` for `std::map` and `std::unordered_map` key-value associative data structures * Uniform container access: `std::size`, `std::empty` and `std::data` * Definition of \"contiguous iterators\" * A file system library based on `boost::filesystem` *Parallel versions of STL algorithms * Additional mathematical special functions, including elliptic integrals and Bessel functions * `std::variant`, a tagged union container * `std::byte`, allowing char to be replaced for data types intending to model a byte of data as a byte rather than a character * Logical operator traits: `std::conjunction`, `std::disjunction` and `std::negation` ==Compiler support== * GCC has had complete support for C++17 language features since version 8. * Clang 5 and later implement all the features of C++17. * Visual Studio 2017 15.8 (MSVC 19.15) supports all of C++17. ==Library support== * libstdc++ since version 9.1 has complete support for c++17 (8.1 without Parallelism TS and referring to C99 instead of C11) * libc++ as of version 9 has partial support for c++17, with the remainder \"in progress\" * MSVC Standard Library since 19.15 complete support for c++17 except for \"Elementary String Conversions\" and referring to C99 instead of C11. ==See also== *C++ compilers *C11 (C standard revision) *C18 (C standard revision) ==References== Category:C++ Category:C++ programming language family Category:Programming language standards Category:Articles with example C++ code ",
    "title": "C++17"
}