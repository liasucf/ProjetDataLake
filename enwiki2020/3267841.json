{
    "id": "3267841",
    "text": "A configuration management database (CMDB) is an ITIL database used by an organization to store information about hardware and software assets (commonly referred to as Configuration Items [CI]). It is useful to break down configuration items into logical layers. This database acts as a data warehouse for the organization and also stores information regarding the relationships among its assets. The CMDB provides a means of understanding the organization's critical assets and their relationships, such as information systems, upstream sources or dependencies of assets, and the downstream targets of assets. == Purpose and benefits == The CMDB is a fundamental component of the Information Technology Infrastructure Library (ITIL) framework's Configuration Management process. CMDBs are used to keep track of the state of assets such as products, systems, software, facilities, people as they exist at specific points in time, and the relationship between all assets. A CMDB helps an organization understand the relationship between the components of a system and to track their configurations. The maintenance of this information allows for certain actions, such as the reconstruction of assets, to occur at any point in time. CMDBs can also be used for things like impact analysis, root cause analysis, or change management. CMDB implementations often involve federation \u2013 the inclusion of data into the CMDB from other sources \u2013 such as asset management, in such a way that the source of the data retains control of the data. Federation is usually distinguished from ETL (extract, transform, load) solutions in which data is copied into the CMDB. CMDBs can be used for many things, including but not limited to: business intelligence, software and hardware builds, inventory, impact analysis for change management, and incident management. In the context of ITIL, the use of CMDBs is as part of infrastructure operations and support. The CMDB represents the authorized configuration of the significant components of the IT environment. == Contents == The CMDB contains and records data that are also called configuration items (CI). It also provides details about the important attributes of CIs and the relationships between them. === CI attributes and data === Attributes captured by a CMDB vary based on CI category, and can number up to the hundreds. Some examples include: * CI Unique Identifier or Identification Code * CI Name or Label (often, both long names and short names) * CI Abbreviations or Acronyms * CI Description * CI Ownership (organizations and people) * CI Importance Because attributes are defined by metadata, CMDBs also contain metadata, and thus the concept overlaps with that of a metadata repository, which is also used to more effectively run IT organizations. Configuration management addresses how the data is to be kept up to date. This has historically been a weakness of metadata repositories. === Relationships between CIs === At a minimum, relationships are often composed of a Source CI that is related to a Target CI. In the case of more advanced relationships, such as semantic relationships, it is desirable to have a descriptor between the Source CI and Target CI that helps provide context. For example, \"database\" is related as a \"Component\" of \"Application Y\". The descriptor is also known as a Predicate. === Configuration item types === A configuration item type (or CI type) is the data type of the element or configuration item an enterprise wishes to store within the CMDB. At a minimum, all software, hardware, network, and storage CI types are stored and tracked in a CMDB. As enterprises mature, they start to track business CI types in their CMDB, such as people, markets, products, and 3rd party entities such as vendors and partners. This allows the relationships between CIs to become more meaningful and the CMDB to become a stronger source for knowledge management. CI types are: *Hardware *Software * Communications/Networks * Location * Documentation * People (staff and contractors) A key success factor in implementing a CMDB is the ability to automatically discover information about the CIs (auto-discovery) and track changes as they happen. ==Schematic representations== CMDB schematic structures, also known as database schemas, take on multiple forms. Two of the most common forms are those of a relational data model and a semantic data model. Relational data models are based on first-order predicate logic and all data is represented in terms of tuples that are grouped into relations. In the relational model, related records are linked together with a \"key\", where the key is unique to an entry's data type definition. Such relational models provide declarative methods for specifying data and queries. In other words, users directly state what information the database contains and what information they want from it, and let the database system take care of describing data structures for storing the data and retrieval procedures for answering queries. Semantic data models typically rely on the resource description framework that maps the relation between a number of things through the use of relationship descriptors, giving context to how things are related to each other. == Challenges == There are three specific core challenges to creating and maintaining a Configuration Management DataBase: * Relevance: Collecting data throughout each record's or CI's life cycle is necessary. This means putting in processes and tools to collect the most recent changes to data as they occur. * Maintenance: Companies face constant change. Data about CIs and the relationships between them are constantly changing. This maintenance is a significant undertaking that is often not planned for or expected. Organisations often find this the greatest challenge. * Usability: Most CMDBs are just databases. This means they have no traits, features, or benefits of more complex applications. They lack tools to view data via complex visualisations or tools for advanced discovery. This means that most companies need to invest in an application layer that adds such constructs to their CMDB, which adds a layer of complexity and cost that most companies do not plan for or expect. However, implementing features that ensure the database is up to date or allow it to interact with systems to run commands, apply updates, or deploy new applications extends the functionality and usefulness of the CMDB. Because of the above reasons, companies usually choose to purchase their CMDBs, rather than designing, building, delivering, and supporting them themselves. == References == ==External links== * - Open Source Configuration Management Database * Collins: Infrastructure management for engineers * Guide to CMDB solution design Category:Information technology management Category:ITIL ",
    "title": "Configuration management database"
}