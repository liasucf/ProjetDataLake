{
    "id": "60230260",
    "text": "PureScript is a strongly-typed, purely-functional programming language that compiles to JavaScript. It can be used to develop web applications, server side apps, and also desktop applications with use of Electron. Its syntax is mostly comparable to that of Haskell. In addition, it introduces row polymorphism and extensible records. Also, contrary to Haskell, PureScript adheres to a strict evaluation strategy. == History == PureScript was initially designed by Phil Freeman in 2013. He started to work on PureScript as various attempts to compile Haskell to JavaScript while preserving its semantics (e.g. using Fay, Haste, or GHCJS) didn't work to his satisfaction. Since then it has been picked up by the community and is developed on GitHub. Additional core tools developed by the community include the dedicated build tool \"Pulp\", the documentation directory \"Pursuit\", and the package manager \"Spago\" == Features == PureScript features strict evaluation, persistent data structures and type inference. The PureScript type system shares many features with those of similar functional languages like Haskell: algebraic data types and pattern matching, higher kinded types, type classes and functional dependencies, and higher-rank polymorphism. PureScript's type system adds support for row polymorphism and extensible records. However, PureScript lacks support for some of the more advanced features of Haskell like GADTs and type families. The PureScript compiler attempts to produce readable JavaScript code, where possible. Through a simple FFI interface, it also allows the reuse of existing JavaScript code. PureScript supports incremental compilation, and the compiler distribution includes support for building source code editor plugins for iterative development. Editor plugins exist for many popular text editors, including Vim, Emacs, Sublime Text, Atom and Visual Studio Code. PureScript supports type-driven development via its typed holes feature, in which a program can be constructed with missing subexpressions. The compiler will subsequently attempt to infer the types of the missing subexpressions, and report those types to the user. This feature has inspired similar work in the GHC Haskell compiler. == Examples == Here is a minimal \"Hello world\" program in PureScript: module Main where import Effect.Console (log) main = log \"Hello World!\" Here, the type of the program is inferred and checked by the PureScript compiler. A more verbose version of the same program might include explicit type annotations: module Main where import Prelude import Effect (Effect) import Effect.Console (log) main :: Effect Unit main = log \"Hello World!\" == See also == * Elm: A domain-specific programming language for declaratively creating web browser-based graphical user interfaces * Reason: A syntax extension and toolchain for OCaml that can also transpile to JavaScript == References == == External links == * Official website * PureScript Playground Category:Functional languages Category:Pattern matching programming languages Category:Programming languages created in 2013 Category:Statically typed programming languages Category:2013 software ",
    "title": "PureScript"
}