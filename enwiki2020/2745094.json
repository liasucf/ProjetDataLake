{
    "id": "2745094",
    "text": "In logic and computer science, the Davis\u2013Putnam\u2013Logemann\u2013Loveland (DPLL) algorithm is a complete, backtracking-based search algorithm for deciding the satisfiability of propositional logic formulae in conjunctive normal form, i.e. for solving the CNF-SAT problem. It was introduced in 1962 by Martin Davis, George Logemann and Donald W. Loveland and is a refinement of the earlier Davis\u2013Putnam algorithm, which is a resolution-based procedure developed by Davis and Hilary Putnam in 1960. Especially in older publications, the Davis\u2013Logemann\u2013Loveland algorithm is often referred to as the \"Davis\u2013Putnam method\" or the \"DP algorithm\". Other common names that maintain the distinction are DLL and DPLL. After more than 50 years the DPLL procedure still forms the basis for most efficient complete SAT solvers. It has recently been extended for automated theorem proving for fragments of first-order logic by way of the DPLL(T) algorithm. == Implementations and applications == The SAT problem is important both from theoretical and practical points of view. In complexity theory it was the first problem proved to be NP-complete, and can appear in a broad variety of applications such as model checking, automated planning and scheduling, and diagnosis in artificial intelligence. As such, it has been a hot topic in research for many years, and competitions between SAT solvers regularly take place. DPLL's modern implementations like Chaff and zChaff, GRASP or Minisat are in the first places of the competitions these last years. Another application that often involves DPLL is automated theorem proving or satisfiability modulo theories (SMT), which is a SAT problem in which propositional variables are replaced with formulas of another mathematical theory. ==The algorithm== The basic backtracking algorithm runs by choosing a literal, assigning a truth value to it, simplifying the formula and then recursively checking if the simplified formula is satisfiable; if this is the case, the original formula is satisfiable; otherwise, the same recursive check is done assuming the opposite truth value. This is known as the splitting rule, as it splits the problem into two simpler sub-problems. The simplification step essentially removes all clauses that become true under the assignment from the formula, and all literals that become false from the remaining clauses. The DPLL algorithm enhances over the backtracking algorithm by the eager use of the following rules at each step: ; Unit propagation : If a clause is a unit clause, i.e. it contains only a single unassigned literal, this clause can only be satisfied by assigning the necessary value to make this literal true. Thus, no choice is necessary. In practice, this often leads to deterministic cascades of units, thus avoiding a large part of the naive search space. ; Pure literal elimination : If a propositional variable occurs with only one polarity in the formula, it is called pure. Pure literals can always be assigned in a way that makes all clauses containing them true. Thus, these clauses do not constrain the search anymore and can be deleted. Unsatisfiability of a given partial assignment is detected if one clause becomes empty, i.e. if all its variables have been assigned in a way that makes the corresponding literals false. Satisfiability of the formula is detected either when all variables are assigned without generating the empty clause, or, in modern implementations, if all clauses are satisfied. Unsatisfiability of the complete formula can only be detected after exhaustive search. The DPLL algorithm can be summarized in the following pseudocode, where \u03a6 is the CNF formula: Input: A set of clauses \u03a6. Output: A Truth Value. function DPLL(\u03a6) if \u03a6 is a consistent set of literals then return true; if \u03a6 contains an empty clause then return false; for every unit clause {l} in \u03a6 do \u03a6 \u2190 unit-propagate(l, \u03a6); for every literal l that occurs pure in \u03a6 do \u03a6 \u2190 pure-literal-assign(l, \u03a6); l \u2190 choose- literal(\u03a6); return DPLL(\u03a6 \u2227 {l}) or DPLL(\u03a6 \u2227 {not(l)}); In this pseudocode, `unit-propagate(l, \u03a6)` and `pure-literal-assign(l, \u03a6)` are functions that return the result of applying unit propagation and the pure literal rule, respectively, to the literal `l` and the formula `\u03a6`. In other words, they replace every occurrence of `l` with \"true\" and every occurrence of `not l` with \"false\" in the formula `\u03a6`, and simplify the resulting formula. The `or` in the `return` statement is a short-circuiting operator. `\u03a6 \u2227 {l}` denotes the simplified result of substituting \"true\" for `l` in `\u03a6`. The algorithm terminates in one of two cases. Either the CNF formula \u03a6 is found to comprise a consistent set of literals--that is, there is no `l` and `\u00acl` for any literal `l` in the formula. If this is the case, the variables can be trivially satisfied by setting them to the respective polarity of the encompassing literal in the valuation. Otherwise, when the formula contains an empty clause, the clause is vacuously false because a disjunction requires at least one member that is true for the overall set to be true. In this case, the existence of such a clause implies that the formula (evaluated as a conjunction of all clauses) cannot evaluate to true and must be unsatisfiable. The pseudocode DPLL function only returns whether the final assignment satisfies the formula or not. In a real implementation, the partial satisfying assignment typically is also returned on success; this can be derived from the consistent set of literals of the first `if` statement of the function. The Davis\u2013Logemann\u2013Loveland algorithm depends on the choice of branching literal, which is the literal considered in the backtracking step. As a result, this is not exactly an algorithm, but rather a family of algorithms, one for each possible way of choosing the branching literal. Efficiency is strongly affected by the choice of the branching literal: there exist instances for which the running time is constant or exponential depending on the choice of the branching literals. Such choice functions are also called heuristic functions or branching heuristics. ===Visualization=== Davis, Logemann, Loveland (1962) had developed this algorithm. Some properties of this original algorithm are: * It is based on search. * It is the basis for almost all modern SAT solvers. * It does not use learning or non-chronological backtracking (introduced in 1996). An example with visualization of a DPLL algorithm having chronological backtracking: Image:Dpll1.png|All clauses making a CNF formula Image:Dpll2.png|Pick a variable Image:Dpll3.png|Make a decision, variable a = False (0), thus green clauses becomes True Image:Dpll4.png|After making several decisions, we find an implication graph that leads to a conflict. Image:Dpll5.png|Now backtrack to immediate level and by force assign opposite value to that variable Image:Dpll6.png|But a forced decision still leads to another conflict Image:Dpll7.png|Backtrack to previous level and make a forced decision Image:Dpll8.png|Make a new decision, but it leads to a conflict Image:Dpll9.png|Make a forced decision, but again it leads to a conflict Image:Dpll10.png|Backtrack to previous level Image:Dpll11.png|Continue in this way and the final implication graph ==Current work== In the 2010s years, work on improving the algorithm has been done on three directions: # Defining different policies for choosing the branching literals. # Defining new data structures to make the algorithm faster, especially the part on unit propagation # Defining variants of the basic backtracking algorithm. The latter direction include non-chronological backtracking (aka backjumping) and clause learning. These refinements describe a method of backtracking after reaching a conflict clause which \"learns\" the root causes (assignments to variables) of the conflict in order to avoid reaching the same conflict again. The resulting Conflict-Driven Clause Learning SAT solvers are the state of the art in 2014. A newer algorithm from 1990 is St\u00e5lmarck's method. Also since 1986 (reduced ordered) binary decision diagrams have also been used for SAT solving. == Relation to other notions == Runs of DPLL-based algorithms on unsatisfiable instances correspond to tree resolution refutation proofs. ==See also== *Proof complexity *Herbrandization ==References== General * * * * Specific == Further reading == * * Category:Constraint programming Category:Automated theorem proving Category:SAT solvers Category:Articles with example pseudocode ",
    "title": "DPLL algorithm"
}