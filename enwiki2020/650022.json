{
    "id": "650022",
    "text": "In numerical analysis, Richardson extrapolation is a sequence acceleration method, used to improve the rate of convergence of a sequence of estimates of some value A^\\ast = \\lim_{h\\to 0} A(h). In essence, given the value of A(h) for several values of h, we can estimate A^\\ast by extrapolating the estimates to h=0. It is named after Lewis Fry Richardson, who introduced the technique in the early 20th century. In the words of Birkhoff and Rota, \"its usefulness for practical computations can hardly be overestimated.\"Page 126 of Practical applications of Richardson extrapolation include Romberg integration, which applies Richardson extrapolation to the trapezoid rule, and the Bulirsch\u2013Stoer algorithm for solving ordinary differential equations. ==Example of Richardson extrapolation== Suppose that we wish to approximate A^*, and we have a method A(h) that depends on a small parameter h in such a way that A(h) = A^\\ast + C h^n + O(h^{n+1}). Let us define a new function R(h,t) := \\frac{ t^n A(h/t) - A(h)}{t^n-1} where h and \\frac{h}{t} are two distinct step sizes. Then R(h, t) = \\frac{ t^n ( A^* + C \\left(\\frac{h}{t}\\right)^n + O(h^{n+1}) ) - ( A^* + C h^n + O(h^{n+1}) ) }{ t^n - 1} = A^* + O(h^{n+1}). R(h,t) is called the Richardson extrapolation of A(h), and has a higher-order error estimate O(h^{n+1}) compared to A(h) . Very often, it is much easier to obtain a given precision by using R(h) rather than A(h') with a much smaller h' . Where A(h') can cause problems due to limited precision (rounding errors) and/or due to the increasing number of calculations needed (see examples below). ==General formula== Let A(h) be an approximation of A^*(exact value) that depends on a positive step size h with an error formula of the form : A^* = A(h)+a_0h^{k_0} + a_1h^{k_1} + a_2h^{k_2} + \\cdots where the ai are unknown constants and the ki are known constants such that hki > hki+1. k0 is the leading order step size behavior of Truncation error as A^*=A(h)+O(h^{k_0}) The exact value sought can be given by : A^* = A(h) + a_0h^{k_0} + a_1h^{k_1} + a_2h^{k_2} + \\cdots which can be simplified with Big O notation to be : A^* = A(h)+ a_0h^{k_0} + O(h^{k_1}). \\,\\\\! Using the step sizes h and h / t for some constant t, the two formulas for A are: : A^* = A(h)+ a_0h^{k_0} + O(h^{k_1}) \\,\\\\! : A^* = A\\\\!\\left(\\frac{h}{t}\\right) + a_0\\left(\\frac{h}{t}\\right)^{k_0} + O(h^{k_1}) . Multiplying the second equation by tk0 and subtracting the first equation gives : (t^{k_0}-1)A^* = t^{k_0}A\\left(\\frac{h}{t}\\right) - A(h) + (t^{k_0}-1)O(h^{k_1}) which can be solved for A^* to give :A^* = \\frac{t^{k_0}A\\left(\\frac{h}{t}\\right) - A(h)}{t^{k_0}-1} + O(h^{k_1}) . Therefore, using R(h,t)=\\frac{t^{k_0}A\\left(\\frac{h}{t}\\right)-A(h)}{t^{k_0}-1} the truncation error has been reduced to O(h^{k_1}) . This is in contrast to A(h) where the truncation error is O(h^{k_0}) for the same step size h By this process, we have achieved a better approximation of A by subtracting the largest term in the error which was O(hk0). This process can be repeated to remove more error terms to get even better approximations. A general recurrence relation beginning with A_0=A(h) can be defined for the approximations by : A_{i+1}(h) = \\frac{t^{k_i}A_i\\left(\\frac{h}{t}\\right) - A_i(h)}{t^{k_i}-1} where k_{i+1} satisfies : A^* = A_{i+1}(h) + O(h^{k_{i+1}}) . The Richardson extrapolation can be considered as a linear sequence transformation. Additionally, the general formula can be used to estimate k0 (leading order step size behavior of Truncation error) when neither its value nor A* (exact value) is known a priori. Such a technique can be useful for quantifying an unknown rate of convergence. Given approximations of A from three distinct step sizes h, h / t, and h / s, the exact relationship :A^*=\\frac{t^{k_0}A\\left(\\frac{h}{t}\\right) - A(h)}{t^{k_0}-1} + O(h^{k_1}) = \\frac{s^{k_0}A\\left(\\frac{h}{s}\\right) - A(h)}{s^{k_0}-1} + O(h^{k_1}) yields an approximate relationship (please note that the notation here may cause a bit of confusion, the two O appearing in the equation above only indicates the leading order step size behavior but their explicit forms are different and hence cancelling out of the two O terms is approximately valid) :A\\left(\\frac{h}{t}\\right) + \\frac{A\\left(\\frac{h}{t}\\right) - A(h)}{t^{k_0}-1} \\approx A\\left(\\frac{h}{s}\\right) +\\frac{A\\left(\\frac{h}{s}\\right) - A(h)}{s^{k_0}-1} which can be solved numerically to estimate k0 for some arbitrary choices of h, s and t. ==Example pseudocode code for Richardson extrapolation== The following pseudocode in MATLAB style demonstrates Richardson extrapolation to help solve the ODE y'(t) = -y^2, y(0) = 1 with the Trapezoidal method. In this example we halve the step size h each iteration and so in the discussion above we'd have that t = 2. The error of the Trapezoidal method can be expressed in terms of odd powers so that the error over multiple steps can be expressed in even powers; this leads us to raise t to the second power and to take powers of 4 = 2^2 = t^2 in the pseudocode. We want to find the value of y(5), which has the exact solution of \\frac{1}{5 + 1} = \\frac{1}{6} = 0.1666... since the exact solution of the ODE is y(t) = \\frac{1}{1 + t}. This pseudocode assumes that a function called `Trapezoidal(f, tStart, tEnd, h, y0)` exists which attempts to computes `y(tEnd)` by performing the trapezoidal method on the function `f`, with starting point `y0` and `tStart` and step size `h`. Note that starting with too small an initial step size can potentially introduce error into the final solution. Although there are methods designed to help pick the best initial step size, one option is to start with a large step size and then to allow the Richardson extrapolation to reduce the step size each iteration until the error reaches the desired tolerance. tStart = 0 % Starting time tEnd = 5 % Ending time f = -y^2 % The derivative of y, so y' = f(t, y(t)) = -y^2 % The solution to this ODE is y = 1/(1 + t) y0 = 1 % The initial position (i.e. y0 = y(tStart) = y(0) = 1) tolerance = 10^-11 % 10 digit accuracy is desired maxRows = 20 % Don't allow the iteration to continue indefinitely initialH = tStart - tEnd % Pick an initial step size haveWeFoundSolution = false % Were we able to find the solution to within the desired tolerance? not yet. h = initialH % Create a 2D matrix of size maxRows by maxRows to hold the Richardson extrapolates % Note that this will be a lower triangular matrix and that at most two rows are actually % needed at any time in the computation. A = zeroMatrix(maxRows, maxRows) %Compute the top left element of the matrix A(1, 1) = Trapezoidal(f, tStart, tEnd, h, y0) % Each row of the matrix requires one call to Trapezoidal % This loops starts by filling the second row of the matrix, since the first row was computed above for i = 1 : maxRows - 1 % Starting at i = 1, iterate at most maxRows - 1 times h = h/2 % Half the previous value of h since this is the start of a new row % Call the Trapezoidal function with this new smaller step size A(i + 1, 1) = Trapezoidal(f, tStart, tEnd, h, y0) for j = 1 : i % Go across the row until the diagonal is reached % Use the value just computed (i.e. A(i + 1, j)) and the element from the % row above it (i.e. A(i, j)) to compute the next Richardson extrapolate A(i + 1, j + 1) = ((4^j).*A(i + 1, j) - A(i, j))/(4^j - 1); end % After leaving the above inner loop, the diagonal element of row i + 1 has been computed % This diagonal element is the latest Richardson extrapolate to be computed. % The difference between this extrapolate and the last extrapolate of row i is a good % indication of the error. if (absoluteValue(A(i + 1, i + 1) - A(i, i)) < tolerance) % If the result is within tolerance print(\"y(5) = \", A(i + 1, i + 1)) % Display the result of the Richardson extrapolation haveWeFoundSolution = true break % Done, so leave the loop end end if (haveWeFoundSolution == false) % If we weren't able to find a solution to within the desired tolerance print(\"Warning: Not able to find solution to within the desired tolerance of \", tolerance); print(\"The last computed extrapolate was \", A(maxRows, maxRows)) end ==See also== * Aitken's delta-squared process * Takebe Kenko * Richardson iteration ==References== *Extrapolation Methods. Theory and Practice by C. Brezinski and M. Redivo Zaglia, North-Holland, 1991. *Ivan Dimov, Zahari Zlatev, Istvan Farago, Agnes Havasi: Richardson Extrapolation: Practical Aspects and Applications, Walter de Gruyter GmbH & Co KG, (2017). ==External links== *Fundamental Methods of Numerical Extrapolation With Applications, mit.edu *Richardson-Extrapolation * Richardson extrapolation on a website of Robert Israel (University of British Columbia) * Matlab code for generic Richardson extrapolation. * Julia code for generic Richardson extrapolation. Category:Numerical analysis Category:Asymptotic analysis Category:Articles with example MATLAB/Octave code ",
    "title": "Richardson extrapolation"
}