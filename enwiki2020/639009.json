{
    "id": "639009",
    "text": "In software development, agile (sometimes written Agile) practices approach discovering requirements and developing solutions through the collaborative effort of self-organizing and cross-functional teams and their customer(s)/end user(s). It advocates adaptive planning, evolutionary development, early delivery, and continual improvement, and it encourages flexible responses to change. It was popularized by the Manifesto for Agile Software Development. The values and principles espoused in this manifesto were derived from and underpin a broad range of software development frameworks, including Scrum and Kanban. While there is much anecdotal evidence that adopting agile practices and values improves the agility of software professionals, teams and organizations, the empirical evidence is mixed and hard to find. ==History== Iterative and incremental software development methods can be traced back as early as 1957,Gerald M. Weinberg, as quoted in \"We were doing incremental development as early as 1957 in Los Angeles, under the direction of Bernie Dimsdale at IBM's Service Bureau Corporation. He was a colleague of John von Neumann, so perhaps he learned it there, or assumed it as totally natural. I do remember Herb Jacobs (primarily, though we all participated) developing a large simulation for Motorola, where the technique used was, as far as I can tell ... All of us, as far as I can remember, thought waterfalling of a huge project was rather stupid, or at least ignorant of the realities. I think what the waterfall description did for us was make us realize that we were doing something else, something unnamed except for 'software development.'\" with evolutionary project management and adaptive software development emerging in the early 1970s. During the 1990s, a number of lightweight software development methods evolved in reaction to the prevailing heavyweight methods (often referred to collectively as waterfall) that critics described as overly regulated, planned, and micro-managed. These included: rapid application development (RAD), from 1991; the unified process (UP) and dynamic systems development method (DSDM), both from 1994; Scrum, from 1995; Crystal Clear and extreme programming (XP), both from 1996; and feature-driven development, from 1997. Although these all originated before the publication of the Agile Manifesto, they are now collectively referred to as agile software development methods. At the same time, similar changes were underway in manufacturingIacocca Institute (1991). \"21st Century Manufacturing Enterprise Strategy: An Industry Led View\". Iacocca Institute, Lehigh University, Bethlehem, PA.Presley, A., J. Mills and D. Liles (1995). \"Agile Aerospace Manufacturing\". Nepcon East 1995, Boston. and management thinking. In 2001, these seventeen software developers met at a resort in Snowbird, Utah to discuss these lightweight development methods: Kent Beck, Ward Cunningham, Dave Thomas, Jeff Sutherland, Ken Schwaber, Jim Highsmith, Alistair Cockburn, Robert C. Martin, Mike Beedle, Arie van Bennekum, Martin Fowler, James Grenning, Andrew Hunt, Ron Jeffries, Jon Kern, Brian Marick, and Steve Mellor. Together they published the Manifesto for Agile Software Development. In 2005, a group headed by Cockburn and Highsmith wrote an addendum of project management principles, the PM Declaration of Interdependence, to guide software project management according to agile software development methods. In 2009, a group working with Martin wrote an extension of software development principles, the Software Craftsmanship Manifesto, to guide agile software development according to professional conduct and mastery. In 2011, the Agile Alliance created the Guide to Agile Practices (renamed the Agile Glossary in 2016), an evolving open-source compendium of the working definitions of agile practices, terms, and elements, along with interpretations and experience guidelines from the worldwide community of agile practitioners. == The Manifesto for Agile Software Development == === Agile software development values === Based on their combined experience of developing software and helping others do that, the seventeen signatories to the manifesto proclaimed that they value: * * * * That is to say, the items on the left are valued more than the items on the right. As Scott Ambler elucidated: * Tools and processes are important, but it is more important to have competent people working together effectively. *Good documentation is useful in helping people to understand how the software is built and how to use it, but the main point of development is to create software, not documentation. *A contract is important but is no substitute for working closely with customers to discover what they need. *A project plan is important, but it must not be too rigid to accommodate changes in technology or the environment, stakeholders' priorities, and people's understanding of the problem and its solution. Some of the authors formed the Agile Alliance, a non-profit organization that promotes software development according to the manifesto's values and principles. Introducing the manifesto on behalf of the Agile Alliance, Jim Highsmith said, === Agile software development principles === The Manifesto for Agile Software Development is based on twelve principles: # Customer satisfaction by early and continuous delivery of valuable software. # Welcome changing requirements, even in late development. # Deliver working software frequently (weeks rather than months) # Close, daily cooperation between business people and developers # Projects are built around motivated individuals, who should be trusted # Face-to-face conversation is the best form of communication (co-location) # Working software is the primary measure of progress # Sustainable development, able to maintain a constant pace # Continuous attention to technical excellence and good design # Simplicity\u2014the art of maximizing the amount of work done\u2014is essential # Best architectures, requirements, and designs emerge from self- organizing teams # Regularly, the team reflects on how to become more effective, and adjusts accordingly ==Overview== Pair programming, an agile development technique used by XP. ===Iterative, incremental, and evolutionary=== Most agile development methods break product development work into small increments that minimize the amount of up-front planning and design. Iterations, or sprints, are short time frames (timeboxes) that typically last from one to four weeks. Each iteration involves a cross- functional team working in all functions: planning, analysis, design, coding, unit testing, and acceptance testing. At the end of the iteration a working product is demonstrated to stakeholders. This minimizes overall risk and allows the product to adapt to changes quickly. An iteration might not add enough functionality to warrant a market release, but the goal is to have an available release (with minimal bugs) at the end of each iteration. Multiple iterations might be required to release a product or new features. Working software is the primary measure of progress. ===Efficient and face-to-face communication=== The principle of co-location is that co-workers on the same team should be situated together to better establish the identity as a team and to improve communication. This enables face-to-face interaction, ideally in front of a whiteboard, that reduces the cycle time typically taken when questions and answers are mediated through phone, persistent chat, wiki, or email. No matter which development method is followed, every team should include a customer representative (\"Product Owner\" in Scrum). This person is agreed by stakeholders to act on their behalf and makes a personal commitment to being available for developers to answer questions throughout the iteration. At the end of each iteration, stakeholders and the customer representative review progress and re-evaluate priorities with a view to optimizing the return on investment (ROI) and ensuring alignment with customer needs and company goals. In agile software development, an information radiator is a (normally large) physical display located prominently near the development team, where passers-by can see it. It presents an up-to-date summary of the product development status. A build light indicator may also be used to inform a team about the current status of their product development. ===Very short feedback loop and adaptation cycle=== A common characteristic in agile software development is the daily stand-up (a daily scrum in Scrum framework). In a brief session, team members report to each other what they did the previous day toward their team's iteration goal, what they intend to do today toward the goal, and any roadblocks or impediments they can see to the goal. ===Quality focus=== Specific tools and techniques, such as continuous integration, automated unit testing, pair programming, test-driven development, design patterns, behavior-driven development, domain-driven design, code refactoring and other techniques are often used to improve quality and enhance product development agility. This is predicated on designing and building quality in from the beginning and being able to demonstrate software for customers at any point, or at least at the end of every iteration. ==Philosophy== Compared to traditional software engineering, agile software development mainly targets complex systems and product development with dynamic, non-deterministic and non-linear characteristics. Accurate estimates, stable plans, and predictions are often hard to get in early stages, and confidence in them is likely to be low. Agile practitioners will seek to reduce the leap-of-faith that is needed before any evidence of value can be obtained. Requirements and design are held to be emergent. Big up-front specifications would probably cause a lot of waste in such cases, i.e., are not economically sound. These basic arguments and previous industry experiences, learned from years of successes and failures, have helped shape agile development's favor of adaptive, iterative and evolutionary development. === Adaptive vs. predictive === Development methods exist on a continuum from adaptive to predictive. Appendix A, pages 165\u2013194 Agile software development methods lie on the adaptive side of this continuum. One key of adaptive development methods is a rolling wave approach to schedule planning, which identifies milestones but leaves flexibility in the path to reach them, and also allows for the milestones themselves to change. Adaptive methods focus on adapting quickly to changing realities. When the needs of a project change, an adaptive team changes as well. An adaptive team has difficulty describing exactly what will happen in the future. The further away a date is, the more vague an adaptive method is about what will happen on that date. An adaptive team cannot report exactly what tasks they will do next week, but only which features they plan for next month. When asked about a release six months from now, an adaptive team might be able to report only the mission statement for the release, or a statement of expected value vs. cost. Predictive methods, in contrast, focus on analysing and planning the future in detail and cater for known risks. In the extremes, a predictive team can report exactly what features and tasks are planned for the entire length of the development process. Predictive methods rely on effective early phase analysis and if this goes very wrong, the project may have difficulty changing direction. Predictive teams often institute a change control board to ensure they consider only the most valuable changes. Risk analysis can be used to choose between adaptive (agile or value-driven) and predictive (plan-driven) methods. Barry Boehm and Richard Turner suggest that each side of the continuum has its own home ground, as follows: {| class=\"wikitable\" |+ Home grounds of different development methods |- ! style=\"width: 33%\" | Value-driven methods ! style=\"width: 33%\" | Plan-driven methods ! Formal methods |- | Low criticality | High criticality | Extreme criticality |- | Senior developers | Junior developers(?) | Senior developers |- | Requirements change often | Requirements do not change often | Limited requirements, limited features see Wirth's law |- | Small number of developers | Large number of developers | Requirements that can be modeled |- | Culture that responds to change | Culture that demands order | Extreme quality |} === Agile vs. waterfall === One of the differences between agile software development methods and waterfall is the approach to quality and testing. In the waterfall model, work moves through Software Development Lifecycle (SDLC) phases\u2014with one phase being completed before another can start\u2014hence the testing phase is separate and follows a build phase. In agile software development, however, testing is completed in the same iteration as programming. Because testing is done in every iteration\u2014which develops a small piece of the software\u2014users can frequently use those new pieces of software and validate the value. After the users know the real value of the updated piece of software, they can make better decisions about the software's future. Having a value retrospective and software re-planning session in each iteration\u2014Scrum typically has iterations of just two weeks\u2014helps the team continuously adapt its plans so as to maximize the value it delivers. This follows a pattern similar to the Plan-Do- Check-Act (PDCA) cycle, as the work is planned, done, checked (in the review and retrospective), and any changes agreed are acted upon. This iterative approach supports a product rather than a project mindset. This provides greater flexibility throughout the development process; whereas on projects the requirements are defined and locked down from the very beginning, making it difficult to change them later. Iterative product development allows the software to evolve in response to changes in business environment or market requirements. Because of the short iteration style of agile software development, it also has strong connections with the lean startup concept. === Code vs. documentation === In a letter to IEEE Computer, Steven Rakitin expressed cynicism about agile software development, calling it \"yet another attempt to undermine the discipline of software engineering\" and translating \"working software over comprehensive documentation\" as \"we want to spend all our time coding. Remember, real programmers don't write documentation.\" This is disputed by proponents of agile software development, who state that developers should write documentation if that is the best way to achieve the relevant goals, but that there are often better ways to achieve those goals than writing static documentation. Scott Ambler states that documentation should be \"just barely good enough\" (JBGE), that too much or comprehensive documentation would usually cause waste, and developers rarely trust detailed documentation because it's usually out of sync with code, while too little documentation may also cause problems for maintenance, communication, learning and knowledge sharing. Alistair Cockburn wrote of the Crystal Clear method: ==Agile software development methods== Software development life-cycle support Agile software development methods support a broad range of the software development life cycle. Some methods focus on the practices (e.g., XP, pragmatic programming, agile modeling), while some focus on managing the flow of work (e.g., Scrum, Kanban). Some support activities for requirements specification and development (e.g., FDD), while some seek to cover the full development life cycle (e.g., DSDM, RUP). Notable agile software development frameworks include: {| class=\"wikitable\" ! Framework ! Main contributor(s) |- | Adaptive software development (ASD) || Jim Highsmith, Sam Bayer |- | Agile modeling || Scott Ambler, Robert Cecil Martin |- | Agile unified process (AUP) || Scott Ambler |- | Disciplined agile delivery || Scott Ambler |- | Dynamic systems development method (DSDM) || |- | Extreme programming (XP) || Kent Beck, Robert Cecil Martin |- | Feature-driven development (FDD) || Jeff De Luca |- | Lean software development || Mary Poppendieck, Tom Poppendieck |- | Lean startup || Eric Ries |- | Kanban || Taiichi Ohno |- | Rapid application development (RAD) || James Martin |- | Scrum || Ken Schwaber, Jeff Sutherland |- | Scrumban || |- | Scaled Agile Framework - SAFe || Scaled Agile, Inc. |} === Agile software development practices === Agile software development is supported by a number of concrete practices, covering areas like requirements, design, modeling, coding, testing, planning, risk management, process, quality, etc. Some notable agile software development practices include: {| class=\"wikitable\" ! Practice ! Main contributor(s) |- |Acceptance test-driven development (ATDD) || |- | Agile modeling || |- | Agile testing || |- |Backlogs (Product and Sprint)|| Ken Schwaber |- |Behavior-driven development (BDD) || Dan North, Liz Keogh |- |Continuous integration (CI) || Grady Booch |- |Cross-functional team || |- |Daily Stand-up / Daily Scrum |James O Coplien |- |Domain-driven design (DDD) || Eric Evans |- | Iterative and incremental development (IID) || |- |Low-code development platforms || |- |Pair programming || Kent Beck |- |Planning poker || James Grenning, Mike Cohn |- |Refactoring || Martin Fowler |- |Retrospective || |- |Scrum events (sprint planning, sprint review and retrospective) || |- | Specification by example || |- |Story-driven modeling || Albert Z\u00fcndorf |- | Test-driven development (TDD) || Kent Beck |- |Timeboxing || |- | User story || Alistair Cockburn |- | Velocity tracking || |} ===Method tailoring=== In the literature, different terms refer to the notion of method adaptation, including 'method tailoring', 'method fragment adaptation' and 'situational method engineering'. Method tailoring is defined as: Situation-appropriateness should be considered as a distinguishing characteristic between agile methods and more plan-driven software development methods, with agile methods allowing product development teams to adapt working practices according to the needs of individual products. Potentially, most agile methods could be suitable for method tailoring, such as DSDM tailored in a CMM context.Abrahamsson, P., Warsta, J., Siponen, M.T., & Ronkainen, J. (2003). New Directions on Agile Methods: A Comparative Analysis. Proceedings of ICSE'03, 244-254 and XP tailored with the Rule Description Practices (RDP) technique. Not all agile proponents agree, however, with Schwaber noting \"that is how we got into trouble in the first place, thinking that the problem was not having a perfect methodology. Efforts [should] center on the changes [needed] in the enterprise\".Schwaber, K (2006) Scrum is hard and disruptive. Bas Vodde reinforced this viewpoint, suggesting that unlike traditional, large methodologies that require you to pick and choose elements, Scrum provides the basics on top of which you add additional elements to localise and contextualise its use.Vodde, B (2016) The Story of LeSS. Closing Keynote. Scrum Australia, Melbourne. April, 2016. Practitioners seldom use system development methods, or agile methods specifically, by the book, often choosing to omit or tailor some of the practices of a method in order to create an in-house method.Lagstedt, A., and Dahlberg, T. (2018). Understanding the Rarity of ISD Method Selection \u2013 Bounded Rationality and Functional Stupidity. PACIS 2018 Proceedings. 154. https://aisel.aisnet.org/pacis2018/154. In practice, methods can be tailored using various tools. Generic process modeling languages such as Unified Modeling Language can be used to tailor software development methods. However, dedicated tools for method engineering such as the Essence Theory of Software Engineering of SEMAT also exist.Park, J. S., McMahon, P. E., and Myburgh, B. (2016). Scrum Powered by Essence. ACM SIGSOFT Software Engineering Notes, 41(1), pp. 1\u20138. === Large-scale, offshore and distributed === Agile software development has been widely seen as highly suited to certain types of environments, including small teams of experts working on greenfield projects, and the challenges and limitations encountered in the adoption of agile software development methods in a large organization with legacy infrastructure are well-documented and understood. In response, a range of strategies and patterns has evolved for overcoming challenges with large-scale development efforts (>20 developers)Schaaf, R.J. (2007). Agility XL Systems and Software Technology Conference 2007 , Tampa, FL or distributed (non- colocated) development teams, amongst other challenges; and there are now several recognised frameworks that seek to mitigate or avoid these challenges. * Scaled agile framework (SAFe), Dean Leffingwell et al * Disciplined agile delivery (DAD), Scott Ambler et al * Large-scale scrum (LeSS), Craig Larman and Bas Vodde * Nexus (scaled professional Scrum), Ken Schwaber * Scrum at Scale, Jeff Sutherland, Alex Brown * Enterprise Scrum, Mike Beedle * Setchu (Scrum-based lightweight framework), Michael Ebbage * XSCALE * Agile path \\-- * Holistic Software Development There are many conflicting viewpoints on whether all of these are effective or indeed fit the definition of agile development, and this remains an active and ongoing area of research.W. Scott Ambler (2006) Supersize Me in Dr. Dobb's Journal, 15 February 2006.Agile Processes Workshop II Managing Multiple Concurrent Agile Projects. Washington: OOPSLA 2002 When agile software development is applied in a distributed setting (with teams dispersed across multiple business locations), it is commonly referred to as Distributed agile software development. The goal is to leverage the unique benefits offered by each approach. Distributed development allows organizations to build software by strategically setting up teams in different parts of the globe, virtually building software round-the-clock (more commonly referred to as follow-the-sun model). On the other hand, agile development provides increased transparency, continuous feedback, and more flexibility when responding to changes. === Regulated domains === Agile software development methods were initially seen as best suitable for non- critical product developments, thereby excluded from use in regulated domains such as medical devices, pharmaceutical, financial, nuclear systems, automotive, and avionics sectors, etc. However, in the last several years, there have been several initiatives for the adaptation of agile methods for these domains.Thor Myklebust, Tor St\u00e5lhane, Geir Kjetil Hanssen, Tormod Wien and B\u00f8rge Haugset: Scrum, documentation and the IEC 61508-3:2010 software standard, http://www.sintef.no/globalassets/ec-61508-documentation-and- safescrum-psam12.pdf There are numerous standards that may apply in regulated domains, including ISO 26262, ISO 9000, ISO 9001, and ISO/IEC 15504. A number of key concerns are of particular importance in regulated domains: * Quality assurance (QA): Systematic and inherent quality management underpinning a controlled professional process and reliability and correctness of product. * Safety and security: Formal planning and risk management to mitigate safety risks for users and securely protecting users from unintentional and malicious misuse. *Traceability: Documentation providing auditable evidence of regulatory compliance and facilitating traceability and investigation of problems. * Verification and Validation (V&V;): Embedded throughout the software development process (e.g. user requirements specification, functional specification, design specification, code review, unit tests, integration tests, system tests). ==Experience and adoption== Although agile software development methods can be used with any programming paradigm or language in practice, they were originally closely associated with object-oriented environments such as Smalltalk and Lisp and later Java. The initial adopters of agile methods were usually small to medium-sized teams working on unprecedented systems with requirements that were difficult to finalize and likely to change as the system was being developed. This section describes common problems that organizations encounter when they try to adopt agile software development methods as well as various techniques to measure the quality and performance of agile teams. ===Measuring agility=== The best agile practitioners have always emphasized thorough engineering principles. As a result, there are a number of best practices and tools for measuring the performance of agile software development and teams. ==== Internal assessments ==== The Agility measurement index, amongst others, rates developments against five dimensions of product development (duration, risk, novelty, effort, and interaction). Other techniques are based on measurable goals and one study suggests that velocity can be used as a metric of agility.Kurian, Tisni (2006). Agility Metrics: A Quantitative Fuzzy Based Approach for Measuring Agility of a Software Process, ISAM-Proceedings of International Conference on Agile Manufacturing'06(ICAM-2006), Norfolk, U.S. There are also agile self- assessments to determine whether a team is using agile software development practices (Nokia test, Karlskrona test, 42 points test). ====Public surveys==== One of the early studies reporting gains in quality, productivity, and business satisfaction by using agile software developments methods was a survey conducted by Shine Technologies from November 2002 to January 2003. A similar survey, the State of Agile, is conducted every year starting in 2006 with thousands of participants from around the software development community. This tracks trends on the benefits of agility, lessons learned, and good practices. Each survey has reported increasing numbers saying that agile software development helps them deliver software faster; improves their ability to manage changing customer priorities; and increases their productivity. Surveys have also consistently shown better results with agile product development methods compared to classical project management.Status Quo Agile, Second study on success and forms of usage of agile methods. Retrieved 1 July 2015 In balance, there are reports that some feel that agile development methods are still too young to enable extensive academic research of their success. ===Common agile software development pitfalls=== Organizations and teams implementing agile software development often face difficulties transitioning from more traditional methods such as waterfall development, such as teams having an agile process forced on them. These are often termed agile anti-patterns or more commonly agile smells. Below are some common examples: ====Lack of overall product design==== A goal of agile software development is to focus more on producing working software and less on documentation. This is in contrast to waterfall models where the process is often highly controlled and minor changes to the system require significant revision of supporting documentation. However, this does not justify completely doing without any analysis or design at all. Failure to pay attention to design can cause a team to proceed rapidly at first but then to have significant rework required as they attempt to scale up the system. One of the key features of agile software development is that it is iterative. When done correctly design emerges as the system is developed and commonalities and opportunities for re-use are discovered. ====Adding stories to an iteration in progress==== In agile software development, stories (similar to use case descriptions) are typically used to define requirements and an iteration is a short period of time during which the team commits to specific goals. Adding stories to an iteration in progress is detrimental to a good flow of work. These should be added to the product backlog and prioritized for a subsequent iteration or in rare cases the iteration could be cancelled. This does not mean that a story cannot expand. Teams must deal with new information, which may produce additional tasks for a story. If the new information prevents the story from being completed during the iteration, then it should be carried over to a subsequent iteration. However, it should be prioritized against all remaining stories, as the new information may have changed the story's original priority. ====Lack of sponsor support==== Agile software development is often implemented as a grassroots effort in organizations by software development teams trying to optimize their development processes and ensure consistency in the software development life cycle. By not having sponsor support, teams may face difficulties and resistance from business partners, other development teams and management. Additionally, they may suffer without appropriate funding and resources. This increases the likelihood of failure. ====Insufficient training==== A survey performed by VersionOne found respondents cited insufficient training as the most significant cause for failed agile implementations Teams have fallen into the trap of assuming the reduced processes of agile software development compared to other methodologies such as waterfall means that there are no actual rules for agile software development. ====Product owner role is not properly filled==== The product owner is responsible for representing the business in the development activity and is often the most demanding role. A common mistake is to have the product owner role filled by someone from the development team. This requires the team to make its own decisions on prioritization without real feedback from the business. They try to solve business issues internally or delay work as they reach outside the team for direction. This often leads to distraction and a breakdown in collaboration. ====Teams are not focused==== Agile software development requires teams to meet product commitments, which means they should focus only on work for that product. However, team members who appear to have spare capacity are often expected to take on other work, which makes it difficult for them to help complete the work to which their team had committed. ====Excessive preparation/planning==== Teams may fall into the trap of spending too much time preparing or planning. This is a common trap for teams less familiar with agile software development where the teams feel obliged to have a complete understanding and specification of all stories. Teams should be prepared to move forward only with those stories in which they have confidence, then during the iteration continue to discover and prepare work for subsequent iterations (often referred to as backlog refinement or grooming). ====Problem- solving in the daily standup==== A daily standup should be a focused, timely meeting where all team members disseminate information. If problem-solving occurs, it often can only involve certain team members and potentially is not the best use of the entire team's time. If during the daily standup the team starts diving into problem-solving, it should be set aside until a sub-team can discuss, usually immediately after the standup completes. ====Assigning tasks==== One of the intended benefits of agile software development is to empower the team to make choices, as they are closest to the problem. Additionally, they should make choices as close to implementation as possible, to use more timely information in the decision. If team members are assigned tasks by others or too early in the process, the benefits of localized and timely decision making can be lost. Being assigned work also constrains team members into certain roles (for example, team member A must always do the database work), which limits opportunities for cross-training. Team members themselves can choose to take on tasks that stretch their abilities and provide cross-training opportunities. ====Scrum master as a contributor==== A scrum master is the person accountable for ensuring the scrum process is taking place, and coaching the scrum team through that process. A common pitfall is for a scrum master to act as a contributor. While not prohibited by the Scrum methodology, the scrum master needs to ensure they have the capacity to act in the role of scrum master first and not work on development tasks. A scrum master's role is to facilitate the process rather than create the product. Having the scrum master also multitasking may result in too many context switches to be productive. Additionally, as a scrum master is responsible for ensuring roadblocks are removed so that the team can make forward progress, the benefit gained by individual tasks moving forward may not outweigh roadblocks that are deferred due to lack of capacity. ====Lack of test automation==== Due to the iterative nature of agile development, multiple rounds of testing are often needed. Automated testing helps reduce the impact of repeated unit, integration, and regression tests and frees developers and testers to focus on higher value work. Test automation also supports continued refactoring required by iterative software development. Allowing a developer to quickly run tests to confirm refactoring has not modified the functionality of the application may reduce the workload and increase confidence that cleanup efforts have not introduced new defects. ====Allowing technical debt to build up==== Focusing on delivering new functionality may result in increased technical debt. The team must allow themselves time for defect remediation and refactoring. Technical debt hinders planning abilities by increasing the amount of unscheduled work as production defects distract the team from further progress. As the system evolves it is important to refactor as entropy of the system naturally increases. Over time the lack of constant maintenance causes increasing defects and development costs. ====Attempting to take on too much in an iteration==== A common misconception is that agile software development allows continuous change, however an iteration backlog is an agreement of what work can be completed during an iteration. Having too much work-in-progress (WIP) results in inefficiencies such as context- switching and queueing. The team must avoid feeling pressured into taking on additional work. ====Fixed time, resources, scope, and quality==== Agile software development fixes time (iteration duration), quality, and ideally resources in advance (though maintaining fixed resources may be difficult if developers are often pulled away from tasks to handle production incidents), while the scope remains variable. The customer or product owner often pushes for a fixed scope for an iteration. However, teams should be reluctant to commit to the locked time, resources and scope (commonly known as the project management triangle). Efforts to add scope to the fixed time and resources of agile software development may result in decreased quality. ====Developer burnout==== Due to the focused pace and continuous nature of agile practices, there is a heightened risk of burnout among members of the delivery team. == Agile management == The term agile management is applied to an iterative, incremental method of managing the design and build activities of engineering, information technology and other business areas that aim to provide new product or service development in a highly flexible and interactive manner, based on the principles expressed in the Manifesto for Agile Software Development. Agile X techniques may also be called extreme project management. It is a variant of iterative life cycleExecutiveBrief, Which Life Cycle Is Best For Your Project?, PM Hut. Accessed 23 October 2009. where deliverables are submitted in stages. The main difference between agile and iterative development is that agile methods complete small portions of the deliverables in each delivery cycle (iteration), while iterative methods evolve the entire set of deliverables over time, completing them near the end of the project. Both iterative and agile methods were developed as a reaction to various obstacles that developed in more sequential forms of project organization. For example, as technology projects grow in complexity, end users tend to have difficulty defining the long-term requirements without being able to view progressive prototypes. Projects that develop in iterations can constantly gather feedback to help refine those requirements. Agile management also offers a simple framework promoting communication and reflection on past work amongst team members. Teams who were using traditional waterfall planning and adopted the agile way of development typically go through a transformation phase and often take help from agile coaches who help guide the teams through a smooth transformation. There are typically two styles of agile coaching: push-based and pull-based agile coaching. Agile management approaches have also been employed and adapted to the business and government sectors. For example, within the federal government of the United States, the United States Agency for International Development (USAID) is employing a collaborative project management approach that focuses on incorporating collaborating, learning and adapting (CLA) strategies to iterate and adapt programming.USAID. \"ADS Chapter 201 Program Cycle Operational Policy\". Retrieved 19 April 2017 Agile methods are mentioned in the Guide to the Project Management Body of Knowledge (PMBOK Guide) under the Project Lifecycle definition: === Applications outside software development === right According to Jean-Loup Richet (Research Fellow at ESSEC Institute for Strategic Innovation & Services) \"this approach can be leveraged effectively for non-software products and for project management in general, especially in areas of innovation and uncertainty.\" The end result is a product or project that best meets current customer needs and is delivered with minimal costs, waste, and time, enabling companies to achieve bottom line gains earlier than via traditional approaches.Richet, Jean-Loup (2013). Agile Innovation. Cases and Applied Research, n\u00b031. ESSEC-ISIS. Agile software development methods have been extensively used for development of software products and some of them use certain characteristics of software, such as object technologies. However, these techniques can be applied to the development of non-software products, such as computers, medical devices, food, clothing, and music. Agile software development methods have been used in non-development IT infrastructure deployments and migrations. Some of the wider principles of agile software development have also found application in general management (e.g., strategy, governance, risk, finance) under the terms business agility or agile business management. Agile software development paradigms can be used in other areas of life such as raising children. Its success in child development might be founded on some basic management principles; communication, adaptation, and awareness. In a TED Talk, Bruce Feiler shared how he applied basic agile paradigms to household management and raising children.\"Agile programming \u2013 for your family\". == Criticism == Agile practices can be inefficient in large organizations and certain types of developments. Many organizations believe that agile software development methodologies are too extreme and adopt a Hybrid approach that mixes elements of agile software development and plan- driven approaches. Some methods, such as dynamic systems development method (DSDM) attempt this in a disciplined way, without sacrificing fundamental principles. The increasing adoption of agile practices has also been criticized as being a management fad that simply describes existing good practices under new jargon, promotes a one size fits all mindset towards development strategies, and wrongly emphasizes method over results. Alistair Cockburn organized a celebration of the 10th anniversary of the Manifesto for Agile Software Development in Snowbird, Utah on 12 February 2011, gathering some 30+ people who had been involved at the original meeting and since. A list of about 20 elephants in the room ('undiscussable' agile topics/issues) were collected, including aspects: the alliances, failures and limitations of agile software development practices and context (possible causes: commercial interests, decontextualization, no obvious way to make progress based on failure, limited objective evidence, cognitive biases and reasoning fallacies), politics and culture. As Philippe Kruchten wrote: The \"Manifesto\" may have had a negative impact on higher education management and leadership, where it suggested to administrators that slower traditional and deliberative processes should be replaced with more 'nimble' ones. The concept never found acceptance among university faculty.Richard Utz, \"Against Adminspeak,\" Chronicle of Higher Education, 24 June 2020. Another criticism is that In many ways, Agile management and traditional management practices end up being in opposition to one another. A common criticism of this practice is that the time spent attempting to learn and implement the practice is too costly, despite potential benefits. A transition from traditional management to Agile management requires total submission to Agile and a firm commitment from all members of the organization to seeing the process through. Issues like unequal results across the organization, too much change for employees\u2019 ability to handle, or a lack of guarantees at the end of the transformation are just a few examples. == See also == * Workers' self-management ==References== ==Further reading== * * * * * * * * * In * * ==External links== * Agile Manifesto * Agile Glossary * The New Methodology Martin Fowler's description of the background to agile methods * Ten Authors of The Agile Manifesto Celebrate its Tenth Anniversary * AgilePatterns.org Category:Software project management Category:Software development philosophies ",
    "title": "Agile software development"
}