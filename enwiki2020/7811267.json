{
    "id": "7811267",
    "text": "Jakarta Persistence (JPA; formerly Java Persistence API) is a Jakarta EE application programming interface specification that describes the management of relational data in enterprise Java applications. Persistence in this context covers three areas: * the API itself, defined in the package * the Jakarta Persistence Query Language (JPQL; formerly Java Persistence Query Language) * object/relational metadata The reference implementation for JPA is EclipseLink. == History == The fil006 as part of Java Community Process JSR 220. The JPA 2.0 specification was released 10 December 2009 (The Java EE 6 platform requires JPA 2.0.) The JPA 2.1 specification was released 22 April 2013 (The Java EE 7 platform requires JPA 2.1.) == Entities == A persistence entity is a lightweight Java class whose state is typically persisted to a table in a relational database. Instances of such an entity correspond to individual rows in the table. Entities typically have relationships with other entities, and these relationships are expressed through object/relational metadata. Object/relational metadata can be specified directly in the entity class file by using annotations, or in a separate XML descriptor file distributed with the application. == Query Language == The Jakarta Persistence Query Language (JPQL; formerly Java Persistence Query Language) makes queries against entities stored in a relational database. Queries resemble SQL queries in syntax, but operate against entity objects rather than directly with database tables. == Motivation == Prior to the introduction of EJB 3.0 specification, many enterprise Java developers used lightweight persistent objects, provided by either persistence frameworks (for example Hibernate) or data access objects instead of entity beans. This is because entity beans, in previous EJB specifications, called for too much complicated code and heavy resource footprint, and they could be used only in Java EE application servers because of interconnections and dependencies in the source code between beans and DAO objects or persistence framework. Thus, many of the features originally presented in third-party persistence frameworks were incorporated into the Java Persistence API, and, as of 2006, projects like Hibernate (version 3.2) and TopLink Essentials have become themselves implementations of the Java Persistence API specification. == Related technologies== === Enterprise Beans === The EJB 3.0 specification (itself part of the Java EE 5 platform) included a definition of the Java Persistence API. However, end- users do not need an EJB container or a Java EE application server in order to run applications that use this persistence API.Hibernate EntityManager: Java SE environments Hibernate EntityManager: Obtaining an EntityManager in a Java SE environment Future versions of the Java Persistence API will be defined in a separate JSR and specification rather than in the EJB JSR/specification. The Java Persistence API replaces the persistence solution of EJB 2.0 CMP (Container Managed Persistence). === Java Data Objects API === The Java Persistence API was developed in part to unify the Java Data Objects API, and the EJB 2.0 Container Managed Persistence (CMP) API. most products supporting each of those APIs support the Java Persistence API. The Java Persistence API specifies persistence only for relational database management systems. That is, JPA focuses on object-relational mapping (ORM) (note that there are JPA providers who support other database models besides relational database, but this is outside the scope of what JPA was designed for). Refer to JPA 2 spec section 1 introduction for clarification of the role of JPA, which states very clearly \"The technical objective of this work is to provide an object/relational mapping facility for the Java application developer using a Java domain model to manage a relational database.\" The Java Data Objects specification supports ORM, as well as persistence to other types of database models, for example flat file databases and NoSQL databases, including document databases, graph databases, as well as literally any other conceivable datastore. === Service Data Object API === The designers of the Java Persistence API aimed to provide for relational persistence, with many of the key areas taken from object-relational mapping tools such as Hibernate and TopLink. Java Persistence API improved on and replaced EJB 2.0, evidenced by its inclusion in EJB 3.0. The Service Data Objects (SDO) API (JSR 235) has a very different objective to the Java Persistence API and is considered complementary. The SDO API is designed for service-oriented architectures, multiple data formats rather than only relational data, and multiple programming languages. The Java Community Process manages the Java version of the SDO API; the C++ version of the SDO API is managed via OASIS. === Hibernate === Hibernate provides an open source object-relational mapping framework for Java. Versions 3.2 and later provide an implementation for the Java Persistence API. Gavin King founded the Hibernate project. He represented JBoss on JSR 220, the JCP expert group charged with developing JPA. This led to ongoing controversy and speculation surrounding the relationship between JPA and Hibernate. Sun Microsystems has stated that ideas came from several frameworks, including Hibernate and Java Data Objects. === Spring Data JPA === An implementation of the repository abstraction that's a key building block of Domain-Driven Design based on the Java application framework Spring. Transparently supports all available JPA implementations and supports CRUD operations as well as the convenient execution of database queries. ==Version history== ===JPA 2.0=== Development of a new version of JPA 2.0 was started in July 2007 in the Java Community Process as JSR 317. JPA 2.0 was approved as final on 10 December 2009. The focus of JPA 2.0 was to address features that were present in some of the popular ORM vendors, but could not gain consensus approval for JPA 1.0. Main features included were: * Expanded object- relational mapping functionality ** support for collections of embedded objects, linked in the ORM with a many-to-one relationship ** ordered lists ** combinations of access types * A criteria query API * standardization of SQL Hints * standardization of additional metadata to support DDL generation * support for validation * Shared object cache support. Vendors supporting JPA 2.0: * Batoo JPA * DataNucleus (formerly JPOX) * EclipseLink (formerly Oracle TopLink) * IBM, for WebSphere Application Server * JBoss with Hibernate * Kundera * ObjectDB * OpenJPA * OrientDB from Orient Technologies * Versant Corporation JPA (not relational, object database) ===JPA 2.1=== Development of a new version of JPA 2.1 was started in July 2011 as JSR 338. JPA 2.1 was approved as final on 22 May 2013. Main features included were: * Converters - allowing custom code conversions between database and object types. * Criteria Update/Delete - allows bulk updates and deletes through the Criteria API. * Entity Graphs - allow partial or specified fetching or merging of objects. * JPQL/Criteria enhancements - arithmetic sub-queries, generic database functions, join ON clause, TREAT option. * Schema Generation * Stored Procedures - allows queries to be defined for database stored procedures. Vendors supporting JPA 2.1 * DataNucleus * EclipseLink * Hibernate * OpenJPA (from version 2.2.0) ===JPA 2.2=== Development of a maintenance release as JPA 2.2 was started in 2017 under JSR 338. The maintenance review was approved on 19 Jun, 2017. Main features included were: * Add @Repeatable to all relevant annotations * Allow all JPA annotations to be used in meta-annotations. * Add ability to stream a query result * Allow AttributeConverters to be CDI injectable * Support Java 8 Date and Time types Vendors supporting JPA 2.2 * DataNucleus (from version 5.1) * EclipseLink (from version 2.7) * Hibernate (from version 5.3) * OpenJPA (from version 3.0.0) === Future Work === Future JPA specification information is available here: * JPA Specification Mailing Lists * JPA Specification on GitHub In November 2015, Linda DeMichiel announced on the javaee-spec users mailing that Lukas Jungmann took over as the specification lead. Linda's announcement also stated, \"[w]e plan to do an MR for JPA 2.2 in the Java EE 8 time frame\". ==Tools== * NetBeans Jeddict * Eclipse JPA (Dali) ==See also== * .NET Persistence API (NPA) * JDBC * MyBatis * OpenXava * pureQuery * SAP NetWeaver Application Server * XQJ ==References== ==External links== ===General info=== * * Documentation for the final version of the EJB3 spec (called JSR220) * GlassFish's Persistence page * JCP Persistence page ===Tutorials=== * Java EE 6 Persistence API Javadoc * Java EE 6 Persistence API tutorial * Java EE 7 Persistence API Javadoc * Java EE 7 Persistence API tutorial * JPA Tutorial by Prasad Kharkar * JPA Tutorial from Java Code Geeks * JPA Tutorial using OpenJPA as implementation * Persistence in the Java EE 5 tutorial Category:Java APIs Category:Java enterprise platform Category:Java specification requests Category:Object-relational mapping Category:Persistence ",
    "title": "Jakarta Persistence"
}