{
    "id": "51498967",
    "text": "Zstandard (or zstd) is a lossless data compression algorithm developed by Yann Collet at Facebook. Zstd is the reference implementation in C. Version 1 of this implementation was released as free software on . ==Features== Zstandard was designed to give a compression ratio comparable to that of the DEFLATE algorithm (developed in 1991 and used in the original ZIP and gzip programs), but faster, especially for decompression. It is tunable with compression levels ranging from negative 5 (fastest)https://github.com/facebook/zstd/releases/tag/v1.3.4 Faster compression levels to 22 (slowest in compression speed, but best compression ratio). The zstd package includes parallel (multi-threaded) implementations of both compression and decompression. Starting from version 1.3.2 (October 2017), zstd optionally implements very long range search and deduplication (, 128 MiB window) similar to rzip or lrzip. Compression speed can vary by a factor of 20 or more between the fastest and slowest levels, while decompression is uniformly fast, varying by less than 20% between the fastest and slowest levels. Zstandard command-line has an \"adaptive\" () mode that varies compression level depending on I/O conditions, mainly how fast it can write the output. Zstd at its maximum compression level gives a compression ratio close to lzma, lzham, and ppmx, and performs better than lza, or bzip2. Zstandard reaches the current Pareto frontier, as it decompresses faster than any other currently-available algorithm with similar or better compression ratio. Dictionaries can have a large impact on the compression ratio of small files, so Zstandard can use a user-provided compression dictionary. It also offers a training mode, able to generate a dictionary from a set of samples. In particular, one dictionary can be loaded to process large sets of files with redundancy between files, but not necessarily within each file, e.g., log files. ==Design== Zstandard combines a dictionary-matching stage (LZ77) with a large search window and a fast entropy coding stage, using both Finite State Entropy (a fast tabled version of ANS, tANS, used for entries in the Sequences section), and Huffman coding (used for entries in the Literals section). Because of the way that FSE carries over state between symbols, decompression involves processing symbols within the Sequences section of each block in reverse order (from last to first). ==Usage== The Linux kernel has included Zstandard since November 2017 (version 4.14) as a compression method for the btrfs and squashfs filesystems. In 2017, Allan Jude integrated Zstandard into the FreeBSD kernelhttps://github.com/freebsd/freebsd/commit/28ef16535cde21eeeaf75f6006b3a77952b3b51 and it was subsequently integrated as a compressor option for core dumps (both user programs and kernel panics). It as also used to create a proof of concept OpenZFS compression method which was integrated in 2020https://github.com/openzfs/zfs/commit/10b3c7f5e424f54b3ba82dbf1600d866e64ec0a0. The AWS Redshift and RocksDB databases include support for field compression using Zstandard. In March 2018, Canonical tested the use of zstd as a deb package compression method by default for the Ubuntu Linux distribution. Compared with xz compression of deb packages, zstd at level 19 decompresses significantly faster, but at the cost of 6% larger package files. Debian developer Ian Jackson favored waiting several years before official adoption. RFC: Support for zstd in .deb packages?, Ian Jackson, 2018-04-27. In 2018 the algorithm was published as RFC 8478, which also defines an associated media type \"application/zstd\", filename extension \"zst\", and HTTP content encoding \"zstd\". Arch Linux added support for zstd as a package compression method in October 2019 with the release of the pacman 5.2 package manager,https://www.phoronix.com/scan.php?page=news_item&px;=Arch-Linux- Pacman-Zstd-Near and in January 2020 switched from xz to zstd for the packages in the official repository. Arch uses `zstd -c -T0 --ultra -20 -`, the size of all compressed packages combined increased by 0.8% (compared to xz), the decompression speed is 1300% faster, decompression memory increased by 50 MiB when using multiple threads, compression memory increases but scales with the number of threads used. [arch-dev-public RFC: (devtools) Changing default compression method to zstd], Robin Broda, 2019-03-25. Clarify zstd compressor output compatibility guarantees across versions, Yann Collet, assuring important for the same binary result is zstd version and compression level, 2019-03-18. makepkg.conf: change default compression method to zstd, Robin Broda, Levente Polyak, default compression with zstd -c -T0 --ultra -20 -, 2019-12-27. Fedora added ZStandard support to RPM in May 2018 (Fedora release 28), and used it for packaging the release in October 2019 (Fedora 31)https://fedoraproject.org/wiki/Changes/Switch_RPMs_to_zstd_compression Full implementation of the algorithm with an option to choose the compression level is used in the .NSZ / .XCZ file formats, developed by the homebrew community for the Nintendo Switch hybrid game console. ==License== The reference implementation is licensed under the BSD license, published at GitHub. Since version 1.0, it had an additional Grant of Patent Rights.zstd/PATENTS \"Additional Grant of Patent Rights Version 2\", Facebook From version 1.3.1,\"Zstd v1.3.1 release\", GitHub \"facebook/zstd\" this patent grant was dropped and the license was changed to a BSD + GPLv2 dual license.\"New license\", GitHub \"facebook/zstd\" ==See also== * Zlib * LZFSE \u2013 a similar algorithm by Apple used since iOS 9 and OS X 10.11 made open source on * LZ4 (compression algorithm) \u2013 a fast member of the LZ77 family ==References== ==External links== * * * \"Smaller and faster data compression with Zstandard\", Yann Collet and Chip Turner, 31 August 2016, Facebook Announcement * The Guardian is using ZStandard instead of zlib Category:Lossless compression algorithms Category:Free data compression software Category:C (programming language) libraries Category:2016 software Category:Software using the BSD license ",
    "title": "Zstandard"
}