{
    "id": "51203641",
    "text": "Function as a service (FaaS) is a category of cloud computing services that provides a platform allowing customers to develop, run, and manage application functionalities without the complexity of building and maintaining the infrastructure typically associated with developing and launching an app. Building an application following this model is one way of achieving a \"serverless\" architecture, and is typically used when building microservices applications. FaaS was initially offered by various start-ups circa 2010, such as PiCloud. AWS Lambda was the first FaaS offering by a large public cloud vendor, followed by Google Cloud Functions, Microsoft Azure Functions, IBM/Apache's OpenWhisk (open source) in 2016 and Oracle Cloud Fn (open source) in 2017. == Use cases == Use cases for FaaS are associated with \"on-demand\" functionality that enables the supporting infrastructure to be powered down and not incurring charges when not in use. Examples include data processing (e.g., batch processing, stream processing, extract-transform-load (ETL)), Internet of things (IoT) services for Internet-connected devices, mobile applications, and web applications. Another Real-world use case can be, creating API's (Application Programming Interface) for already built application without breaking down or modifying the current or existing functionality of the application. ==Comparison with PaaS application hosting services== Platform as a service (PaaS) application hosting services are similar to FaaS in that they also hide \"servers\" from developers. However, such hosting services typically always have at least one server process running that receives external requests. Scaling is achieved by booting up more server processes, which the developer is typically charged directly for. Consequently, scalability remains visible to the developer. By contrast, FaaS does not require any server process constantly being run. While an initial request may take longer to be handled than an application hosting platform (up to several seconds), caching may enable subsequent requests to be handled within milliseconds. As developers only pay for function execution time (and no process idle time), lower costs at higher scalability can be achieved (at the cost of latency). == See also == *Serverless computing *Serverless Framework *AWS Lambda *OpenFaaS == References == Category:Cloud platforms Category:As a service ",
    "title": "Function as a service"
}