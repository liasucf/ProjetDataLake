{
    "id": "2584592",
    "text": "The single-responsibility principle (SRP) is a computer-programming principle that states that every module, class or function in a computer program should have responsibility over a single part of that program's functionality, which it should encapsulate. All of that module, class or function's services should be narrowly aligned with that responsibility. Robert C. Martin, the originator of the term, expresses the principle as, \"A class should have only one reason to change,\" although, because of confusion around the word \"reason\" he more recently stated \"This principle is about people.\" ==History== The term was introduced by Robert C. Martin in an article by the same name as part of his Principles of Object Oriented Design, made popular by his book Agile Software Development, Principles, Patterns, and Practices. Martin described it as being based on the principle of cohesion, as described by Tom DeMarco in his book Structured Analysis and System Specification, and Meilir Page-Jones in The Practical Guide to Structured Systems Design. In 2014 Martin wrote a blog post entitled The Single Responsibility Principle with a goal to clarify what was meant by the phrase \"reason for change.\" ==Example== Martin defines a responsibility as a reason to change, and concludes that a class or module should have one, and only one, reason to be changed (e.g. rewritten). As an example, consider a module that compiles and prints a report. Imagine such a module can be changed for two reasons. First, the content of the report could change. Second, the format of the report could change. These two things change for very different causes; one substantive, and one cosmetic. The single- responsibility principle says that these two aspects of the problem are really two separate responsibilities, and should, therefore, be in separate classes or modules. It would be a bad design to couple two things that change for different reasons at different times. The reason it is important to keep a class focused on a single concern is that it makes the class more robust. Continuing with the foregoing example, if there is a change to the report compilation process, there is a greater danger that the printing code will break if it is part of the same class. ==See also== * Separation of concerns * Chain-of-responsibility pattern * Cohesion (computer science) * Open/closed principle * SOLID \u2014 the \"S\" in \"SOLID\" stands for the single-responsibility principle * GRASP (object-oriented design) ==References== ==External links== * The Secret behind the Single Responsibility Principle * The Single Responsibility Principle Category:Software design Category:Programming principles ",
    "title": "Single-responsibility principle"
}