{
    "id": "527918",
    "text": "Prediction by partial matching (PPM) is an adaptive statistical data compression technique based on context modeling and prediction. PPM models use a set of previous symbols in the uncompressed symbol stream to predict the next symbol in the stream. PPM algorithms can also be used to cluster data into predicted groupings in cluster analysis. == Theory == Predictions are usually reduced to symbol rankings. Each symbol (a letter, bit or any other amount of data) is ranked before it is compressed and, the ranking system determines the corresponding codeword (and therefore the compression rate). In many compression algorithms, the ranking is equivalent to probability mass function estimation. Given the previous letters (or given a context), each symbol is assigned with a probability. For instance, in arithmetic coding the symbols are ranked by their probabilities to appear after previous symbols and the whole sequence is compressed into a single fraction that is computed according to these probabilities. The number of previous symbols, n, determines the order of the PPM model which is denoted as PPM(n). Unbounded variants where the context has no length limitations also exist and are denoted as PPM*. If no prediction can be made based on all n context symbols a prediction is attempted with n \u2212 1 symbols. This process is repeated until a match is found or no more symbols remain in context. At that point a fixed prediction is made. Much of the work in optimizing a PPM model is handling inputs that have not already occurred in the input stream. The obvious way to handle them is to create a \"never-seen\" symbol which triggers the escape sequence. But what probability should be assigned to a symbol that has never been seen? This is called the zero-frequency problem. One variant uses the Laplace estimator, which assigns the \"never-seen\" symbol a fixed pseudocount of one. A variant called PPMd increments the pseudocount of the \"never-seen\" symbol every time the \"never-seen\" symbol is used. (In other words, PPMd estimates the probability of a new symbol as the ratio of the number of unique symbols to the total number of symbols observed). == Implementation == PPM compression implementations vary greatly in other details. The actual symbol selection is usually recorded using arithmetic coding, though it is also possible to use Huffman encoding or even some type of dictionary coding technique. The underlying model used in most PPM algorithms can also be extended to predict multiple symbols. It is also possible to use non-Markov modeling to either replace or supplement Markov modeling. The symbol size is usually static, typically a single byte, which makes generic handling of any file format easy. Published research on this family of algorithms can be found as far back as the mid-1980s. Software implementations were not popular until the early 1990s because PPM algorithms require a significant amount of RAM. Recent PPM implementations are among the best-performing lossless compression programs for natural language text. PPMd is an implementation of PPMII by Dmitry Shkarin. It is used in the RAR by default. It is also used by 7-Zip as one of several possible compression methods in the 7z file format. Attempts to improve PPM algorithms led to the PAQ series of data compression algorithms. A PPM algorithm, rather than being used for compression, is used to increase the efficiency of user input in the alternate input method program Dasher. == See also == * Language model * n-gram == Sources == * * * * C. Bloom, Solving the problems of context modeling. * W.J. Teahan, Probability estimation for PPM. * ==References== == External links == * Suite of PPM compressors with benchmarks * BICOM, a bijective PPM compressor * \"Arithmetic Coding + Statistical Modeling = Data Compression\", Part 2 * PPMd compressor by Dmitri Shkarin * PPM compression in C++ by Ren\u00e9 Puschinger Category:Lossless compression algorithms ",
    "title": "Prediction by partial matching"
}