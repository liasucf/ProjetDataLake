{
    "id": "14093130",
    "text": "DEVS abbreviating Discrete Event System Specification is a modular and hierarchical formalism for modeling and analyzing general systems that can be discrete event systems which might be described by state transition tables, and continuous state systems which might be described by differential equations, and hybrid continuous state and discrete event systems. DEVS is a timed event system. ==History== DEVS abbreviating Discrete Event System Specification is a modular and hierarchical formalism for modeling and analyzing general systems that can be discrete event systems which might be described by state transition tables, and continuous state systems which might be described by differential equations, and hybrid ... DEVS is a formalism for modeling and analysis of discrete event systems (DESs). The DEVS formalism was invented by Bernard P. Zeigler, who is emeritus professor at the University of Arizona. DEVS was introduced to the public in Zeigler's first book, Theory of Modeling and Simulation, in 1976, while Zeigler was an associate professor at University of Michigan. DEVS can be seen as an extension of the Moore machine formalism,automata were the mathematical models of Dr. Zeigler's Ph.D. thesis [Zeigler68] which is a finite state automaton where the outputs are determined by the current state alone (and do not depend directly on the input). The extension was done by # associating a lifespan with each state [Zeigler76], # providing a hierarchical concept with an operation, called coupling [Zeigler84]. Since the lifespan of each state is a real number (more precisely, non-negative real) or infinity, it is distinguished from discrete time systems, sequential machines, and Moore machines, in which time is determined by a tick time multiplied by non-negative integers. Moreover, the lifespan can be a random variable; for example the lifespan of a given state can be distributed exponentially or uniformly. The state transition and output functions of DEVS can also be stochastic. Zeigler proposed a hierarchical algorithm for DEVS model simulation in 1984 [Zeigler84] which was published in Simulation journal in 1987. Since then, many extended formalism from DEVS have been introduced with their own purposes: DESS/DEVS for combined continuous and discrete event systems, P-DEVS for parallel DESs, G-DEVS for piecewise continuous state trajectory modeling of DESs, RT-DEVS for realtime DESs, Cell- DEVS for cellular DESs, Fuzzy-DEVS for fuzzy DESs, Dynamic Structuring DEVS for DESs changing their coupling structures dynamically, and so on. In addition to its extensions, there are some subclasses such as SP-DEVS and FD- DEVS have been researched for achieving decidability of system properties. Due to the modular and hierarchical modeling views, as well as its simulation- based analysis capability, the DEVS formalism and its variations have been used in many application of engineering (such as hardware design, hardware/software codesign, communications systems, manufacturing systems) and science (such as biology, and sociology) ==Formalism== Fig. 1. A DEVS Model for Ping-Pong Game ; Intuitive Example DEVS defines system behavior as well as system structure. System behavior in DEVS formalism is described using input and output events as well as states. For example, for the ping-pong player of Fig. 1, the input event is ?receive, and the output event is !send. Each player, A, B, has its states: Send and Wait. Send state takes 0.1 seconds to send back the ball that is the output event !send, while the Wait state lasts until the player receives the ball that is the input event ?receive. The structure of ping-pong game is to connect two players: Player A 's output event !send is transmitted to Player B 's input event ?receive, and vice versa. In the classic DEVS formalism, Atomic DEVS captures the system behavior, while Coupled DEVS describes the structure of system. The following formal definition is for Classic DEVS [ZKP00]. In this article, we will use the time base, \\mathbb{T}=[0,\\infty) that is the set of non-negative real numbers; the extended time base, \\mathbb{T}^\\infty=[0,\\infty] that is the set of non-negative real numbers plus infinity. ===Atomic DEVS=== An atomic DEVS model is defined as a 7-tuple M= where > *X is the set of input events; *Y is the set of output events; *S is the set > of sequential states (or also called the set of partial states); *s_0\\in S > is the initial state; *ta:S \\rightarrow \\mathbb{T}^\\infty is the time > advance function which is used to determine the lifespan of a state; > *\\delta_{ext}:Q \\times X \\rightarrow S is the external transition function > which defines how an input event changes a state of the system, where > Q=\\\\{(s,t_e)|s \\in S, t_e \\in (\\mathbb{T} \\cap [0, ta(s)])\\\\} is the set of > total states, and t_e is the elapsed time since the last event; We can also > define the external transition function as \\delta_{ext}:Q \\times X > \\rightarrow S \\times \\\\{0,1\\\\} where Q = S \\times \\mathbb{T}^\\infty \\times > \\mathbb{T} such that for a total state (s, t_s, t_e) \\in Q, s \\in S is a > partial state, t_s \\in \\mathbb{T}^\\infty is the lifespan of s, and t_e \\in > (\\mathbb{T} \\cap [0,t_s]) is the elapsed time since last update of t_s. For > more how to understand this function, refer to the article, Behavior of > DEVS. > *\\delta_{int}:S \\rightarrow S is the internal transition function which > defines how a state of the system changes internally (when the elapsed time > reaches to the lifetime of the state); *\\lambda:S \\rightarrow Y^\\phi is the > output function where Y^\\phi=Y \\cup \\\\{\\phi\\\\} and \\phi ot\\in Y is a > silent event or an unobserved event. This function defines how a state of > the system generates an output event (when the elapsed time reaches to the > lifetime of the state); ; The atomic DEVS Model for Ping-Pong Players The atomic DEVS model for player A of Fig. 1 is given Player= such that > \\begin{align} X &= \\\\{?\\textit{receive}\\\\}\\\\\\ Y &= \\\\{!\\textit{send}\\\\}\\\\\\ S > &= \\\\{(d,\\sigma)| d \\in \\\\{\\textit{Wait},\\textit{Send}\\\\}, \\sigma \\in > \\mathbb{T}^\\infty\\\\}\\\\\\ s_0 &= (\\textit{Send}, 0.1)\\\\\\ t_a(s) &=\\sigma > \\text{ for all } s \\in S\\\\\\ > \\delta_{ext}(((\\textit{Wait},\\sigma),t_e),?\\textit{receive})&=(\\textit{Send},0.1)\\\\\\ > \\delta_{int}(\\textit{Send},\\sigma)&=(\\textit{Wait},\\infty)\\\\\\ > \\delta_{int}(\\textit{Wait},\\sigma)&=(\\textit{Send},0.1)\\\\\\ > \\lambda(\\textit{Send},\\sigma)&=!\\textit{send}\\\\\\ > \\lambda(\\textit{Wait},\\sigma)&=\\phi \\end{align} Both Player A and Player B are atomic DEVS models. ==== Behavior of Atomic DEVS ==== Simply speaking, there are two cases that an atomic DEVS model M can change its state s \\in S: (1) when an external input x \\in X comes into the system M ; (2) when the elapsed time t_e reaches the lifespan of s which is defined by ta(s) . (At the same time of (2), M generates an output y \\in Y which is defined by \\lambda(s) .) . For formal behavior description of given an Atomic DEVS model, refer to the page Behavior of DEVS. Computer algorithms to implement the behavior of a given Atomic DEVS model are available at Simulation Algorithms for Atomic DEVS. === Coupled DEVS === The coupled DEVS defines which sub-components belong to it and how they are connected with each other. A coupled DEVS model is defined as an 8-tuple N= where > *X is the set of input events; *Y is the set of output events; *D is the > name set of sub-components; *\\\\{M_i\\\\} is the set of sub-components where > for each i \\in D, M_i can be either an atomic DEVS model or a coupled DEVS > model. *C_{xx}\\subseteq X \\times \\bigcup_{i \\in D} X_i is the set of > external input couplings; *C_{yx}\\subseteq \\bigcup_{i \\in D} Y_i \\times > \\bigcup_{i \\in D} X_i is the set of internal couplings; *C_{yy}: \\bigcup_{i > \\in D} Y_i \\rightarrow Y^\\phi is the external output coupling function; > *Select:2^D \\rightarrow D is the tie-breaking function which defines how to > select the event from the set of simultaneous events; ; The coupled DEVS model for Ping-Pong Game The ping-pong game of Fig. 1 can be modeled as a coupled DEVS model N= where X=\\\\{\\\\} ;Y=\\\\{\\\\} ;D=\\\\{A,B\\\\} ; M_A \\text{ and } M_B is described as above; C_{xx}=\\\\{\\\\}; C_{yx}=\\\\{(A.!send, B.?receive), (B.!send, A.?receive)\\\\}; and C_{yy}(A.!send)=\\phi, C_{yy}(B.!send)=\\phi. ==== Behavior of Coupled DEVS ==== Simply speaking, like the behavior of the atomic DEVS class, a coupled DEVS model N changes its components' states (1) when an external event x \\in X comes into N ; (2) when one of components M_i where i \\in D executes its internal state transition and generates its output y_i \\in Y_i. In both cases (1) and (2), a triggering event is transmitted to all influencees which are defined by coupling sets C_{xx}, C_{yx}, and C_{yy} . For formal definition of behavior of the coupled DEVS, you can refer to Behavior of Coupled DEVS. Computer algorithms to implement the behavior of a given coupled DEVS mode are available at Simulation Algorithms for Coupled DEVS. ==Analysis Methods== === Simulation for Discrete Event Systems === The simulation algorithm of DEVS models considers two issues: time synchronization and message propagation. Time synchronization of DEVS is to control all models to have the identical current time. However, for an efficient execution, the algorithm makes the current time jump to the most urgent time when an event is scheduled to execute its internal state transition as well as its output generation. Message propagation is to transmit a triggering message which can be either an input or output event along the associated couplings which are defined in a coupled DEVS model. For more detailed information, the reader can refer to Simulation Algorithms for Atomic DEVS and Simulation Algorithms for Coupled DEVS. ===Simulation for Continuous State Systems=== By introducing a quantization method which abstracts a continuous segment as a piecewise const segment, DEVS can simulate behaviors of continuous state systems which are described by networks of differential algebraic equations. This research has been initiated by Zeigler in 1990sthe use of quantized values in order to simulate continuous systems by means of a discrete event method was empirically tried out a few years sooner - in the early 1990s - by a French engineer . He was then working for a company spun off from University of Valenciennes, and now part of the Schneider Electric. This quantization is a feature of a simulation software of which this engineer is the conceptor and main developer, that is used for PLC programs checking and operator training. and many properties have been clarified by Prof. Kofman in 2000s and Dr. Nutaro. In 2006, Prof. Cellier who is the author of Continuous System Modeling[Cellier91], and Prof. Kofman wrote a text book, Continuous System Simulation[CK06] in which Chapters 11 and 12 cover how DEVS simulates continuous state systems. Dr. Nutaro's book [Nutaro10], covers the discrete event simulation of continuous state systems too. === Verification for Discrete Event Systems === As an alternative analysis method against the sampling-based simulation method, an exhaustive generating behavior approach, generally called verification has been applied for analysis of DEVS models. It is proven that infinite states of a given DEVS model (especially a coupled DEVS model ) can be abstracted by behaviorally isomorphic finite structure, called a reachability graph when the given DEVS model is a sub-class of DEVS such as Schedule-Preserving DEVS (SP-DEVS), Finite & Deterministic DEVS (FD- DEVS) [HZ09], and Finite & Real-time DEVS (FRT-DEVS) [Hwang12]. As a result, based on the rechability graph, (1) dead-lock and live-lock freeness as qualitative properties are decidable with SP-DEVS [Hwang05], FD-DEVS [HZ06], and FRT-DEVS [Hwang12]; and (2) min/max processing time bounds as a quantitative property are decidable with SP-DEVS so far by 2012. ==Variations of DEVS== ===Extensions (Superclassing)=== Numerous extensions of the classic DEVS formalism have been developed in the last decades. Among them formalisms which allow to have changing model structures while the simulation time evolves. G-DEVS [Giambiasi01][Zacharewicz08], Parallel DEVS, Dynamic Structuring DEVS, Cell-DEVS [Wainer09], dynDEVS, Fuzzy-DEVS, GK-DEVS, ml-DEVS, Symbolic DEVS, Real-Time DEVS, rho-DEVS ===Restrictions (Subclassing)=== There are some sub-classes known as Schedule-Preserving DEVS (SP-DEVS) and Finite and Deterministic DEVS (FD-DEVS) which were designated to support verification analysis. SP-DEVS and FD-DEVS whose expressiveness are E(SP-DEVS) \\subset E(FD-DEVS)\\subset E(DEVS) where E(formalism) denotes the expressiveness of formalism. == See also == ===DEVS Related Articles === *Event Segment *Timed Event System * Verifiable sub-classes of DEVS: SP-DEVS, FD-DEVS *Behavior of Atomic DEVS *Behavior of Coupled DEVS *Simulation Algorithms for Atomic DEVS *Simulation Algorithms for Coupled DEVS ===Other Formalisms=== *Automata Theory: a formal method for state transition systems *Finite State Machine: a state transition machine with finite sets of events and states *Petri Nets: a graphical representation of state and transition relations *Markov Chain: a stochastic process in which the future will be determined by the current state *Specification and Description Language: SDL, a formal complete and unambiguous language to graphically represent simulation models. == Footnotes == ==References== * [Cellier91] * [CK06] * [Giambiasi01] Giambiasi N., Escude B. Ghosh S. \u201cGeneralized Discrete Event Simulation of Dynamic Systems\u201d, in: Issue 4 of SCS Transactions: Recent Advances in DEVS Methodology-part II, Vol. 18, pp. 216\u2013229, dec 2001 * [Hwang05] M.H. Hwang, \"Tutorial: Verification of Real-time System Based on Schedule-Preserved DEVS\", Proceedings of 2005 DEVS Symposium, San Diego, Apr. 2-8, 2005, , * [HZ06] M.H. Hwang and B. P. Zeigler, \"A Modular Verification Framework using Finite and Deterministic DEVS\", Proceedings of 2006 DEVS Symposium, pp57\u201365, Huntsville, Alabama, USA, * [HZ09] M.H. Hwang and B.P. Zeigler, \"Reachability Graph of Finite and Deterministic DEVS Networks\", IEEE Transactions on Automation Science and Engineering, Volume 6, Issue 3, 2009, pp. 454\u2013467, * [Hwang12] M.H. Hwang, \"Qualitative verification of finite and real-time DEVS networks\", Proceedings of the 2012 Symposium on Theory of Modeling and Simulation - DEVS Integrative M&S; Symposium, Article No. 43, * [Mittal13] * [Nutaro10] * [Sarjoughian09] * [Wainer09] * [Wainer10] * [Zacharewicz08] Gregory Zacharewicz, Claudia Frydman, and Norbert Giambiasi (2008) G-DEVS/HLA Environment for Distributed Simulations of Workflows, SIMULATION May 2008 84: 197-213, doi:10.1177/0037549708092833. * [Zeiger68] * [Zeigler76] * [Zeigler84] * [Zeigler87] * [ZKP00] Category:Automata (computation) Category:Formal specification languages ",
    "title": "DEVS"
}