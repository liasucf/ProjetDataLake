{
    "id": "51386205",
    "text": "In theoretical computer science, the PACELC theorem is an extension to the CAP theorem. It states that in case of network partitioning (P) in a distributed computer system, one has to choose between availability (A) and consistency (C) (as per the CAP theorem), but else (E), even when the system is running normally in the absence of partitions, one has to choose between latency (L) and consistency (C). == Overview == PACELC builds on the CAP theorem. Both theorems describe how distributed databases have limitations and tradeoffs regarding consistency, availability, and partition tolerance. PACELC however goes further and states that another trade-off also exists: this time between latency and consistency, even in absence of partitions, thus providing a more complete portrayal of the potential consistency tradeoffs for distributed systems. A high availability requirement implies that the system must replicate data. As soon as a distributed system replicates data, a tradeoff between consistency and latency arises. The PACELC theorem was first described by Daniel J. Abadi from Yale University in 2010 in a blog post, which he later formalized in a paper in 2012. The purpose of PACELC is to address his thesis that \"Ignoring the consistency/latency tradeoff of replicated systems is a major oversight [in CAP], as it is present at all times during system operation, whereas CAP is only relevant in the arguably rare case of a network partition.\" == Database PACELC ratings == Database PACELC ratings are from \"Consistency Tradeoffs in Modern Distributed Database System Design\" slide summary by Arinto Murdopo, Research Engineer * The default versions of DynamoDB, Cassandra, Riak and Cosmos DB are PA/EL systems: if a partition occurs, they give up consistency for availability, and under normal operation they give up consistency for lower latency. * Fully ACID systems such as VoltDB/H-Store, Megastore and MySQL Cluster are PC/EC: they refuse to give up consistency, and will pay the availability and latency costs to achieve it. BigTable and related systems such as HBase are also PC/EC. *Couchbase provides a range of consistency and availability options during a partition, and equally a range of latency and consistency options with no partition. Unlike most other databases, Couchbase doesn't have a single API set nor does it scale/replicate all data services homogeneously. For writes, Couchbase favors Consistency over Availability making it formally CP, but on read there is more user-controlled variability depending on index replication, desired consistency level and type of access (single document lookup vs range scan vs full-text search, etc). On top of that, there is then further variability depending on cross-datacenter-replication (XDCR) which takes multiple CP clusters and connects them with asynchronous replication and Couchbase Lite which is an embedded database and creates a fully multi-master (with revision tracking) distributed topology. * Cosmos DB supports five tunable consistency levels that allow for tradeoffs between C/A during P, and L/C during E. Cosmos DB never violates the specified consistency level, so it\u2019s formally CP. * MongoDB can be classified as a PA/EC system. In the baseline case, the system guarantees reads and writes to be consistent. * PNUTS is a PC/EL system. * Hazelcast IMDG and indeed most in-memory data grids are an implementation of a PA/EC system; Hazelcast can be configured to be EL rather than EC. Concurrency primitives (Lock, AtomicReference, CountDownLatch, etc.) can be either PC/EC or PA/EC. *FaunaDB implements Calvin, a transaction protocol created by Dr. Daniel Abadi and author of PACELC theorem, and offers users adjustable controls for LC tradeoff. It is PC/EC for strictly serializable transactions, and EL for serializable reads. {| class=\"wikitable\" |- ! DDBS ! P+A ! P+C ! E+L ! E+C |- | DynamoDB | | | | |- | Cassandra | | | | |- |Cosmos DB | | | | |- |Couchbase | | | | |- | Riak | | | | |- | VoltDB/H-Store | | | | |- | Megastore | | | | |- |BigTable/HBase | | | | |- |MySQL Cluster | | | | |- | MongoDB | | | | |- | PNUTS | | | | |- |Hazelcast IMDG | | | | |- |FaunaDB | | | | |} == See also == * CAP theorem * Consistency model * Fallacies of Distributed Computing * Paxos (computer science) * Project management triangle * Raft (computer science) * Trilemma == Notes == == References == == External links == * \"Consistency Tradeoffs in Modern Distributed Database System Design\", by Daniel J. Abadi, Yale University Original paper that formalized PACELC * \"Problems with CAP, and Yahoo\u2019s little known NoSQL system\", by Daniel J. Abadi, Yale University. Original blog post that first described PACELC Category:Distributed computing Category:Database theory ",
    "title": "PACELC theorem"
}