{
    "id": "14030444",
    "text": "CGOL (pronounced \"see goll\") is an alternative syntax featuring an extensible algebraic notation for the Lisp programming language. It was designed for MACLISP by Vaughan Pratt and subsequently ported to Common Lisp. The notation of CGOL is a traditional infix notation, in the style of ALGOL, rather than Lisp's traditional, uniformly-parenthesized prefix notation syntax. The CGOL parser is based on Pratt's design for top-down operator precedence parsing, sometimes informally referred to as a \"Pratt parser\". Semantically, CGOL is essentially just Common Lisp, with some additional reader and printer support. CGOL may be regarded as a more successful incarnation of some of the essential ideas behind the earlier LISP 2 project. Lisp 2 was a successor to LISP 1.5 that aimed to provide ALGOL syntax. LISP 2 was abandoned, whereas it is possible to use the CGOL codebase today. This is because unlike LISP 2, CGOL is implemented as portable functions and macros written in Lisp, requiring no alterations to the host Lisp implementation. ==Syntax== Special notations are available for many commonly used Common Lisp operations. For example, one can write a matrix multiply routine as: for i in 1 to n do for k in 1 to n do (ac := 0; for j in 1 to n do ac := ac + a(i,j)*b(j,k); c(i,k) := ac) CGOL has an infix `.` operation (referring to Common Lisp's `cons` function) and the infix `@` operation (referring to Common Lisp's `append` function): a.(b@c) = (a.b)@c The preceding example corresponds to this text in native Common Lisp: (EQUAL (CONS A (APPEND B C)) (APPEND (CONS A B) C)) CGOL uses `of` to read and set properties: 'father' of x := 'brother' of relative of y The preceding example corresponds to this text in native Common Lisp: (PUTPROP X (GET (GET Y RELATIVE) 'BROTHER) 'FATHER) This illustrates how CGOL notates a function of two arguments: \\x,y; 1/sqrt(x**2 + y**2) The preceding example corresponds to this text in native Common Lisp: (LAMBDA (X Y) (QUOTIENT 1 (SQRT (PLUS (EXPT X 2) (EXPT Y 2))))) The syntax of CGOL is data-driven and so both modifiable and extensible. == Status and source code == CGOL is known to work on Armed Bear Common Lisp. The CGOL source code and some text files containing discussions of it are available as freeware from Carnegie-Mellon University's Artificial Intelligence Repository. == References == Pratt, Vaughan R. CGOL: An Alternative External Representation for LISP Users. AI Working Paper 121. MIT Artificial Intelligence Laboratory (Cambridge, MA). 1976. Pratt, Vaughan R. CGOL - an Algebraic Notation For MACLISP users. January 27, 1977. Pratt, Vaughan R. Top Down Operator Precedence. Proceedings of the ACM Symposium on Principles of Programming Languages. 1973. pp41\u201351. Van De Vanter, Michael L. A Formalization and Correctness Proof of the CGOL Language System (Master's Thesis). MIT Laboratory for Computer Science Technical Report MIT-LCS-TR-147 (Cambridge, MA). 1975. CGOL on ABCL Development of the Armed Bear Common Lisp implementation blog. CGOL: Algol-like language that compiles into Common Lisp Category:Lisp programming language family ",
    "title": "CGOL"
}