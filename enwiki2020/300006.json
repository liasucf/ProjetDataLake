{
    "id": "300006",
    "text": "A very simple use case diagram of a Wiki system. In software and systems engineering, a use case is a list of actions or event steps typically defining the interactions between a role (known in the Unified Modeling Language (UML) as an actor) and a system to achieve a goal. The actor can be a human or other external system. In systems engineering, use cases are used at a higher level than within software engineering, often representing missions or stakeholder goals. The detailed requirements may then be captured in the Systems Modeling Language (SysML) or as contractual statements. == History == In 1987, Ivar Jacobson presents the first article on use cases at the OOPSLA'87 conference. He describes how this technique was used at Ericson to capture and specify requirements of a system using textual, structural, and visual modeling techniques to drive object oriented analysis and design. Originally he had used the terms usage scenarios and usage case \u2013 the latter a direct translation of his Swedish term anv\u00e4ndningsfall \u2013 but found that neither of these terms sounded natural in English, and eventually he settled on use case. In 1992 he co-authors the book Object-Oriented Software Engineering - A Use Case Driven Approach, which laid the foundation of the OOSE system engineering method and helped to popularize use cases for capturing functional requirements, especially in software development. In 1994 he publishes a book about use cases and object-oriented techniques applied to business models and business process reengineering. At the same time, Grady Booch and James Rumbaugh work at unifying their object-oriented analysis and design methods, the Booch method and Object Modeling Technique (OMT) respectively. In 1995 Ivar Jacobson join them and together they create the Unified Modelling Language (UML), which includes use case modeling. UML is standardized by the Object Management Group (OMG) in 1997. Jacobson, Booch and Rumbaugh also work on a refinement of the Objectory software development process. The resulting Unified Process is published in 1999 and promotes a use case driven approach. Since then, many authors have contributed to the development of the technique, notably: Larry Constantine develops in 1995, in the context of usage-centered design, so called \"essential use-cases\" that aim to describe user intents rather than sequences of actions or scenarios which might constraint or bias the design of user interface; Alistair Cockburn publishes in 2000 a goal- oriented use case practice based on text narratives and tabular specifications; Kurt Bittner and Ian Spence develop in 2002 advanced practices for analyzing functional requirements with use cases; Dean Leffingwell and Don Widrig propose to apply use cases to change management and stakeholder communication activities; Gunnar Overgaard proposed in 2004 to extend the principles of design patterns to use cases. In 2011, Jacobson publishes with Ian Spence and Kurt Bittner the ebook Use Case 2.0 to adapt the technique to an agile context, enriching it with incremental use case \"slices\", and promoting its use across the full development lifecycle after having presented the renewed approach at the annual IIBA conference. == General principle == Use cases are a technique for capturing, modelling and specifying the requirements of a system. A use case corresponds to a set of behaviours that the system may perform in interaction with its actors, and which produces an observable result that contribute to its goals. Actors represent the role that human users or other systems have in the interaction. In the requirement analysis, at their identification, a use case is named according to the specific user-goal that it represents for its primary actor. The case is further detailed with a textual description or with additional graphical models that explains the general sequence of activities and events, as well as variants such as special conditions, exceptions or error situations. According to the Software Engineering Body of Knowledge (SWEBOK), use cases belong to the scenario-based requirement elicitation techniques, as well as the model- based analysis techniques. But the use cases also supports narrative-based requirement gathering, incremental requirement acquisition, system documentation, and acceptance testing. === Variations === There are different kind of use cases and variations in the technique: * System use cases specify the requirements of a system to be developed. They identify in their detailed description not only the interactions with the actors but also the entities that are involved in the processing. They are the starting point for further analysis models and design activities. * Business use cases focus on a business organisation instead of a software system. They are used to specify business models and business process requirements in the context of business process reengineering initiatives. * Essential use cases, also called abstract use cases, describe the potential intents of the actors and how the system addresses these, without defining any sequence or describing a scenario. This practice was developed with the aim of supporting user-centric design and avoiding to induce bias about the user-interface in the early stage of the system specifications. * Use Case 2.0 adapts the technique for the context of agile development methods. This technique enriches the requirement gathering practice with support for user-story narratives. It also provides use case \"slices\" to facilitate incremental elicitation of requirements and enable incremental implementation. === Scope === The scope of a use case can defined by subject and by goals: * The subject identifies the system, sub-system or component that will provide the interactions. * The goals can be structured hierarchically, taking into account the organisational level interested in the goal (e.g. company, department, user), and the decomposition of the user's goal into sub-goals. The decomposition of the goal is performed from the point of view of the users, and independently of the system, which differs from traditional functional decomposition. === Usage === Use cases are known to be applied in the following contexts: * Object Oriented Software Engineering (OOSE), as driving element; * Unified Modeling Language (UML), as a behavioral modelling instrument; * Unified Software Development Process (UP) and its fore-runner, the IBM Rational Unified Process (RUP); * up-front documentation of software requirements specification (SRS), as alternative structure for the functional requirements; * deriving the design from the requirements using the entity-control-boundary approach; * and agile development. == Templates == There are many ways to write a use case in text, from use case brief, casual, outline, to fully dressed etc., and with varied templates. Writing use cases in templates devised by various vendors or experts is a common industry practice to get high-quality functional system requirements. === Cockburn style === The template defined by Alistair Cockburn in his book Writing Effective Use Cases has been one of the most widely used writing styles of use cases. ==== Design scopes ==== Cockburn suggests annotating each use case with a symbol to show the \"Design Scope\", which may be black-box (internal detail is hidden) or white-box (internal detail is shown). Five symbols are available:Cockburn, 2001. Inside front cover. Icons \"Design Scope\". {| class=\"wikitable\" |- ! Scope !! Icon|| |- | Organization (black-box) || Filled House || Scope-icons-filled-house |- | Organization (white-box) || Unfilled House || Scope-icons-unfilled-house |- | System (black-box) || Filled Box || Scope-icons-filled-box |- | System (white-box) || Unfilled Box || Scope-icons- unfilled-box |- | Component || Screw or Bolt || Scope-icons-screw-bolt |} Other authors sometimes call use cases at Organization level \"Business use cases\".Suzanne Robertson. Scenarios in Requirements Discovery. Chapter 3 in Alexander and Maiden, 2004. Pages 39-59. ==== Goal levels ==== Hierarchy of goal levels Cockburn suggests annotating each use case with a symbol to show the \"Goal Level\";Cockburn, 2001. Inside front cover. Icons \"Goal Level\". the preferred level is \"User-goal\" (or colloquially \"sea level\"). {| class=\"wikitable\" |- ! Goal Level !! Icon !! Symbol || |- | Very High Summary || Cloud || ++ || center |- | Summary || Flying Kite || + || center |- | User Goal || Waves at Sea || ! || center |- | Subfunction || Fish || - || center |- | Too Low || Seabed Clam-Shell || -- || center |} Sometimes in text writing, a use case name followed by an alternative text symbol (!, +, -, etc.) is a more concise and convenient way to denote levels, e.g. place an order!, login-. ==== Fully dressed ==== Cockburn describes a more detailed structure for a use case, but permits it to be simplified when less detail is needed. His fully dressed use case template lists the following fields:Cockburn, 2001. Page 120. * Title: \"an active-verb goal phrase that names the goal of the primary actor\"Cockburn, 2001. Inside rear cover. Field \"Use Case Title\". * Primary Actor * Goal in Context * Scope * Level * Stakeholders and Interests * Precondition * Minimal Guarantees * Success Guarantees * Trigger * Main Success Scenario * Extensions * Technology & Data Variations List In addition, Cockburn suggests using two devices to indicate the nature of each use case: icons for design scope and goal level. Cockburn's approach has influenced other authors; for example, Alexander and Beus-Dukic generalize Cockburn's \"Fully dressed use case\" template from software to systems of all kinds, with the following fields differing from Cockburn:Alexander and Beus-Dukic, 2009. Page 121 * Variation scenarios \"(maybe branching off from and maybe returning to the main scenario)\" * Exceptions \"i.e. exception events and their exception-handling scenarios\" ==== Casual ==== Cockburn recognizes that projects may not always need detailed \"fully dressed\" use cases. He describes a Casual use case with the fields: * Title (goal) * Primary Actor * Scope * Level * (Story): the body of the use case is simply a paragraph or two of text, informally describing what happens. === Fowler style === Martin Fowler states \"There is no standard way to write the content of a use case, and different formats work well in different cases.\"Fowler, 2004. He describes \"a common style to use\" as follows: * Title: \"goal the use case is trying to satisfy\" * Main Success Scenario: numbered list of steps ** Step: \"a simple statement of the interaction between the actor and a system\" * Extensions: separately numbered lists, one per Extension ** Extension: \"a condition that results in different interactions from .. the main success scenario\". An extension from main step 3 is numbered 3a, etc. The Fowler style can also be viewed as a simplified variant of the Cockburn template. == Actors == A use case defines the interactions between external actors and the system under consideration to accomplish a goal. Actors must be able to make decisions, but need not be human: \"An actor might be a person, a company or organization, a computer program, or a computer system\u2014hardware, software, or both.\"Cockburn, 2001. Page 53. Actors are always stakeholders, but not all stakeholders are actors, since they \"never interact directly with the system, even though they have the right to care how the system behaves.\" For example, \"the owners of the system, the company's board of directors, and regulatory bodies such as the Internal Revenue Service and the Department of Insurance\" could all be stakeholders but are unlikely to be actors. Similarly, a person using a system may be represented as different actors because of playing different roles. For example, user \"Joe\" could be playing the role of a Customer when using an Automated Teller Machine to withdraw cash from his own account, or playing the role of a Bank Teller when using the system to restock the cash drawer on behalf of the bank. Actors are often working on behalf of someone else. Cockburn writes that \"These days I write 'sales rep for the customer' or 'clerk for the marketing department' to capture that the user of the system is acting for someone else.\" This tells the project that the \"user interface and security clearances\" should be designed for the sales rep and clerk, but that the customer and marketing department are the roles concerned about the results.Cockburn, 2001. Page 55. A stakeholder may play both an active and an inactive role: for example, a Consumer is both a \"mass-market purchaser\" (not interacting with the system) and a User (an actor, actively interacting with the purchased product).Alexander and Beus-Dukic, 2009. Page 39. In turn, a User is both a \"normal operator\" (an actor using the system for its intended purpose) and a \"functional beneficiary\" (a stakeholder who benefits from the use of the system). For example, when user \"Joe\" withdraws cash from his account, he is operating the Automated Teller Machine and obtaining a result on his own behalf. Cockburn advises to look for actors among the stakeholders of a system, the primary and supporting (secondary) actors of a use case, the system under design (SuD) itself, and finally among the \"internal actors\", namely the components of the system under design. == Business use case == In the same way that a use case describes a series of events and interactions between a user (or other type of Actor) and a system, in order to produce a result of value (goal), a business use case describes the more general interaction between a business system and the users/actors of that system to produce business results of value. The primary difference is that the system considered in a business use case model may contain people in addition to technological systems. These \"people in the system\" are called business workers. In the example of a restaurant, a decision must be made whether to treat each person as an actor (thus outside the system) or a business worker (inside the system). If a waiter is considered an actor, as shown in the example below, then the restaurant system does not include the waiter, and the model exposes the interaction between the waiter and the restaurant. An alternative would be to consider the waiter as a part of the restaurant system (a business worker), while considering the client to be outside the system (an actor).A business Use case diagram depicts a model of several business use cases (goals) which represents the interactions between a restaurant (the business system) and its primary stakeholders (business actors and business workers). == Visual modeling == Use cases are not only texts, but also diagrams, if needed. In the Unified Modeling Language, the relationships between use cases and actors are represented in use case diagrams originally based upon Ivar Jacobson's Objectory notation. SysML uses the same notation at a system block level. In addition, other behavioral UML diagrams such as activity diagrams, sequence diagrams, communication diagrams and state machine diagrams can also be used to visualize use cases accordingly. Specifically, a System Sequence Diagram (SSD) is a sequence diagram often used to show the interactions between the external actors and the system under design (SuD), usually for visualizing a particular scenario of a use case. Use case analysis usually starts by drawing use case diagrams. For agile development, a requirement model of many UML diagrams depicting use cases plus some textual descriptions, notes or use case briefs would be very lightweight and just enough for small or easy project use. As good complements to use case texts, the visual diagram representations of use cases are also effective facilitating tools for the better understanding, communication and design of complex system behavioral requirements. == Examples == Below is a sample use case written with a slightly-modified version of the Cockburn-style template. Note that there are no buttons, controls, forms, or any other UI elements and operations in the basic use case description, where only user goals, subgoals or intentions are expressed in every step of the basic flow or extensions. This practice makes the requirement specification clearer, and maximizes the flexibility of the design and implementations. File:Edit an article.svg Use Case: Edit an article Primary Actor: Member (Registered User) Scope: a Wiki system Level: ! (User goal or sea level) Brief: (equivalent to a user story or an epic) : The member edits any part (the entire article or just a section) of an article they are reading. Preview and changes comparison are allowed during the editing. Stakeholders ... Postconditions : Minimal Guarantees: : Success Guarantees: :* The article is saved and an updated view is shown. :* An edit record for the article is created by the system, so watchers of the article can be informed of the update later. Preconditions: : The article with editing enabled is presented to the member. Triggers: : The member invokes an edit request (for the full article or just one section) on the article. Basic flow: # The system provides a new editor area/box filled with all the article's relevant content with an informative edit summary for the member to edit. If the member just wants to edit a section of the article, only the original content of the section is shown, with the section title automatically filled out in the edit summary. # The member modifies the article's content till satisfied. # The member fills out the edit summary, tells the system if they want to watch this article, and submits the edit. # The system saves the article, logs the edit event and finishes any necessary post processing. # The system presents the updated view of the article to the member. Extensions: 2\u20133. : a. Show preview: :# The member selects Show preview which submits the modified content. :# The system reruns step 1 with addition of the rendered updated content for preview, and informs the member that his/her edits have not been saved yet, then continues. : b. Show changes: :# The member selects Show changes which submits the modified content. :# The system reruns step 1 with addition of showing the results of comparing the differences between the current edits by the member and the most recent saved version of the article, then continues. : c. Cancel the edit: :# The member selects Cancel. :# The system discards any change the member has made, then goes to step 5. 4a. Timeout: ... == Advantages == Since the inception of the agile movement, the user story technique from Extreme Programming has been so popular that many think it is the only and best solution for agile requirements of all projects. Alistair Cockburn lists five reasons why he still writes use cases in agile development. # The list of goal names provides the shortest summary of what the system will offer (even than user stories). It also provides a project planning skeleton, to be used to build initial priorities, estimates, team allocation and timing. # The main success scenario of each use case provides everyone involved with an agreement as to what the system will basically do and what it will not do. It provides the context for each specific line item requirement (e.g. fine-grained user stories), a context that is very hard to get anywhere else. # The extension conditions of each use case provide a framework for investigating all the little, niggling things that somehow take up 80% of the development time and budget. It provides a look ahead mechanism, so the stakeholders can spot issues that are likely to take a long time to get answers for. These issues can and should then be put ahead of the schedule, so that the answers can be ready when the development team gets around to working on them. # The use case extension scenario fragments provide answers to the many detailed, often tricky and ignored business questions: \"What are we supposed to do in this case?\" It is a thinking/documentation framework that matches the if...then...else statement that helps the programmers think through issues. Except it is done at investigation time, not programming time. # The full use case set shows that the investigators have thought through every user's needs, every goal they have with respect to the system, and every business variant involved. In summary, specifying system requirements in use cases has these apparent benefits comparing with traditional or other approaches: User focused Use cases constitute a powerful, user-centric tool for the software requirements specification process. Use case modeling typically starts from identifying key stakeholder roles (actors) interacting with the system, and their goals or objectives the system must fulfill (an outside perspective). These user goals then become the ideal candidates for the names or titles of the use cases which represent the desired functional features or services provided by the system. This user-centered approach ensure that what has the real business value and the user really want is developed, not those trivial functions speculated from a developer or system (inside) perspective. Use case authoring has been an important and valuable analysis tool in the domain of User-Centered Design (UCD) for years. Better communication Use cases are often written in natural languages with structured templates. This narrative textual form (legible requirement stories), understandable by almost everyone, complemented by visual UML diagrams foster better and deeper communications among all stakeholders, including customers, end-users, developers, testers and managers. Better communications result in quality requirements and thus quality systems delivered. Quality requirements by structured exploration One of the most powerful things about use cases resides in the formats of the use case templates, especially the main success scenario (basic flow) and the extension scenario fragments (extensions, exceptional and/or alternative flows). Analyzing a use case step by step from preconditions to postconditions, exploring and investigating every action step of the use case flows, from basic to extensions, to identify those tricky, normally hidden and ignored, seemingly trivial but realistically often costly requirements (as Cockburn mentioned above), is a structured and beneficial way to get clear, stable and quality requirements systematically. Minimizing and optimizing the action steps of a use case to achieve the user goal also contribute to a better interaction design and user experience of the system. Facilitate testing and user documentation With content based upon an action or event flow structure, a model of well-written use cases also serves as an excellent groundwork and valuable guidelines for the design of test cases and user manuals of the system or product, which is an effort-worthy investment up-front. There is obvious connections between the flow paths of a use case and its test cases. Deriving functional test cases from a use case through its scenarios (running instances of a use case) is straightforward. == Limitations == Limitations of use cases include: * Use cases are not well suited to capturing non-interaction based requirements of a system (such as algorithm or mathematical requirements) or non-functional requirements (such as platform, performance, timing, or safety-critical aspects). These are better specified declaratively elsewhere. * As there are no fully standard definitions of use cases, each project must form its own interpretation. * Some use case relationships, such as extends, are ambiguous in interpretation and can be difficult for stakeholders to understand as pointed out by Cockburn (Problem #6) * Use case developers often find it difficult to determine the level of user interface (UI) dependency to incorporate in a use case. While use case theory suggests that UI not be reflected in use cases, it can be awkward to abstract out this aspect of design, as it makes the use cases difficult to visualize. In software engineering, this difficulty is resolved by applying requirements traceability, for example with a traceability matrix. Another approach to associate UI elements with use cases, is to attach a UI design to each step in the use case. This is called a use case storyboard. * Use cases can be over-emphasized. Bertrand Meyer discusses issues such as driving system design too literally from use cases, and using use cases to the exclusion of other potentially valuable requirements analysis techniques.Meyer, 2000. (page needed) * Use cases are a starting point for test design,Armour and Miller, 2000. (page needed) but since each test needs its own success criteria, use cases may need to be modified to provide separate post-conditions for each path.Denney, 2005. (page needed) * Though use cases include goals and contexts, whether these goals and motivations behind the goals (stakeholders concerns and their assessments including non-interaction) conflict or negatively/positively affect other system goals are subject of goal oriented requirement modelling techniques (such as BMM, I*, KAOS and ArchiMate ARMOR). == Misconceptions == Common misunderstandings about use cases are: User stories are agile; use cases are not. Agile and Scrum are neutral on requirement techniques. As the Scrum Primer states, > Product Backlog items are articulated in any way that is clear and > sustainable. Contrary to popular misunderstanding, the Product Backlog does > not contain \"user stories\"; it simply contains items. Those items can be > expressed as user stories, use cases, or any other requirements approach > that the group finds useful. But whatever the approach, most items should > focus on delivering value to customers. Use case techniques have evolved to take Agile approaches into account by using use case slices to incrementally enrich a use case. Use cases are mainly diagrams. Craig Larman stresses that \"use cases are not diagrams, they are text\". Use cases have too much UI-related content. As some put it, > Use cases will often contain a level of detail (i.e. naming of labels and > buttons) which make it not well suited for capturing the requirements for a > new system from scratch. Novice misunderstandings. Each step of a well-written use case should present actor goals or intentions (the essence of functional requirements), and normally it should not contain any user interface details, e.g. naming of labels and buttons, UI operations etc., which is a bad practice and will unnecessarily complicate the use case writing and limit its implementation. As for capturing requirements for a new system from scratch, use case diagrams plus use case briefs are often used as handy and valuable tools, at least as lightweight as user stories. Writing use cases for large systems is tedious and a waste of time. As some put it, > The format of the use case makes it difficult to describe a large system > (e.g. CRM system) in less than several hundred pages. It is time consuming > and you will find yourself spending time doing an unnecessary amount of > rework. Spending much time in writing tedious use cases which add no or little value and result in a lot of rework is a bad smell indicating that the writers are not well skilled and have little knowledge of how to write quality use cases both efficiently and effectively. Use cases should be authored in an iterative, incremental and evolutionary (agile) way. Applying use case templates does not mean that all the fields of a use case template should be used and filled out comprehensively from up-front or during a special dedicated stage, i.e. the requirement phase in the traditional waterfall development model. In fact, the use case formats formulated by those popular template styles, e.g. the RUP's and the Cockburn's (also adopted by the OUM method) etc., have been proved in practice as valuable and helpful tools for capturing, analyzing and documenting complex requirements of large systems. The quality of a good use case documentation (model) should not be judged largely or only by its size. It is possible as well that a quality and comprehensive use case model of a large system may finally evolve into hundreds of pages mainly because of the inherent complexity of the problem in hand, not because of the poor writing skills of its authors. == Tools == Text editors and/or word processors with template support are often used to write use cases. For large and complex system requirements, dedicated use case tools are helpful. Some of the well-known use case tools include: * CaseComplete * Enterprise Architect * MagicDraw * Rational Software's RequisitePro - one of the early, well-known use case and requirement management tools in the 1990s. * Software Ideas Modeler * Wiki software - good tools for teams to author and manage use cases collaboratively. Most UML tools support both the text writing and visual modeling of use cases. == See also == * Abuse case * Business case * Event partitioning * Feature * List of UML tools * Misuse case * Requirement * Requirements elicitation * Scenario * Storyboard * Test Case * Use Case Points *Entity-control-boundary == References == == Further reading == * Alexander, Ian, and Beus-Dukic, Ljerka. Discovering Requirements: How to Specify Products and Services. Wiley, 2009. * Alexander, Ian, and Maiden, Neil. Scenarios, Stories, Use Cases. Wiley 2004. * Armour, Frank, and Granville Miller. Advanced Use Case Modeling: Software Systems. Addison- Wesley, 2000. * Kurt Bittner, Ian Spence, Use Case Modeling, Addison-Wesley Professional, 20 August 2002. * Cockburn, Alistair. Writing Effective Use Cases. Addison-Wesley, 2001. * Larry Constantine, Lucy Lockwood, Software for Use: A Practical Guide to the Essential Models and Methods of Usage-Centered Design, Addison-Wesley, 1999. * Denney, Richard. Succeeding with Use Cases: Working Smart to Deliver Quality. Addison-Wesley, 2005. * Fowler, Martin. UML Distilled (Third Edition). Addison-Wesley, 2004. * Jacobson Ivar, Christerson M., Jonsson P., \u00d6vergaard G., Object-Oriented Software Engineering - A Use Case Driven Approach, Addison-Wesley, 1992. * Jacobson Ivar, Spence I., Bittner K. Use Case 2.0: The Guide to Succeeding with Use Cases, IJI SA, 2011. * Dean Leffingwell, Don Widrig, Managing Software Requirements: A Use Case Approach, Addison-Wesley Professional. 7 December 2012. * Kulak, Daryl, and Eamonn Guiney. Use cases: requirements in context. Addison-Wesley, 2012. * Meyer, Bertrand. Object Oriented Software Construction. (2nd edition). Prentice Hall, 2000. * Schneider, Geri and Winters, Jason P. Applying Use Cases 2nd Edition: A Practical Guide. Addison-Wesley, 2001. * Wazlawick, Raul S. Object-Oriented Analysis and Design for Information Systems: Modeling with UML, OCL, and IFML. Morgan Kaufmann, 2014. == External links == * Alistair Cockburn's use case column * Use Cases (Usability.gov) * Basic Use Case Template by Alistair Cockburn * Application of use cases for stakeholder analysis \"Project Icarus: Stakeholder Scenarios for an Interstellar Exploration Program\", JBIS, 64, 224-233 * \"An Academic Survey on the Role of Use Cases in the UML\" * Search use case in IBM developerWorks Category:Software project management Category:Software requirements Category:Unified Modeling Language Category:Systems Modeling Language Category:1986 establishments in Sweden Category:1986 in computing Category:Swedish inventions Category:Agile software development ",
    "title": "Use case"
}