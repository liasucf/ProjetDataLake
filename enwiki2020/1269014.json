{
    "id": "1269014",
    "text": "A File Control Block (FCB) is a file system structure in which the state of an open file is maintained. A FCB is managed by the operating system, but it resides in the memory of the program that uses the file, not in operating system memory. This allows a process to have as many files open at one time as it wants to, provided it can spare enough memory for an FCB per file. The FCB originates from CP/M and is also present in most variants of DOS, though only as a backwards compatibility measure in MS-DOS versions 2.0 and later. A full FCB is 36 bytes long; in early versions of CP/M, it was 33 bytes. This fixed size, which could not be increased without breaking application compatibility, lead to the FCB's eventual demise as the standard method of accessing files. The meanings of several of the fields in the FCB differ between CP/M and DOS, and also depending on what operation is being performed. The following fields have consistent meanings: {|class=\"wikitable\" |- ! Offset !! Byte size !! Contents |- | 0x00 |align=right| 1 || Drive number \u2014 0 for default, 1 for A:, 2 for B:, ... |- | 0x01 |align=right| 8 |rowspan=2| File name and extension \u2014 together these form a 8.3 file name. |- | 0x09 |align=right| 3 |- | 0x0C |align=right| 20 || Implementation dependent \u2014 should be initialised to zero before the FCB is opened. |- | 0x20 |align=right| 1 || Record number in the current section of the file \u2014 used when performing sequential access. |- | 0x21 |align=right| 3 || Record number to use when performing random access. |} The 20-byte-long field starting at offset 0x0C contained fields which (among others) provided further information about the file: {|class=\"wikitable\" |- ! Offset !! Byte size !! Contents |- | 0x0E |align=right| 2 || File's record length in bytes. |- | 0x10 |align=right| 4 || Total file size in bytes. |- | 0x14 |align=right| 2 || Date of last modification to file contents. |- | 0x16 |align=right| 2 || Time of last modification. |} Further values were used by newer versions of DOS until new information could no longer fit in these 20 bytes. Some preceding \"negative offset\" bytes were squeezed from reserved spaces in CP/M Zero Page and DOS Program Segment Prefix for storing file attributes. ==Usage== In CP/M, 86-DOS and PC DOS 1.x/MS-DOS 1.xx, the FCB was the only method of accessing files. Under DOS a few INT 21h subfunctions provided the interface to operate on files using the FCB. When, with MS-DOS 2, preparations were made to support multiple processes or users, use other filesystems than FAT or to share files over networks in the future, FCBs were felt to be too small to handle the extra data required for such features and therefore FCBs were seen as inadequate for various future expansion paths. Also, they didn't provide a field to specify sub-directories. Exposing file system related data to user-space was also seen as a security risk. FCBs were thus superseded by file handles, as used on UNIX and its derivatives. File handles are simply consecutive integer numbers associated with specific open files. If a program uses the newer file handle API to open a file, the operating system will manage its internal data structure associated with that file in its own memory area. This has the great advantage that these structures can grow in size in later operating system versions without breaking compatibility with application programs; its disadvantage is that, given the rather simplistic memory management of DOS, space for as many of these structures as the most \"file-hungry\" program is likely to use has to be reserved at boot time and cannot be used for any other purpose while the computer is running. Such memory reservation is done using the FILES= directive in the CONFIG.SYS file. This problem does not occur with FCBs in DOS 1 or in CP/M, since the operating system stores all that it needs to know about an open file inside the FCB and thus does not need to use any per-file memory in operating system memory space. When using FCBs in MS-DOS 3 or later, the FCB format depends on if SHARE.EXE is loaded and if the FCB refers to a local or remote file and often refer to a SFT entry. Because of this, the number of FCBs which can be kept open at once in DOS 3 or higher is limited as well, usually to 4; using the FCBS= directive in the CONFIG.SYS file, it may be increased beyond that number if necessary. Under DR-DOS, both FILES and FCBS come from the same internal pool of available handles structures and are assigned dynamically as needed. FCBs were supported in all versions of MS-DOS and Windows until the introduction of the FAT32 filesystem. Windows 95, Windows 98 and Windows Me do not support the use of FCBs on FAT32 drives due to its 32-bit cluster numbers, except to read the volume label. This caused some old DOS applications, including WordStar, to fail under these versions of Windows. The FCB interface does not work properly on Windows NT, 2000, etc. either \u2013 WordStar does not function properly on these operating systems. DOS emulators DOSEMU and DOSBox implement the FCB interface properly, thus they are a way to run older DOS programs that need FCBs on modern operating systems. == Disk Transfer Area == A companion data structure used together with the FCB was the Disk Transfer Area (DTA). This is the name given to the buffer where file contents (records) would be read into/written from. File access functions in DOS that used the FCB assumed a fixed location for the DTA, initially pointing to a part of the PSP (see next section); this location could be changed by calling a DOS function, with subsequent file accesses implicitly using the new location. With the deprecation of the FCB method, the new file access functions which used file handles also provided a means to specify a memory buffer for file contents with every function call, such that maintaining concurrent, independent buffers (either for different files or for the same file) became much more practical. == Program Segment Prefix & Program Initialisation == Every DOS executable started from the shell (COMMAND.COM) was provided with a pre-filled 256-byte long data structure called the Program Segment Prefix (PSP). Relevant fields within this structure include: {|class=\"wikitable\" |- ! Offset !! Byte size !! Contents |- | 0x02 |align=right| 2 || Available memory for the program in 16-byte chunks. |- | 0x2C |align=right| 2 || Segment address containing the program's environment variables. |- | 0x5C |align=right| 16 || Prepared FCB for first command line argument (unopened). |- | 0x6C |align=right| 20 || Prepared FCB for second command line argument (unopened). |- | 0x80 |align=right| 1 || Length of command line. |- | 0x81 |align=right| 127 || Command line contents. |} This data structure could be found at the beginning of the data segment whose address was provided by DOS at program start in the DS and ES segment registers. Besides providing the program's command line verbatim at address 0x81, DOS also tried to construct two FCB's corresponding to the first two words in the command line, the purpose being to save work for the programmer in the common case where these words were filenames to operate on. Since these FCB's remained unopened, no problem would ensue even if these command line words did not refer to files. The initial address for the DTA was set to overlay the area in the PSP (at address 0x80) where the command line arguments were stored, such that a program needed to parse this area for command line arguments before invoking DOS functions that made use of the DTA (such as reading in a file record), unless the program took care to change the address of the DTA to some other memory region (or not use the DTA/FCB functions altogether, which soon became deprecated in favour of file handles). == See also == *Record-oriented filesystem == References == ==Further reading== * * * - In-depth description of CP/M FCB Category:CP/M technology Category:DOS technology ",
    "title": "File Control Block"
}