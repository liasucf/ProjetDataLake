{
    "id": "7843159",
    "text": "The level-index (LI) representation of numbers, and its algorithms for arithmetic operations, were introduced by Charles Clenshaw and Frank Olver in 1984. The symmetric form of the LI system and its arithmetic operations were presented by Clenshaw and Peter Turner in 1987. Michael Anuta, Daniel Lozier, Nicolas Schabanel and Turner developed the algorithm for symmetric level-index (SLI) arithmetic, and a parallel implementation of it. There has been extensive work on developing the SLI arithmetic algorithms and extending them to complex and vector arithmetic operations. ==Definition== The idea of the level-index system is to represent a non-negative real number as : X=e^{e^{e^{\\cdots^{e^f}}}} where 0\\leq f<1 and the process of exponentiation is performed times, with \\ell\\geq 0. and are the level and index of respectively. is the LI image of . For example, : X=1234567=e^{e^{e^{0.9711308}}} so its LI image is : x=\\ell+f=3+0.9711308=3.9711308. The symmetric form is used to allow negative exponents, if the magnitude of is less than 1\\. One takes or and stores it (after substituting +1 for 0 for the reciprocal sign since for the LI image is and uniquely defines and we can do away without a third state and use only one bit for the two states \u22121 and +1) as the reciprocal sign . Mathematically, this is equivalent to taking the reciprocal (multiplicative inverse) of a small magnitude number, and then finding the SLI image for the reciprocal. Using one bit for the reciprocal sign enables the representation of extremely small numbers. A sign bit may also be used to allow negative numbers. One takes sgn(X) and stores it (after substituting +1 for 0 for the sign since for the LI image is and uniquely defines and we can do away without a third state and use only one bit for the two states \u22121 and +1) as the sign . Mathematically, this is equivalent to taking the inverse (additive inverse) of a negative number, and then finding the SLI image for the inverse. Using one bit for the sign enables the representation of negative numbers. The mapping function is called the generalized logarithm function. It is defined as : \\psi (X)= \\begin{cases} X & \\text{if } 0 \\leq X<1 \\\\\\ 1+ \\psi (\\ln X) & \\text{if } X \\geq 1 \\end{cases} and it maps [0,\\infty ) onto itself monotonically and so it is invertible on this interval. The inverse, the generalized exponential function, is defined by : \\varphi (x)= \\begin{cases} x & \\text{if } 0\\leq x<1 \\\\\\ e^{\\varphi (x-1)} & \\text{if } x\\geq 1 \\end{cases} The density of values represented by has no discontinuities as we go from level to (a very desirable property) since: : \\left. \\frac{d\\varphi(x)}{dx} \\right|_{x=1} = \\left.\\frac{d\\varphi(e^x)}{dx}\\right|_{x=0}. The generalized logarithm function is closely related to the iterated logarithm used in computer science analysis of algorithms. Formally, we can define the SLI representation for an arbitrary real (not 0 or 1) as : X=s_X\\varphi (x)^{r_X} where is the sign (additive inversion or not) of and is the reciprocal sign (multiplicative inversion or not) as in the following equations: : s_X=\\sgn(X),\\, r_X=\\sgn(|X|-|X|^{-1}),\\, x=\\psi (\\max (|X|,|X|^{-1}))=\\psi (|X|^{r_X}) whereas for = 0 or 1, we have: : s_0=+1, r_0=+1, x=0.0, \\, : s_1=+1, r_1=+1, x=1.0. \\, For example, : X=-\\dfrac{1}{1234567}=-e^{-e^{e^{0.9711308}}} and its SLI representation is : x=-\\varphi (3.9711308)^{-1}. ==See also== * Tetration * Floating point (FP) * Tapered floating point (TFP) * Logarithmic number system (LNS) * Level (logarithmic quantity) ==References== ==Further reading== * * * * https://web.archive.org/web/20180709200456/https://www.americanscientist.org/sites/americanscientist.org/files/20097301410207456-2009-09Hayes.pdf -->. Also reprinted in: ==External links== * sli-c-library (hosted by Google Code), \"C++ Implementation of Symmetric Level-Index Arithmetic\". Category:Computer arithmetic ",
    "title": "Symmetric level-index arithmetic"
}