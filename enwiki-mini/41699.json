{
    "id": "41699",
    "text": "In digital circuits, a shift register is a cascade of flip flops, sharing the same clock, in which the output of each flip-flop is connected to the \"data\" input of the next flip-flop in the chain, resulting in a circuit that shifts by one position the \"bit array\" stored in it, \"shifting in\" the data present at its input and 'shifting out' the last bit in the array, at each transition of the clock input. More generally, a shift register may be multidimensional, such that its \"data in\" and stage outputs are themselves bit arrays; this is implemented simply by running several shift registers of the same bit-length in parallel. Shift registers can have both parallel and serial inputs and outputs. These are often configured as \"serial-in, parallel-out\" (SIPO) or as \"parallel-in, serial-out\" (PISO). There are also types that have both serial and parallel input and types with serial and parallel output. There are also \"bidirectional\" shift registers which allow shifting in both directions: L\u2192R or R\u2192L. The serial input and last output of a shift register can also be connected to create a \"circular shift register\". A PIPO register (parallel in, parallel out) is very fast \u2013 an output is given within a single clock pulse. == Serial-in serial-out (SISO) == === Destructive readout === {| class=\"wikitable floatright\" style=\"text-align:center\" |+ Sample usage of a 4-bit shift register. Data input is 10110000. ! ! ! ! ! |- ! 0 | 0 || 0 || 0 || 0 |- ! 1 | 1 || 0 || 0 || 0 |- ! 2 |0|| 1 || 0 || 0 |- ! 3 |1||0|| 1 || 0 |- ! 4 | 1 ||1||0|| 1 |- ! 5 | 0 || 1 ||1||0 |- ! 6 | 0 || 0 || 1 ||1 |- ! 7 | 0 || 0 || 0 || 1 |- ! 8 | 0 || 0 || 0 || 0 |} These are the simplest kind of shift registers. The data string is presented at \"Data In\", and is shifted right one stage each time \"Data Advance\" is brought high. At each advance, the bit on the far left (i.e. \"Data In\") is shifted into the first flip-flop's output. The bit on the far right (i.e. \"Data Out\") is shifted out and lost. The data is stored after each flip-flop on the \"Q\" output, so there are four storage \"slots\" available in this arrangement, hence it is a 4-bit Register. To give an idea of the shifting pattern, imagine that the register holds 0000 (so all storage slots are empty). As \"Data In\" presents 1,0,1,1,0,0,0,0 (in that order, with a pulse at \"Data Advance\" each time\u2014this is called clocking or strobing) to the register, this is the result. The right hand column corresponds to the right-most flip-flop's output pin, and so on. So the serial output of the entire register is 00001101. It can be seen that if data were to be continued to input, it would get exactly what was put in (10110000), but offset by four \"Data Advance\" cycles. This arrangement is the hardware equivalent of a queue. Also, at any time, the whole register can be set to zero by bringing the reset (R) pins high. This arrangement performs destructive readout - each datum is lost once it has been shifted out of the right-most bit. ==Serial-in parallel-out (SIPO)== center This configuration allows conversion from serial to parallel format. Data input is serial, as described in the SISO section above. Once the data has been clocked in, it may be either read off at each output simultaneously, or it can be shifted out. In this configuration, each flip-flop is edge triggered. All flip-flops operate at the given clock frequency. Each input bit makes its way down to the Nth output after N clock cycles, leading to parallel output. In cases where the parallel outputs should not change during the serial loading process, it is desirable to use a latched or buffered output. In a latched shift register (such as the 74595) the serial data is first loaded into an internal buffer register, then upon receipt of a load signal the state of the buffer register is copied into a set of output registers. In general, the practical application of the serial-in/parallel-out shift register is to convert data from serial format on a single wire to parallel format on multiple wires. == Parallel-in serial-out (PISO) == This configuration has the data input on lines D1 through D4 in parallel format, D1 being the most significant bit. To write the data to the register, the Write/Shift control line must be held LOW. To shift the data, the W/S control line is brought HIGH and the registers are clocked. The arrangement now acts as a PISO shift register, with D1 as the Data Input. However, as long as the number of clock cycles is not more than the length of the data-string, the Data Output, Q, will be the parallel data read off in order. 4-Bit PISO Shift Register The animation below shows the write/shift sequence, including the internal state of the shift register. center ==Uses== Toshiba TC4015BP - Dual 4-Stage Static Shift Register (with serial input/parallel output) One of the most common uses of a shift register is to convert between serial and parallel interfaces. This is useful as many circuits work on groups of bits in parallel, but serial interfaces are simpler to construct. Shift registers can be used as simple delay circuits. Several bidirectional shift registers could also be connected in parallel for a hardware implementation of a stack. SIPO registers are commonly attached to the output of microprocessors when more general-purpose input/output pins are required than are available. This allows several binary devices to be controlled using only two or three pins, but more slowly than by parallel output. The devices in question are attached to the parallel outputs of the shift register, and the desired state for all those devices can be sent out of the microprocessor using a single serial connection. Similarly, PISO configurations are commonly used to add more binary inputs to a microprocessor than are available \u2013 each binary input (such as a button or more complicated circuitry) is attached to a parallel input of the shift register, then the data is sent back via serial to the microprocessor using several fewer lines than originally required. Shift registers can also be used as pulse extenders. Compared to monostable multivibrators, the timing has no dependency on component values, however, it requires external clock and the timing accuracy is limited by a granularity of this clock. Example: Ronja Twister, where five 74164 shift registers create the core of the timing logic this way (schematic). In early computers, shift registers were used to handle data processing: two numbers to be added were stored in two shift registers and clocked out into an arithmetic and logic unit (ALU) with the result being fed back to the input of one of the shift registers (the accumulator) which was one bit longer since binary addition can only result in an answer that is the same size or one bit longer. Many computer languages include instructions to \"shift right\" and \"shift left\" the data in a register, effectively dividing by two or multiplying by two for each place shifted. Very large serial-in serial- out shift registers (thousands of bits in size) were used in a similar manner to the earlier delay line memory in some devices built in the early 1970s. Such memories were sometimes called \"circulating memory\". For example, the Datapoint 3300 terminal stored its display of 25 rows of 72 columns of upper- case characters using fifty-four 200-bit shift registers, arranged in six tracks of nine packs each, providing storage for 1800 six-bit characters. The shift register design meant that scrolling the terminal display could be accomplished by simply pausing the display output to skip one line of characters.bitsavers.org, DataPoint 3300 Maintenance Manual, December 1976. ==History== One of the first known examples of a shift register was in the Mark 2 Colossus, a code-breaking machine built in 1944. It was a six-stage device built of vacuum tubes and thyratrons. A shift register was also used in the IAS machine, built by John von Neumann and others at the Institute for Advanced Study in the late 1940s. ==See also== *Delay line memory *Linear feedback shift register (LFSR) *Ring counter *SerDes (Serializer/Deserializer) *Serial Peripheral Interface Bus *Shift register lookup table (SRL) *Circular buffer ==References== Category:Digital registers Category:Computer memory ",
    "title": "Shift register"
}