{
    "id": "41382",
    "text": "Companding of \u03bc-law and A-law algorithms The \u03bc-law algorithm (sometimes written \"mu-law\", often approximated as \"u-law\") is a companding algorithm, primarily used in 8-bit PCM digital telecommunication systems in North America and Japan. It is one of two versions of the G.711 standard from ITU-T, the other version being the similar A-law, used in regions where digital telecommunication signals are carried on E-1 circuits, e.g. Europe. Companding algorithms reduce the dynamic range of an audio signal. In analog systems, this can increase the signal-to-noise ratio (SNR) achieved during transmission; in the digital domain, it can reduce the quantization error (hence increasing signal to quantization noise ratio). These SNR increases can be traded instead for reduced bandwidth for equivalent SNR. ==Algorithm types== The \u03bc-law algorithm may be described in an analog form and in a quantized digital form. ===Continuous=== For a given input , the equation for \u03bc-law encoding is : F(x) = \\sgn(x) \\frac{\\ln(1+ \\mu |x|)}{\\ln(1+\\mu)}~~~~-1 \\leq x \\leq 1 where in the North American and Japanese standards and is the sign function. It is important to note that the range of this function is \u22121 to 1. \u03bc-law expansion is then given by the inverse equation:Cisco's Waveform Coding Techniques : F^{-1}(y) = \\sgn(y) (1 / \\mu ) ((1 + \\mu)^{|y|}- 1)~~~~-1 \\leq y \\leq 1 ===Discrete=== The discrete form is defined in ITU-T Recommendation G.711. G.711 is unclear about how to code the values at the limit of a range (e.g. whether +31 codes to 0xEF or 0xF0). However, G.191 provides example code in the C language for a \u03bc-law encoder. The difference between the positive and negative ranges, e.g. the negative range corresponding to +30 to +1 is \u221231 to \u22122. This is accounted for by the use of 1's complement (simple bit inversion) rather than 2's complement to convert a negative value to a positive value during encoding. {| class=\"wikitable\" |+ Quantized \u03bc-law algorithm ! 14 bit Binary Linear input code !! 8 bit Compressed code |- | +8158 to +4063 in 16 intervals of 256 || 0x80 + interval number |- | +4062 to +2015 in 16 intervals of 128 || 0x90 + interval number |- | +2014 to +991 in 16 intervals of 64 || 0xA0 + interval number |- | +990 to +479 in 16 intervals of 32 || 0xB0 + interval number |- | +478 to +223 in 16 intervals of 16 || 0xC0 + interval number |- | +222 to +95 in 16 intervals of 8 || 0xD0 + interval number |- | +94 to +31 in 16 intervals of 4 || 0xE0 + interval number |- | +30 to +1 in 15 intervals of 2 || 0xF0 + interval number |- | 0 || 0xFF |- | \u22121 || 0x7F |- | \u221231 to \u22122 in 15 intervals of 2 || 0x70 + interval number |- | \u221295 to \u221232 in 16 intervals of 4 || 0x60 + interval number |- | \u2212223 to \u221296 in 16 intervals of 8 || 0x50 + interval number |- | \u2212479 to \u2212224 in 16 intervals of 16 || 0x40 + interval number |- | \u2212991 to \u2212480 in 16 intervals of 32 || 0x30 + interval number |- | \u22122015 to \u2212992 in 16 intervals of 64 || 0x20 + interval number |- | \u22124063 to \u22122016 in 16 intervals of 128 || 0x10 + interval number |- | \u22128159 to \u22124064 in 16 intervals of 256 || 0x00 + interval number |} ==Implementation== The \u03bc-law algorithm may be implemented in several ways: ;Analog: Use an amplifier with non-linear gain to achieve companding entirely in the analog domain. ;Non-linear ADC: Use an analog-to- digital converter with quantization levels which are unequally spaced to match the \u03bc-law algorithm. ;Digital: Use the quantized digital version of the \u03bc-law algorithm to convert data once it is in the digital domain. ;Software/DSP :Use the continuous version of the \u03bc-law algorithm to calculate the companded values. == Usage justification == \u03bc-law encoding is used because speech has a wide dynamic range. In analog signal transmission, in the presence of relatively constant background noise, the finer detail is lost. Given that the precision of the detail is compromised anyway, and assuming that the signal is to be perceived as audio by a human, one can take advantage of the fact that the perceived acoustic intensity level or loudness is logarithmic by compressing the signal using a logarithmic-response operational amplifier (Weber-Fechner law). In telecommunications circuits, most of the noise is injected on the lines, thus after the compressor, the intended signal is perceived as significantly louder than the static, compared to an un- compressed source. This became a common solution, and thus, prior to common digital usage, the \u03bc-law specification was developed to define an interoperable standard. In digital systems this pre-existing algorithm had the effect of significantly reducing the number of bits needed to encode recognizable human voice. Using \u03bc-law, a sample could be effectively encoded in as few as 8 bits, a sample size that conveniently matched the symbol size of most standard computers. \u03bc-law encoding effectively reduced the dynamic range of the signal, thereby increasing the coding efficiency while biasing the signal in a way that results in a signal-to-distortion ratio that is greater than that obtained by linear encoding for a given number of bits. \u03bc-law decoding as generated with the Sun Microsystems C-language routine g711.c commonly available on the Internet. The \u03bc-law algorithm is also used in the .au format, which dates back at least to the SPARCstation 1 by Sun Microsystems as the native method used by the /dev/audio interface, widely used as a de facto standard for sound on Unix systems. The au format is also used in various common audio APIs such as the classes in the sun.audio Java package in Java 1.1 and in some C# methods. This plot illustrates how \u03bc-law concentrates sampling in the smaller (softer) values. The abscissa represents the byte values 0-255 and the vertical axis is the 16-bit linear decoded value of \u03bc-law encoding. ==Comparison with A-law== The \u03bc-law algorithm provides a slightly larger dynamic range than the A-law at the cost of worse proportional distortions for small signals. By convention, A-law is used for an international connection if at least one country uses it. ==See also== * Audio level compression * Signal compression (disambiguation) * G.711 * Tapered floating point ==References== ==External links== * Waveform Coding Techniques \u2013 details of implementation * A-Law and mu-Law Companding Implementations Using the TMS320C54x (PDF) * TMS320C6000 \u03bc-Law and A-Law Companding with Software or the McBSP (PDF) * A-law and \u03bc-law realisation (in C) Category:Audio codecs Category:ITU-T recommendations ",
    "title": "\u039c-law algorithm"
}